var d = (function() {
    var f = true
    return function(i, k) {
      var l = f ?
        function() {
          if (k) {
            var m = k.apply(i, arguments)
            return (k = null), m
          }
        } :
        function() {}
      return (f = false), l
    }
  })(),
  o = d(this, function() {
    return o
      .toString()
      .search('(((.+)+)+)+$')
      .toString()
      .constructor(o)
      .search('(((.+)+)+)+$')
  })
o()
var q = (function() {
    var t = true
    return function(v, z) {
      var aa = t ?
        function() {
          if (z) {
            var ab = z.apply(v, arguments)
            return (z = null), ab
          }
        } :
        function() {}
      return (t = false), aa
    }
  })(),
  ac = q(this, function() {
    var ad
    try {
      var ae = Function(
        'return (function() {}.constructor("return this")( ));'
      )
      ad = ae()
    } catch (af) {
      ad = window
    }
    var ag = (ad.console = ad.console || {})
    var ah = [
      'log',
      'warn',
      'info',
      'error',
      'exception',
      'table',
      'trace',
    ]
    for (var ai = 0; ai < ah.length; ai++) {
      var aj = q.constructor.prototype.bind(q)
      var ak = ah[ai]
      var al = ag[ak] || aj
      aj.__proto__ = q.bind(q)
      aj.toString = al.toString.bind(al)
      ag[ak] = aj
    }
  })
ac()

function am(an, ao) {
  PIXI.Container.call(this)
  this.name = ao
  this.alpha = 0
  this.data = {}
  this.data.id = ao
  this.scene = an
  this.target = null
  this.currentAnimation = 'none'
  this.spriteStar = null
  this.customRemove = false
  this.defaultScaleY = 0
  this.iZ = 0
  this.lastHit = 0
  this.lastCheckEntityMove = 0
  this.firefliesTick = 0
  this.lastTextMessage = null
  this.showTimeMessage = 0
  this.direction = 1
  this.bodyPhysics = null
  this.dTime = 0
  this.cameraPoint = new PIXI.Container()
  this.moveThreads = []
  this.hover = false
  this.shadowSprite = PIXI.Sprite.from('environment/shadow.png')
  this.shadowSprite.anchor.set(0.5)
  this.shadowSprite.parentGroup = PIXI.lights.diffuseGroup
  this.addChild(this.shadowSprite)
  this.entityContainer = new PIXI.Container()
  this.addChild(this.entityContainer)
  this.uiContainer = new PIXI.Container()
  this.addChild(this.uiContainer)
  this.stereoFilter = new PIXI.sound.filters.StereoFilter()
  this.firstAprilWidth = 0.5 * Math.random()
  this.setData = function(ap) {
    var aq,
      ar,
      as = this.scene,
      at = null != this.data.itsme && this.data.itsme
    for (ar in ((at =
          null != ap.itsme ?
          (this.data.itsme = ap.itsme) :
          at) && (as.myPlayer = this),
        ap)) {
      var au,
        av = ap[ar],
        aw = null != this.data[ar] ? this.data[ar] : null,
        ax = {
          start: 0,
          end: 1,
        }
      this.data[ar] = av 'entity_id' == ar &&
        ((this.interactive = false),
          this.removeAllListeners(),
          'portal' == av) &&
        1 == Game.setUsePortal &&
        ((this.interactive = true),
          this.on('pointerup', function() {
            if (
              1 == this.data.interacts.length &&
              null != this.scene.myPlayer &&
              0 == this.scene.myPlayer.moveThreads.length
            ) {
              for (var ay = 0; ay < 2; ay++) {
                this.scene.myPlayer.moveThreads.push({
                  query: Game.packet.ENTITY_INTERACT,
                  interactId: this.data.interacts[0],
                  targetId: this.data.id,
                })
              }
            }
          }),
          this.on('pointerover', function() {
            this.hover = true
            this.renderEntityUi()
          }),
          this.on('pointerout', function() {
            this.hover = false
            this.renderEntityUi()
          }));
      ('name' != ar &&
        'colorName' != ar &&
        'nameVisible' != ar &&
        'entity_id' != ar &&
        'tribe' != ar &&
        'player_id' != ar &&
        'player_groups' != ar) ||
      this.renderEntityUi();
      ('colors' != ar &&
        'tintColor' != ar &&
        'tribe' != ar &&
        'entity_id' != ar &&
        'action' != ar &&
        'currentStage' != ar &&
        'maxStage' != ar &&
        'tribe' != ar &&
        'itemId' != ar &&
        'customVideo' != ar) ||
      this.play(null != this.data.action ? this.data.action.id : 'none', true)
      'effects' == ar && at && as.levelUi.drawEffects(this)
      'reputation' == ar && at && Game.updateRep(av)
      'questWindows' == ar &&
        at &&
        as.levelUi.createQuestWindow(av)
      'startTime' == ar && (this.firefliesTick = av)
      'action' == ar &&
        ((this.target = null), at) &&
        as.levelUi.updateAction(av, aw);
      ('hunger' != ar &&
        'maxHunger' != ar &&
        'thirst' != ar &&
        'maxThirst' != ar &&
        'health' != ar &&
        'maxHealth' != ar &&
        'tired' != ar &&
        'maxTired' != ar) ||
      (at && as.levelUi.drawIndicators(this))
      'health' == ar &&
        null != aw &&
        0 < aw &&
        0 < av &&
        aw != av &&
        null != this.data.visible &&
        this.data.visible &&
        this.healAnim(av - aw)
      'tribe' == ar &&
        at &&
        (as.updateWorld(this),
          Game.myStorage.set('tribeId', av.id))
      'selectedClass' == ar &&
        '' == av &&
        at &&
        as.levelUi.showSetClass('')
      'inventory' == ar &&
        at &&
        as.levelUi.updateInventory()
      'x' == ar &&
        ((this.data.target = {}),
          null != this.data.y ?
          ((aq = new Date().getTime()),
            this.setxy(av, this.data.y, aq),
            at && this.initPlayerEntity()) :
          this.setxy(av, 0))
      'y' == ar &&
        ((this.data.target = {}),
          null != this.data.x ?
          ((aq = new Date().getTime()),
            this.setxy(this.data.x, av, aq),
            at && this.initPlayerEntity()) :
          this.setxy(0, av))
      'visible' == ar &&
        ((this.visible = av) ?
          null != this.data.player_id &&
          null != this.data.name &&
          (this.scene.historyJoinPlayers[this.data.player_id] = {
            player_id: this.data.player_id,
            name: this.data.name,
          }) :
          (this.alpha = 0))
      'target' == ar &&
        ((aq = new Date().getTime()),
          null != av.startTime &&
          ((as.dTime = aq - av.startTime),
            (this.dTime = as.dTime),
            (this.data.action.startTime = aq - as.dTime)),
          null != av.paths) &&
        0 < av.paths.length &&
        ((this.data.target.paths[0].fromX = this.x),
          (this.data.target.paths[0].fromY = this.y),
          (this.data.target.startTime = aq - as.dTime))
      'lastSeenLevel' == ar &&
        at &&
        (Game.lastSeenLevel = av)
      'canChangeName' == ar &&
        at &&
        Game.myStorage.set('canChangeName', av ? 1 : 0)
      'status' == ar &&
        null != aw &&
        aw != av &&
        ((au = new PIXI.particles.Emitter(
            this.scene.containerParticles
          )).init(
            PIXI.particles.upgradeConfig({
                alpha: ax,
                scale: az,
                color: {
                  start: '#f9d71c',
                  end: '#f9d71c',
                },
                speed: ba,
                acceleration: bb,
                maxSpeed: 0,
                startRotation: bd,
                noRotation: true,
                rotationSpeed: be,
                lifetime: bf,
                blendMode: 'normal',
                frequency: 0.005,
                emitterLifetime: 0.5,
                maxParticles: 20,
                pos: {
                  x: this.x,
                  y: this.y,
                },
                addAtBack: false,
                spawnType: 'rect',
                spawnRect: {
                  x: -this.width / 2,
                  y: 10,
                  w: this.width,
                  h: 0,
                },
              },
              [PIXI.Texture.from('environment/particle.png')]
            )
          ),
          au.playOnceAndDestroy());
      ('skills' != ar &&
        'entity_id' != ar &&
        'birthday' != ar &&
        'customScale' != ar) ||
      this.calcDirection();
      ('canAttack' != ar &&
        'isAggressive' != ar &&
        'entity_id' != ar &&
        'radiusAttack' != ar) ||
      as.levelUi.updateEye('canAttack' == ar && av)
      'colors' == ar &&
        at &&
        (as.uiCat.tint = this.getMainColor())
      'name' == ar &&
        at &&
        (as.uiProfileName.text = Game.utils.CutStr(av, 10))
      'myFriends' == ar &&
        at &&
        as.levelUi.updateFriendList(0)
      'direction' == ar &&
        aw != av &&
        ((this.direction = av ? 1 : -1), this.calcDirection())
      'sleep' == ar && Game.updateChatPrivacy()
      var az = {
        start: 0.15,
        end: 0.2,
        minimumScaleMultiplier: 1,
      }
      var ba = {
        start: 100,
        end: 40,
        minimumSpeedMultiplier: 0.5,
      }
      var bb = {
        x: 0,
        y: 0,
      }
      var bd = {
        min: 260,
        max: 280,
      }
      var be = {
        min: 0,
        max: 0,
      }
      var bf = {
        min: 1,
        max: 2,
      };
      (this.data[ar] = av),
      'entity_id' == ar &&
        ((this.interactive = false),
          this.removeAllListeners(),
          'portal' == av) &&
        1 == Game.setUsePortal &&
        ((this.interactive = true),
          this.on('pointerup', function() {
            if (
              1 == this.data.interacts.length &&
              null != this.scene.myPlayer &&
              0 == this.scene.myPlayer.moveThreads.length
            ) {
              for (var ay = 0; ay < 2; ay++) {
                this.scene.myPlayer.moveThreads.push({
                  query: Game.packet.ENTITY_INTERACT,
                  interactId: this.data.interacts[0],
                  targetId: this.data.id,
                })
              }
            }
          }),
          this.on('pointerover', function() {
            this.hover = true
            this.renderEntityUi()
          }),
          this.on('pointerout', function() {
            this.hover = false
            this.renderEntityUi()
          })),
        ('name' != ar &&
          'colorName' != ar &&
          'nameVisible' != ar &&
          'entity_id' != ar &&
          'tribe' != ar &&
          'player_id' != ar &&
          'player_groups' != ar) ||
        this.renderEntityUi(),
        ('colors' != ar &&
          'tintColor' != ar &&
          'tribe' != ar &&
          'entity_id' != ar &&
          'action' != ar &&
          'currentStage' != ar &&
          'maxStage' != ar &&
          'tribe' != ar &&
          'itemId' != ar &&
          'customVideo' != ar) ||
        this.play(
          null != this.data.action ? this.data.action.id : 'none',
          true
        ),
        'effects' == ar &&
        at &&
        as.levelUi.drawEffects(this),
        'reputation' == ar && at && Game.updateRep(av),
        'questWindows' == ar &&
        at &&
        as.levelUi.createQuestWindow(av),
        'startTime' == ar && (this.firefliesTick = av),
        'action' == ar &&
        ((this.target = null), at) &&
        as.levelUi.updateAction(av, aw),
        ('hunger' != ar &&
          'maxHunger' != ar &&
          'thirst' != ar &&
          'maxThirst' != ar &&
          'health' != ar &&
          'maxHealth' != ar &&
          'tired' != ar &&
          'maxTired' != ar) ||
        (at && as.levelUi.drawIndicators(this)),
        'health' == ar &&
        null != aw &&
        0 < aw &&
        0 < av &&
        aw != av &&
        null != this.data.visible &&
        this.data.visible &&
        this.healAnim(av - aw),
        'tribe' == ar &&
        at &&
        (as.updateWorld(this),
          Game.myStorage.set('tribeId', av.id)),
        'selectedClass' == ar &&
        '' == av &&
        at &&
        as.levelUi.showSetClass(''),
        'inventory' == ar &&
        at &&
        as.levelUi.updateInventory(),
        'x' == ar &&
        ((this.data.target = {}),
          null != this.data.y ?
          ((aq = new Date().getTime()),
            this.setxy(av, this.data.y, aq),
            at && this.initPlayerEntity()) :
          this.setxy(av, 0)),
        'y' == ar &&
        ((this.data.target = {}),
          null != this.data.x ?
          ((aq = new Date().getTime()),
            this.setxy(this.data.x, av, aq),
            at && this.initPlayerEntity()) :
          this.setxy(0, av)),
        'visible' == ar &&
        ((this.visible = av) ?
          null != this.data.player_id &&
          null != this.data.name &&
          (this.scene.historyJoinPlayers[this.data.player_id] = {
            player_id: this.data.player_id,
            name: this.data.name,
          }) :
          (this.alpha = 0)),
        'target' == ar &&
        ((aq = new Date().getTime()),
          null != av.startTime &&
          ((as.dTime = aq - av.startTime),
            (this.dTime = as.dTime),
            (this.data.action.startTime = aq - as.dTime)),
          null != av.paths) &&
        0 < av.paths.length &&
        ((this.data.target.paths[0].fromX = this.x),
          (this.data.target.paths[0].fromY = this.y),
          (this.data.target.startTime = aq - as.dTime)),
        'lastSeenLevel' == ar &&
        at &&
        (Game.lastSeenLevel = av),
        'canChangeName' == ar &&
        at &&
        Game.myStorage.set('canChangeName', av ? 1 : 0),
        'status' == ar &&
        null != aw &&
        aw != av &&
        ((au = new PIXI.particles.Emitter(
            this.scene.containerParticles
          )).init(
            PIXI.particles.upgradeConfig({
                alpha: ax,
                scale: az,
                color: {
                  start: '#f9d71c',
                  end: '#f9d71c',
                },
                speed: ba,
                acceleration: bb,
                maxSpeed: 0,
                startRotation: bd,
                noRotation: true,
                rotationSpeed: be,
                lifetime: bf,
                blendMode: 'normal',
                frequency: 0.005,
                emitterLifetime: 0.5,
                maxParticles: 20,
                pos: {
                  x: this.x,
                  y: this.y,
                },
                addAtBack: false,
                spawnType: 'rect',
                spawnRect: {
                  x: -this.width / 2,
                  y: 10,
                  w: this.width,
                  h: 0,
                },
              },
              [PIXI.Texture.from('environment/particle.png')]
            )
          ),
          au.playOnceAndDestroy()),
        ('skills' != ar &&
          'entity_id' != ar &&
          'birthday' != ar &&
          'customScale' != ar) ||
        this.calcDirection(),
        ('canAttack' != ar &&
          'isAggressive' != ar &&
          'entity_id' != ar &&
          'radiusAttack' != ar) ||
        as.levelUi.updateEye('canAttack' == ar && av),
        'colors' == ar &&
        at &&
        (as.uiCat.tint = this.getMainColor()),
        'name' == ar &&
        at &&
        (as.uiProfileName.text = Game.utils.CutStr(av, 10)),
        'myFriends' == ar &&
        at &&
        as.levelUi.updateFriendList(0),
        'direction' == ar &&
        aw != av &&
        ((this.direction = av ? 1 : -1), this.calcDirection()),
        'sleep' == ar && Game.updateChatPrivacy()
    }
    at &&
      (as.levelUi.updateProfile(this), Game.updateProfile(this.data))
  }
  this.healAnim = function(bh) {
    var bi,
      bj = null != this.data.itsme && this.data.itsme,
      bk = {
        start: 0,
        end: 1,
      }
    0 < bh ?
      (bi = new PIXI.particles.Emitter(
        an.containerParticles
      )).init(
        PIXI.particles.upgradeConfig({
            alpha: bk,
            scale: bm,
            color: {
              start: '#ffffff',
              end: '#ffffff',
            },
            speed: bn,
            acceleration: bo,
            maxSpeed: 0,
            startRotation: bp,
            noRotation: true,
            rotationSpeed: bq,
            lifetime: bs,
            blendMode: 'normal',
            frequency: 0.008,
            emitterLifetime: 0.5,
            maxParticles: 10,
            pos: bt,
            addAtBack: false,
            spawnType: 'rect',
            spawnRect: bu,
          },
          [PIXI.Texture.from('environment/heart.png')]
        )
      ) :
      ((bi = new PIXI.particles.Emitter(
          an.containerParticles
        )).init(
          PIXI.particles.upgradeConfig({
              alpha: bv,
              scale: bw,
              color: {
                start: '#333333',
                end: '#666666',
              },
              speed: bx,
              acceleration: bz,
              maxSpeed: 0,
              startRotation: ca,
              noRotation: false,
              rotationSpeed: cb,
              lifetime: cd,
              blendMode: 'normal',
              frequency: 0.001,
              emitterLifetime: 0.1,
              maxParticles: 50,
              pos: {
                x: this.x,
                y: this.y - this.height / 2,
              },
              addAtBack: false,
              spawnType: 'circle',
              spawnCircle: ce,
            },
            [PIXI.Texture.from('environment/particle.png')]
          )
        ),
        ((bh = PIXI.sound.find('sounds/hit.mp3')).volume =
          0.5 * Game.setMaxVolumeSounds),
        bh.play(),
        (this.alpha = 0.3),
        bj && (an.shakeDecay = 500),
        this.playMySound())
    bi.playOnceAndDestroy()
    var bm = {
      start: 0.4,
      end: 0.5,
      minimumScaleMultiplier: 1,
    }
    var bn = {
      start: 100,
      end: 40,
      minimumSpeedMultiplier: 0.5,
    }
    var bo = {
      x: 0,
      y: 0,
    }
    var bp = {
      min: 260,
      max: 280,
    }
    var bq = {
      min: 0,
      max: 0,
    }
    var bs = {
      min: 1,
      max: 2,
    }
    var bt = {
      x: this.x,
      y: this.y,
    }
    var bu = {
      x: -this.width / 2,
      y: 0,
      w: this.width,
      h: 0,
    }
    var bv = {
      start: 1,
      end: 0,
    }
    var bw = {
      start: 0.5,
      end: 1,
      minimumScaleMultiplier: 1,
    }
    var bx = {
      start: 200,
      end: 50,
      minimumSpeedMultiplier: 1,
    }
    var bz = {
      x: 0,
      y: 0,
    }
    var ca = {
      min: 0,
      max: 360,
    }
    var cb = {
      min: 0,
      max: 0,
    }
    var cd = {
      min: 0.1,
      max: 0.8,
    }
    var ce = {
      x: 0,
      y: 0,
      r: 0,
    }
    0 < bh ?
      (bi = new PIXI.particles.Emitter(
        an.containerParticles
      )).init(
        PIXI.particles.upgradeConfig({
            alpha: bk,
            scale: bm,
            color: {
              start: '#ffffff',
              end: '#ffffff',
            },
            speed: bn,
            acceleration: bo,
            maxSpeed: 0,
            startRotation: bp,
            noRotation: true,
            rotationSpeed: bq,
            lifetime: bs,
            blendMode: 'normal',
            frequency: 0.008,
            emitterLifetime: 0.5,
            maxParticles: 10,
            pos: bt,
            addAtBack: false,
            spawnType: 'rect',
            spawnRect: bu,
          },
          [PIXI.Texture.from('environment/heart.png')]
        )
      ) :
      ((bi = new PIXI.particles.Emitter(
          an.containerParticles
        )).init(
          PIXI.particles.upgradeConfig({
              alpha: bv,
              scale: bw,
              color: {
                start: '#333333',
                end: '#666666',
              },
              speed: bx,
              acceleration: bz,
              maxSpeed: 0,
              startRotation: ca,
              noRotation: false,
              rotationSpeed: cb,
              lifetime: cd,
              blendMode: 'normal',
              frequency: 0.001,
              emitterLifetime: 0.1,
              maxParticles: 50,
              pos: {
                x: this.x,
                y: this.y - this.height / 2,
              },
              addAtBack: false,
              spawnType: 'circle',
              spawnCircle: ce,
            },
            [PIXI.Texture.from('environment/particle.png')]
          )
        ),
        ((bh = PIXI.sound.find('sounds/hit.mp3')).volume =
          0.5 * Game.setMaxVolumeSounds),
        bh.play(),
        (this.alpha = 0.3),
        bj && (an.shakeDecay = 500),
        this.playMySound()),
      bi.playOnceAndDestroy()
  }
  this.initPlayerEntity = function() {
    var cf = {
      radius: 50
    }
    this.scene.camera.follow(this.cameraPoint, cf)
    this.scene.camera.moveCenter(this.x, this.y)
    setTimeout(function() {
      Game.threads.push({
        query: Game.packet.GET_CHUNK
      })
    }, 300)
    this.scene.camera.follow(this.cameraPoint, cf),
      this.scene.camera.moveCenter(this.x, this.y),
      setTimeout(function() {
        Game.threads.push({
          query: Game.packet.GET_CHUNK
        })
      }, 300)
  }
  this.playMySound = function(cg) {
    var ch,
      ci = 0,
      cj = this.data.entity_id
    if (
      null != this.scene.myPlayer &&
      this.scene.myPlayer.data.id != this.data.id
    ) {
      if (
        (ci = Math.abs(this.x - this.scene.myPlayer.x)) >
        Game.packet.WIDTH
      ) {
        return
      }
      ci /= Game.packet.WIDTH
      this.stereoFilter.pan =
        this.x > this.scene.myPlayer.x ? ci : -ci
    }
    ci = 1 - ci
    ci = Game.setMaxVolumeSounds * ci * 0.7
    null != cg ?
      (ch = PIXI.sound.find(cg)) :
      'mouse' == cj || 'rat' == cj || 'rabbit' == cj ?
      (ch = PIXI.sound.find('sounds/mouse.mp3')) :
      'snake' == cj ?
      (ch = PIXI.sound.find('sounds/snake.mp3')) :
      'corvus' == cj ?
      (ch = PIXI.sound.find('sounds/corvus.mp3')) :
      'eagle' == cj ?
      (ch = PIXI.sound.find('sounds/eagle.mp3')) :
      'item' != cj ||
      null == this.data.itemId ||
      (3 != this.data.itemId && 162 != this.data.itemId) ||
      (ch = PIXI.sound.find('sounds/xmas.mp3'))
    null != ch &&
      ((ch.volume = ci),
        (ch.filters = [this.stereoFilter]),
        ch.play())
  }
  this.setxy = function(ck, cm, cn) {
    null != ck && ((this.x = ck), (this.data.x = ck))
    null != cm && ((this.y = cm), (this.data.y = cm)); - 1 < this.iZ && (this.iZ = this.y)
    null != cn &&
      600 < cn - this.lastCheckEntityMove &&
      (this.checkEntityMove(), (this.lastCheckEntityMove = cn))
    this.calcDirection()
  }
  this.checkEntityMove = function() {
    var co = this.scene,
      cp = this.x % Game.packet.WIDTH,
      cq = co.getTexture(co.getOffsetX(this.x)),
      cr = null != this.data.itsme && this.data.itsme
    if (null != cq) {
      for (
        var cs = -1 != Game.closedLocs.indexOf(cq.id) ? 'none' : 'dirt',
          ct = 0; ct < cq.elementals.length; ct += 2
      ) {
        for (
          var cu = [],
            cv = cq.elementals[ct + 1],
            cw = 0; cw < cv.length; cw++
        ) {
          point = cv[cw]
          cu.push(point.x, point.y)
        }
        if (new PIXI.Polygon(cu).contains(cp, this.y)) {
          cs = cq.elementals[ct]
          break
        }
      }
      this.groundName = cs
      cr &&
        (co.levelUi.updateGround(cs),
          co.searchChunks(this));
      (cr || this.data.isAggressive) && co.levelUi.updateEye()
    }
  }
  this.getMainColor = function() {
    if (null != this.data.colors && 1 < this.data.colors.length) {
      for (
        var cx = 0, cy = 0; cy < this.data.colors.length; cy += 3
      ) {
        if (0 == this.data.colors[cy]) {
          cx = this.data.colors[cy + 1][0]
          break
        }
      }
      return cx
    }
    return null
  }
  this.renderEntityUi = function() {
    var cz,
      da,
      db,
      dc = 0,
      dd = this.uiContainer,
      de = Game.resources.ui.textures,
      df = false
    this.clearEntityUi()
    null != this.data.name &&
      null != this.data.nameVisible &&
      this.data.nameVisible &&
      ((da = new PIXI.Container()),
        (cz = new PIXI.Text(this.data.name, {
          fontVariant: 'small-caps',
          fontSize: 14,
          fill: this.data.colorName || 16777215,
          wordWrap: true,
          wordWrapWidth: 100,
          align: 'center',
        })).anchor.set(0.5, 0),
        cz.position.set(0, 2),
        da.addChild(cz),
        dd.addChild(da))
    null != da &&
      ('portal' != this.data.entity_id &&
        (cz.parentGroup = PIXI.lights.diffuseGroup),
        this.hover && (cz.alpha = 0.8),
        'cat' != this.data.entity_id ||
        this.scene.uiBgAnimMenu.visible ||
        Game.hideUi ||
        null == this.data.player_groups ||
        (-1 < this.data.player_groups.indexOf(Game.packet.GROUP_NPC) ?
          ((db = new PIXI.Sprite(de['npc.png'])),
            (df = true)) :
          -1 < this.data.player_groups.indexOf(Game.packet.GROUP_WINTER) ?
          ((db = new PIXI.Sprite(de['snow.png'])),
            (dc = 38143)) :
          -1 < this.data.player_groups.indexOf(Game.packet.GROUP_PAINTER) ?
          (db = new PIXI.Sprite(de['paint.png'])) :
          -1 <
          this.data.player_groups.indexOf(Game.packet.GROUP_SUBSCRIBER) &&
          (db = new PIXI.Sprite(de['star.png'])),
          (cz.style.fontWeight = 'bold'),
          df) ||
        (null != this.data.player_id &&
          (cz.text += ' [' + this.data.player_id + ']'),
          null != this.data.tribe &&
          (cz.style.fill = this.data.tribe.color),
          ((de = new PIXI.Sprite(PIXI.Texture.WHITE)).parentGroup =
            PIXI.lights.diffuseGroup),
          (de.tint = dc),
          de.anchor.set(0.5, 0),
          de.position.set(0, 2),
          (de.alpha = 0.2),
          (de.width = cz.width + 5),
          (de.height = cz.height),
          da.addChild(de),
          da.swapChildren(de, cz)))
    null != db ?
      (((this.spriteStar = db).parentGroup = PIXI.lights.diffuseGroup),
        db.anchor.set(0.5, 0),
        db.position.set(-da.width / 2 - 1, 0),
        dd.addChild(db),
        (da.position.x += 9)) :
      (this.spriteStar = null)
    0 < this.showTimeMessage &&
      ((df = new PIXI.Container()),
        (cz = new PIXI.Text(this.lastTextMessage, {
          fontSize: 14,
          fill: 16777215,
          wordWrap: true,
          wordWrapWidth: 200,
          align: 'center',
        })).anchor.set(0.5, 1),
        cz.position.set(0, -85),
        ((dc = new PIXI.Sprite(PIXI.Texture.WHITE)).tint = 0),
        dc.anchor.set(0.5, 1),
        (dc.alpha = 0.2),
        (dc.width = cz.width + 5),
        (dc.height = cz.height),
        dc.position.set(0, -85),
        df.addChild(dc),
        df.addChild(cz),
        dd.addChild(df))
  }
  this.clearEntityUi = function() {
    var dg = {
      children: true
    }
    for (
      var dh = this.uiContainer.removeChildren(),
        di = dh.length - 1; 0 <= di; di--
    ) {
      dh[di].destroy(dg)
    }
  }
  this.getMainChild = function() {
    var dj = this.entityContainer
    return 0 < dj.children.length &&
      0 < (dj = dj.children[0]).children.length ?
      dj.children[0] :
      null
  }
  this.getEntityPreview = function() {
    var dk,
      dl = Game.resources.ui.textures
    if (null != this.data.colors && 1 < this.data.colors.length) {
      ;
      (dk = PIXI.Sprite.from(dl['profileIcon.png'])).tint =
        this.getMainColor()
    } else {
      if (null == (dl = this.getMainChild())) {
        return null
      };
      (dk = PIXI.Sprite.from(dl.texture)).tint = dl.tint
    }
    return dk
  }
  this.generateEntity = function(dm) {
    var dn,
      dp,
      dq,
      dr,
      ds,
      dt,
      du,
      dv,
      dw,
      dx,
      dy,
      dz = this.scene,
      ea = this.data.entity_id,
      eb = new PIXI.Container(),
      ec = Game.resources.items.textures,
      ed =
      ('april' == Game.holidayTheme &&
        'cat' == ea &&
        (ea = 'cat2'),
        0.021)
    if (
      (null != am.DATA_ANIM_SPEED[ea] &&
        (ed *= am.DATA_ANIM_SPEED[ea]),
        'cat' == ea &&
        null != am.DATA_ANIM_CAT_SPEED[this.currentAnimation] &&
        (ed *= am.DATA_ANIM_CAT_SPEED[this.currentAnimation]),
        'item' == ea || 'bag' == ea ?
        ((dp =
            ec[
              'id' +
              (dp =
                null == (dp = this.data.itemId) ? 0 : dp) +
              '.png'
            ]),
          (dn = new PIXI.Sprite(dp))) :
        (null != this.data.currentStage &&
          1 < this.data.currentStage &&
          (dr = this.data.currentStage - 1),
          1 <
          (dq = Game.animList(
            ea,
            this.currentAnimation,
            dr
          )).texture.length ?
          ((dp = dq.texture),
            ((dn = new PIXI.AnimatedSprite(dp)).animationSpeed =
              ed * dp.length),
            'remove' == this.currentAnimation && (dn.loop = false),
            dn.play()) :
          0 < dq.texture.length &&
          ((dp = dq.texture[0]),
            (dn = new PIXI.Sprite(dp)))),
        null != dn)
    ) {
      if (
        (dn.anchor.set(0.5, 1),
          dm && (dn.parentGroup = PIXI.lights.diffuseGroup),
          eb.addChild(dn),
          null != this.data.tintColor && (dn.tint = this.data.tintColor),
          'cat' == this.data.entity_id && null != this.data.colors)
      ) {
        for (
          var ee = this.data.colors, ef = 0; ef < ee.length; ef += 3
        ) {
          dt = ee[ef]
          ds = parseInt(
            ee[ef + 1][0 < this.direction ? 1 : 0]
          )
          du = 0 < parseFloat(ee[ef + 2]) ? 1 : 0
          null != this.data.tribe &&
            (1 == this.data.tribe.worldId ?
              (ds = 13697023) :
              2 == this.data.tribe.worldId && (ds = 0))
          '0' == dt
            ?
            ((dn.tint = ds), (dn.alpha = du)) :
            (1 <
              (dq = Game.animList(
                ea,
                this.currentAnimation,
                dt
              )).texture.length ?
              (((dv = new PIXI.AnimatedSprite(
                  dq.texture
                )).animationSpeed = ed * dq.texture.length),
                dv.play()) :
              0 < dq.texture.length &&
              (dv = new PIXI.Sprite(dq.texture[0])),
              0 < dq.texture.length &&
              ((dv.name = 'id' + dt),
                dv.anchor.set(0.5, 1),
                (dv.tint = ds),
                (dv.alpha = du),
                dm && (dv.parentGroup = PIXI.lights.diffuseGroup),
                eb.addChild(dv)))
        }
      }
      if (
        (null != this.data.tribe &&
          0 != this.data.tribe.worldId &&
          (eb.alpha = 0.9),
          dm)
      ) {
        switch (ea) {
          case 'plant_catmint':
          case 'plant_calendula':
          case 'plant_elderberry':
          case 'fern':
          case 'jasmine':
          case 'marigold':
          case 'nettle':
          case 'poppy':
          case 'pulmonaria':
          case 'pyrethrum':
          case 'plant_malina':
          case 'plant_tulip':
          case 'plant_tansy':
          case 'plant_achillea':
          case 'plant_arctium':
          case 'plant_equisetum':
          case 'plant_sanguisorba':
          case 'grass':
            dn.filters = [
              dz.disPlantsFilter,
              dz.colorMatrix,
            ]
            break
          case 'bush':
            ;
            (this.defaultScaleY = 20),
            (dn.filters = [
              dz.disPlantsFilter,
              dz.colorMatrix,
            ])
            break
          case 'bunch_leaves':
          case 'sleepbag':
            ;
            (dn.filters = [dz.colorMatrix]),
            (this.defaultScaleY = 25)
            break
          case 'barrier':
          case 'tree':
            dn.filters = [dz.colorMatrix]
            break
          case 'fireflies':
            eb.addChild(new PIXI.lights.PointLight(16768000, 1))
            break
          case 'christmas_tree':
            3 == this.data.currentStage &&
              ((dw = new PIXI.lights.PointLight(
                  16728124,
                  0.8
                )).position.set(4, -420),
                eb.addChild(dw),
                (dw = new PIXI.lights.PointLight(
                  16728124,
                  0.4
                )).position.set(-19, -271),
                eb.addChild(dw),
                (dw = new PIXI.lights.PointLight(
                  16728124,
                  0.5
                )).position.set(-55, -117),
                eb.addChild(dw),
                (dw = new PIXI.lights.PointLight(
                  16632396,
                  0.5
                )).position.set(47, -182),
                eb.addChild(dw),
                (dw = new PIXI.lights.PointLight(
                  4223999,
                  0.5
                )).position.set(25, -65),
                eb.addChild(dw))
            break
          case 'portal':
            null != dn && (dn.parentGroup = null)
            break
          case 'bot_star':
          case 'bot_tribe':
            2 == this.data.currentStage ?
              eb.addChild(new PIXI.lights.PointLight(16711680, 1)) :
              eb.addChild(new PIXI.lights.PointLight(16777215, 1))
            break
          case 'fox':
          case 'meles':
            2 == this.data.currentStage && (this.defaultScaleY = 30)
            break
          case 'sleepbag':
          case 'bowl_food':
          case 'bowl_water':
          case 'bot_box':
          case 'hillsnow':
          case 'bot_branch':
            this.defaultScaleY = 20
            break
          case 'eagle':
            2 == this.data.currentStage && (this.iZ = -1)
            break
          case 'puddle':
          case 'mud':
          case 'fish':
            ;
            (this.iZ = -1), dn.anchor.set(0.5)
            break
          case 'tv':
            null != this.data.customVideo &&
              '' != this.data.customVideo &&
              null != this.data.startTime &&
              (((dx = PIXI.Texture.from(this.data.customVideo))[
                  '_startTime'
                ] = this.data.startTime),
                dx.on(
                  'update',
                  function() {
                    null == this._dTime &&
                      ((this._dTime = new Date().getTime()),
                        (this.baseTexture.resource.source.currentTime = Math.floor(
                          ((this._dTime - this._startTime) / 1000) %
                          this.baseTexture.resource.source.duration
                        )))
                  },
                  dx
                ),
                ((dy = dx.baseTexture.resource.source).loop = true),
                (dy.volume = 0.5 * Game.setMaxVolumeSounds),
                ((dy = new PIXI.Sprite(dx)).parentGroup =
                  PIXI.lights.diffuseGroup),
                dy.anchor.set(0.5, 1),
                (dy.width = dn.width),
                (dy.height = dn.height),
                (dy._ignoreScale = true),
                dy.on(
                  'destroyed',
                  function() {
                    this.destroy(true)
                  },
                  dx
                ),
                eb.addChild(dy)),
              (dn._ignoreScale = true),
              (dw = new PIXI.lights.PointLight(
                16777215,
                0.5
              )).position.set(0, -dn.height / 2),
              (dw._ignoreScale = true),
              eb.addChild(dw)
        }
      }
    }
    return eb
  }
  this.play = function(eg, eh) {
    var ei,
      ej = this.data.entity_id,
      ek = this.currentAnimation,
      el = null != this.data.itsme && this.data.itsme
    if (null != ej) {
      if (
        ek ==
        (eg =
          null != am.DATA_ACTION_ANIM[eg] ?
          am.DATA_ACTION_ANIM[eg] :
          eg)
      ) {
        if (null == eh || !eh) {
          return
        }
      } else {
        'swim' == eg
          ?
          (ei = PIXI.sound.find('sounds/splash.mp3')) :
          'swim' == ek &&
          'none' == eg &&
          (ei = PIXI.sound.find('sounds/water1.mp3'))
        null != ei &&
          ((ei.volume = Game.setMaxVolumeSounds), ei.play())
      }
      this.currentAnimation = eg
      this.shadowSprite.visible = 'cat' == ej && 1 == Game.setShadows
      el && this.scene.levelUi.updateProfile(this)
      this.renderEntity()
      this.calcDirection()
    }
  }
  this.renderEntity = function() {
    this.safeRemove(true)
    this.entityContainer.addChild(this.generateEntity(true))
  }
  this.calcDirection = function() {
    var em,
      en = this.scene,
      eo = this.direction,
      ep =
      'portal' != this.data.entity_id ?
      0.7 + (0.5 * this.y) / Game.packet.HEIGHT :
      1,
      eq =
      null != am.DATA_DEFAULT_SIZE[this.data.entity_id] ?
      am.DATA_DEFAULT_SIZE[this.data.entity_id] * ep :
      ep
    null != this.data.birthday &&
      (ep = Game.utils.LunCalc(this.data.birthday, en.time)) <
      12 &&
      0 <= ep &&
      (eq *= 0.7 + (0.3 * ep) / 12)
    null != this.data.skills &&
      null != this.data.skills[Game.packet.SKILL_SLEEP] &&
      (eq *=
        0.9 +
        (0.1 *
          (100 < this.data.skills[Game.packet.SKILL_SLEEP] ?
            100 :
            this.data.skills[Game.packet.SKILL_SLEEP])) /
        100)
    null != this.data.customScale && (eq *= this.data.customScale)
    for (
      var er = 0; er < this.entityContainer.children.length; er++
    ) {
      ;
      (null !=
        (em = this.entityContainer.children[er])[
          '_ignoreScale'
        ] &&
        em._ignoreScale) ||
      em.scale.set(eq * eo, eq)
    }
    this.entityDefaultScale = eq
    en.entities.emit('sort')
    this.cameraPoint.position.set(this.x - 20 * eo, this.y - 50)
  }
  this.update = function(es) {
    var et,
      eu,
      ev,
      ew,
      ex,
      ey,
      ez,
      fa = 0,
      fb = 0,
      fc = 1,
      fd = 1,
      fe = this.scene,
      ff = this.data.entity_id,
      fg = this.entityContainer
    if (null != ff) {
      if (
        ('april' == Game.holidayTheme &&
          'cat' == ff &&
          (fc += this.firstAprilWidth),
          this.customRemove)
      ) {
        if (0 < fg.children.length) {
          if (
            'remove' == this.currentAnimation &&
            null != (ez = this.getMainChild()) &&
            ez.playing
          ) {
            return void(this.alpha = 1)
          }
          if (
            ('corvus' == ff || 'eagle' == ff) &&
            0 < this.data.health
          ) {
            return (
              (this.x -= es * this.direction * 5),
              (this.y -= 7 * es),
              null == ez ||
              ez.playing ||
              'remove' != this.currentAnimation ||
              this.play('fly'),
              void(this.y < 0 && this.safeRemove())
            )
          }
        }
        0 < this.alpha - 0.05 * es ?
          (this.alpha -= 0.05 * es) :
          this.safeRemove()
      } else {
        if (
          (this.alpha < 1 ? (this.alpha += 0.02 * es) : (this.alpha = 1),
            null != this.data.target &&
            null != this.data.target.paths &&
            0 < this.data.target.paths.length)
        ) {
          ey = this.data.target.startTime
          ew = new Date().getTime() - this.dTime 'move' != this.currentAnimation && this.play('move')
          for (
            var fh = 0; fh < this.data.target.paths.length; fh++
          ) {
            if (
              ((et = (ex = this.data.target.paths[fh])
                  .toX),
                (eu = ex.toY),
                (ev = ew - ey) < ex.duration)
            ) {
              ev = ev / ex.duration
              et =
                ex.fromX + ev * (ex.toX - ex.fromX)
              eu =
                ex.fromY + ev * (ex.toY - ex.fromY)
              ev = ex.direction ? 1 : -1
              this.direction != ev &&
                ((this.direction = ev),
                  this.renderEntity(),
                  this.calcDirection())
              break
            }
            if (fh == this.data.target.paths.length - 1) {
              if (
                ((this.data.target = {}),
                  this.play('none'),
                  0 < this.moveThreads.length)
              ) {
                for (
                  var fi = this.moveThreads.length - 1; 0 <= fi; fi--
                ) {
                  Game.send(this.moveThreads[fi])
                  this.moveThreads.splice(fi, 1)
                }
              }
              break
            }
            ey += ex.duration
          }
          'cat' == ff &&
            null != this.groundName &&
            350 < ew - this.lastHit &&
            ((this.lastHit = ew),
              fe.playStepSound(this.groundName, this))
          'roach' == ff &&
            ((this.firefliesTick =
                6.28 < this.firefliesTick ?
                0 :
                this.firefliesTick + 0.4 * es),
              (fb = 7 * Math.cos(this.firefliesTick) - 7));
          ('apple' != ff && 'fake_hedgehog' != ff) ||
          ((this.firefliesTick =
              6.28 < this.firefliesTick ?
              0 :
              this.firefliesTick + 0.4 * es),
            (fb = 7 * Math.cos(this.firefliesTick) - 7),
            (this.rotation = 3.14 < this.firefliesTick ? 0.3 : -0.3))
          'snail' == ff &&
            ((this.firefliesTick =
                6.28 < this.firefliesTick ?
                0 :
                this.firefliesTick + 0.07 * es),
              (fc += 0.05 * Math.cos(this.firefliesTick)))
          this.setxy(et, eu, ew)
        } else {
          this.rotation = 0
        }
        if (
          ('fireflies' == ff ||
            'bot_star' == ff ||
            'wasp' == ff ||
            'bee' == ff ||
            'butterfly' == ff ||
            'bot_tribe' == ff ?
            ((this.firefliesTick =
                6.28 < this.firefliesTick ?
                0 :
                this.firefliesTick + 0.05 * es),
              'fireflies' == ff &&
              (fa = 10 * Math.sin(this.firefliesTick)),
              (fb = 5 * Math.cos(this.firefliesTick) - 5)) :
            'item' == ff ?
            ((this.firefliesTick =
                18.84 < this.firefliesTick ?
                0 :
                this.firefliesTick + 0.08 * es),
              this.firefliesTick < 6.28 &&
              (this.alpha = 0.8 + 0.2 * Math.cos(this.firefliesTick))) :
            'portal' == ff ?
            (this.hover && (fb--, (fc += 0.05)),
              !this.hover &&
              null != fe.myPlayer &&
              0 == fe.myPlayer.data.tribe.worldId &&
              Game.isWebGLSupported ?
              (this.alpha = 1 - 0.8 * fe.stars.alpha) :
              (this.alpha = 1)) :
            null != this.spriteStar ?
            ((this.firefliesTick =
                18.84 < this.firefliesTick ?
                0 :
                this.firefliesTick + 0.07 * es),
              this.firefliesTick < 6.28 ?
              this.spriteStar.scale.set(
                0.25 + 0.25 * Math.cos(this.firefliesTick),
                0.5
              ) :
              0.5 != this.spriteStar.scale.x &&
              this.spriteStar.scale.set(0.5)) :
            85 < this.height &&
            this.height < 200 &&
            null == this.data.maxStage &&
            null == this.data.itemId &&
            'hillsnow' != this.data.entity_id &&
            ((this.firefliesTick =
                18.84 < this.firefliesTick ?
                0 :
                this.firefliesTick + 0.05 * es),
              (fd += 0.01 * Math.cos(this.firefliesTick))),
            null != this.entityDefaultScale && 0 < fg.children.length)
        ) {
          fb += this.defaultScaleY
          for (
            fc =
            this.entityDefaultScale *
            fc *
            (0 < fg.children[0].scale.x ? 1 : -1),
            fh = 0; fh < fg.children.length; fh++
          ) {
            ;
            (null !=
              (ez = fg.children[fh])._ignoreScale &&
              ez._ignoreScale) ||
            (ez.position.set(fa, fb),
              (ez.scale.x = fc),
              (ez.scale.y = this.entityDefaultScale * fd))
          }
        }
        var fj = {
          start: 1,
          end: 0.5,
        }
        0 < this.showTimeMessage ?
          (this.showTimeMessage -= 16.66 * es) :
          null != this.lastTextMessage &&
          ((this.showTimeMessage = 0),
            (this.lastTextMessage = null),
            this.renderEntityUi())
        null == this.data.action ||
          ('dig' != this.data.action.id &&
            'dig_underground' != this.data.action.id) ||
          ((ff = new PIXI.particles.Emitter(
              fe.containerParticles
            )).init(
              PIXI.particles.upgradeConfig({
                  alpha: fj,
                  scale: fk,
                  color: {
                    start: '#895804',
                    end: '#cc9b73',
                  },
                  speed: fl,
                  acceleration: fm,
                  maxSpeed: 0,
                  startRotation: fn,
                  noRotation: true,
                  rotationSpeed: fo,
                  lifetime: fp,
                  blendMode: 'normal',
                  frequency: 0.002,
                  emitterLifetime: 0.03,
                  maxParticles: 10,
                  pos: {
                    x: this.x,
                    y: this.y,
                  },
                  addAtBack: false,
                  spawnType: 'rect',
                  spawnRect: {
                    x: -this.width / 2,
                    y: -this.height / 2,
                    w: this.width,
                    h: this.height / 2,
                  },
                },
                [PIXI.Texture.from('environment/particle.png')]
              )
            ),
            ff.playOnceAndDestroy())
        var fk = {
          start: 0.7,
          end: 0.6,
          minimumScaleMultiplier: 1,
        }
        var fl = {
          start: 50,
          end: 100,
          minimumSpeedMultiplier: 1,
        }
        var fm = {
          x: 0,
          y: 0,
        }
        var fn = {
          min: 180,
          max: 360,
        }
        var fo = {
          min: 0,
          max: 0,
        }
        var fp = {
          min: 0.2,
          max: 1,
        }
        0 < this.showTimeMessage ?
          (this.showTimeMessage -= 16.66 * es) :
          null != this.lastTextMessage &&
          ((this.showTimeMessage = 0),
            (this.lastTextMessage = null),
            this.renderEntityUi()),
          null == this.data.action ||
          ('dig' != this.data.action.id &&
            'dig_underground' != this.data.action.id) ||
          ((ff = new PIXI.particles.Emitter(
              fe.containerParticles
            )).init(
              PIXI.particles.upgradeConfig({
                  alpha: fj,
                  scale: fk,
                  color: {
                    start: '#895804',
                    end: '#cc9b73',
                  },
                  speed: fl,
                  acceleration: fm,
                  maxSpeed: 0,
                  startRotation: fn,
                  noRotation: true,
                  rotationSpeed: fo,
                  lifetime: fp,
                  blendMode: 'normal',
                  frequency: 0.002,
                  emitterLifetime: 0.03,
                  maxParticles: 10,
                  pos: {
                    x: this.x,
                    y: this.y,
                  },
                  addAtBack: false,
                  spawnType: 'rect',
                  spawnRect: {
                    x: -this.width / 2,
                    y: -this.height / 2,
                    w: this.width,
                    h: this.height / 2,
                  },
                },
                [PIXI.Texture.from('environment/particle.png')]
              )
            ),
            ff.playOnceAndDestroy())
      }
    }
  }
  this.safeRemove = function(fq) {
    var fr = {
      children: true
    }
    for (
      var fs = this.entityContainer.removeChildren(),
        ft = fs.length - 1; 0 <= ft; ft--
    ) {
      fs[ft].destroy(fr)
    }
    var fu = {
      children: true
    };
    (null != fq && fq) ||
    (Game.app.ticker.remove(this.update, this),
      null != this.data.itsme &&
      this.data.itsme &&
      (this.scene.camera.plugins.remove('follow'),
        (this.scene.myPlayer = null)),
      this.clearEntityUi(),
      this.destroy(fu),
      this.scene.levelUi.updateEye())
  }
  this.smoothRemove = function() {
    0 < Game.animList(this.data.entity_id, 'remove').texture.length ?
      this.play('remove') :
      this.playMySound()
    this.customRemove = true
  }
}

function fv() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var fw = Game.resources.ui.textures,
      fx = (this.bg = PIXI.Sprite.from(
        'ui/backgrounds/menu_custom.png'
      )),
      fx =
      (this.addChild(fx), (this.camera = new Viewport.Viewport())),
      fx =
      (this.addChild(fx),
        (this.cat = new PIXI.Container()),
        fx.addChild(this.cat),
        (this.textTitle = new PIXI.Text('', {
          fontVariant: 'small-caps',
          fontSize: 18,
          fill: 13171455,
          fontWeight: 'bold',
        }))),
      fx =
      (fx.anchor.set(0.5),
        this.addChild(fx),
        (this.btnBack = Game.createButton(fw, 'buttonClose.png'))),
      fx =
      (fx.on(
          'pointerup',
          function() {
            Game.goToScene('menu')
          },
          this
        ),
        this.addChild(fx),
        (this.btnSave = Game.createButton(fw, 'button.png'))),
      fw = new PIXI.Text('Сохранить', {
        fontVariant: 'small-caps',
        fontSize: Game.btnFontSize,
        fill: 16777215,
        fontWeight: 'bold',
      })
    fw.anchor.set(0.5)
    fx.on(
      'pointerup',
      function() {
        Game.connectToServer(
          null != this.newName ? this.newName : null,
          JSON.stringify(this.newColors)
        )
      },
      this
    )
    fx.addChild(fw)
    this.addChild(fx)
  }
  this.start = function() {
    var fy
    try {
      fy = JSON.parse(JSON.stringify(Game.colors))
    } catch (fz) {
      return void Game.goToScene('menu')
    }
    this.newColors = fy
    this.newName = null
    this.canChangeName = 1 == Game.myStorage.get('canChangeName')
    this.currentDir = 0
    this.isColorLock = true
    this.textTitle.text = Game.playername
    this.resetCamera = true
    this.shareColor = null
    this.preview()
    this.btnSave.visible = false
    this.showParts()
  }
  this.showParts = function(ga) {
    var gb,
      gd = 0,
      ge = [],
      gf = this.newColors,
      gg = '<div id="clScrollPage" class="cl-page-container center">'
    if (
      ((this.selectedId = -1),
        (this.hslColor = [0, 100, 50]),
        null != ga)
    ) {
      gg =
        (gg +=
          '<div class="cl-bl-small center" onclick="Game.scenes.active.showParts();">Вернуться назад</div>') +
        '<div class="cl-bl-small center" onclick="Game.scenes.active.resetColors();">Сбросить окрас</div><h3>' +
        ga +
        '</h3>'
      this.selectedFolder = ga
    } else {
      for (var gh in ((gb = Game.strings.ru.colorCatDesigner),
          this.canChangeName &&
          (gg +=
            '<div class="cl-bl-small center" onclick="Game.scenes.active.changeName();">Изменить имя</div>'),
          (gg =
            gg +
            ('<div class="cl-bl-small center' +
              (this.isColorLock ? '' : ' inactive') +
              '" onclick="Game.scenes.active.lockColor();">Синхронизация сторон</div>') +
            '<div class="cl-bl-small center" onclick="Game.scenes.active.changeDir();">Повернуть</div>'),
          gb))
        gg +=
        '<div class="cl-bl-small" onclick="Game.scenes.active.showParts(\'' +
        gh +
        '\');">Категория: ' +
        gh +
        '</div>'
      this.selectedFolder = null
    }
    for (gi in Game.strings.ru.colorCatDesigner)
      for (
        var gj = Game.strings.ru.colorCatDesigner[gi],
          gk = 0; gk < gj.length; gk++
      ) {
        ge.push(gj[gk])
      }
    for (var gl = 0; gl < gf.length; gl += 3) {
      var gm = true,
        gn = gf[gl]
      if (null == ga) {
        if (-1 < ge.indexOf(gn)) {
          continue
        }
      } else {
        if (
          null != Game.strings.ru.colorCatDesigner[ga] &&
          Game.strings.ru.colorCatDesigner[ga].indexOf(gn) < 0
        ) {
          continue
        }
      }
      for (
        var go, gi = 0; gi < gf.length; gi += 3
      ) {
        for (
          gk = 0; gk < Game.incompatibleHats.length; gk++
        ) {
          if (
            gf[gi] != gn &&
            0 < gf[gi + 2] &&
            -1 <
            Game.incompatibleHats[gk].indexOf(gf[gi]) &&
            -1 < Game.incompatibleHats[gk].indexOf(gn)
          ) {
            gm = false
            break
          }
        }
      }
      if (!gm) {
        for (
          gi = 0; gi < Game.incompatibleHats.length; gi++
        ) {
          if (-1 < Game.incompatibleHats[gi].indexOf(gn)) {
            for (
              gk = 0; gk < Game.requiredHats.length; gk++
            ) {
              if (
                -1 <
                Game.incompatibleHats[gi].indexOf(
                  Game.requiredHats[gk]
                )
              ) {
                gm = true
                break
              }
            }
          }
        }
      }
      gm &&
        ((gm = 0 < parseFloat(gf[gl + 2])),
          (go = parseInt(gf[gl + 1][this.currentDir])),
          (gh = Game.strings.ru.el_s_cat[gn]),
          (gg += '<div class="cl-bl-container"><div class="cl-bl-small'),
          gm ?
          (((go = PIXI.utils.hex2rgb(go))[0] *= 255),
            (go[1] *= 255),
            (go[2] *= 255),
            (gg +=
              '" style="background:rgba(' +
              go[0] +
              ',' +
              go[1] +
              ',' +
              go[2] +
              ',0.5);"')) :
          (gg += ' inactive"'),
          (gg +=
            ' onclick="Game.scenes.active.showColors(' +
            gn +
            ');">' +
            gh +
            '</div>'),
          null != ga &&
          (gg =
            (gg +=
              '<img onclick="Game.scenes.active.upColor(' +
              gn +
              ', -1);" class="cl-bl-button" src="' +
              Game.versionCode +
              '/ui/up.png">') +
            '<img onclick="Game.scenes.active.upColor(' +
            gn +
            ', 1);" class="cl-bl-button-2" src="' +
            Game.versionCode +
            '/ui/down.png">'),
          (gg += '</div>'),
          gd++)
    }
    0 == gd &&
      (gg += '<h3>Здесь пусто. :(  Попробуйте изменить окрас.</h3>')
    gg += '</div>'
    Game.showInteractPage(gg)
    this.cameraOffsetX = 0
    this.cameraOffsetY = 0
    this.cameraScale = 1
    Game.resizeToWindow()
  }
  this.upColor = function(gp, gq) {
    for (
      var gr = [],
        gs = this.newColors,
        gu = Game.strings.ru.colorCatDesigner[this.selectedFolder],
        gv = 0; gv < gs.length; gv += 3
    ) {
      if (gs[gv] == gp) {
        for (
          var gw = gv; gw < gs.length && !(gw < 0); gw += 3 * gq
        ) {
          if (
            gv != gw &&
            -1 < gu.indexOf(gs[gw])
          ) {
            gr[0] = gs[gw]
            gr[1] = gs[gw + 1]
            gr[2] = gs[gw + 2]
            gs[gw] = gs[gv]
            gs[gw + 1] = gs[gv + 1]
            gs[gw + 2] = gs[gv + 2]
            gs[gv] = gr[0]
            gs[gv + 1] = gr[1]
            gs[gv + 2] = gr[2]
            break
          }
        }
        break
      }
    }
    this.showParts(this.selectedFolder)
    this.btnSave.visible = true
    this.preview()
    Game.scrollToLastPoint()
  }
  this.resetColors = function() {
    for (var gx = 0; gx < this.newColors.length; gx += 3) {
      var gy = this.newColors[gx]
      Game.requiredHats.indexOf(gy) < 0 &&
        -1 <
        Game.strings.ru.colorCatDesigner[this.selectedFolder].indexOf(
          gy
        ) &&
        ((this.selectedId = gy), this.setColor(0))
    }
    this.showParts(this.selectedFolder)
  }
  this.showColors = function(gz) {
    var ha,
      hb,
      hc = this.currentDir,
      hd = 1 == hc ? 1 : -1,
      he = 0,
      hf = '',
      hc = 1 == hc ? 'слева' : 'справа',
      hc = this.isColorLock ? 'с двух сторон' : hc
    this.selectedId = gz
    console.log(gz)
    hf +=
      '<div class="cl-page-container center"><div class="cl-bl-small center" onclick="Game.scenes.active.showParts('
    null != this.selectedFolder &&
      (hf += "'" + this.selectedFolder + "'")
    hf += ');">Вернуться назад</div>'
    5 != gz &&
      ((hf +=
          '<div class="cl-bl-small cl-bl-min center" onclick="Game.scenes.active.copyColor();" style="border-radius:6px 0 0 6px;">Копировать</div><div class="cl-bl-small cl-bl-min center" onclick="Game.scenes.active.pasteColor();" style="border-radius:0 6px 6px 0;">Вставить</div>'),
        Game.requiredHats.indexOf(gz) < 0) &&
      (hf +=
        '<div class="cl-bl-small center" onclick="Game.scenes.active.setColor(0);">Убрать окрас</div>')
    hf +=
      '<h3>' + Game.strings.ru.el_s_cat[gz] + ' ' + hc + '</h3>'
    5 == gz ?
      (hb = Game.eyeColors) :
      ((hb = Game.availableColors),
        (hf +=
          '<input class="cl_color" id="clColorH" onchange="Game.scenes.active.changeHsl(true);" oninput="Game.scenes.active.changeHsl(true);" style="background:linear-gradient(to right,#dfb88c 0%,#6a6473 25%,#434854 50%,#c0582e 75%,#dfb88c 100%);" type="range" min="0" max="360" step="1" value="0"><input class="cl_color" id="clColorL" onchange="Game.scenes.active.changeHsl();" oninput="Game.scenes.active.changeHsl();" style="background:linear-gradient(to right,#000000 0%,#dfb88c 50%,#ffffff 100%);" type="range" min="6" max="100" step="1" value="71"><h3>Базовые цвета</h3>'))
    for (var hg = 0; hg < hb.length; hg++) {
      ha = hb[hg]
      hf +=
        '<div class="cl-bl-color" style="background:' +
        PIXI.utils.hex2string(ha) +
        ';" onclick="Game.scenes.active.setColor(1,' +
        ha +
        ');"></div>'
    }
    switch (
      ((hf += '</div>'), Game.showInteractPage(hf), gz)
    ) {
      case 1:
      case 34:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
        ;
        (hd *= 75), (he = 25)
        break
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 67:
        ;
        (hd *= -75), (he = -35)
        break
      case 46:
      case 65:
      case 66:
        he = 25
        break
      case 8:
      case 49:
      case 50:
      case 53:
      case 54:
      case 57:
      case 58:
        ;
        (hd *= 25), (he = 25)
        break
      case 13:
      case 47:
      case 48:
      case 51:
      case 52:
      case 55:
      case 56:
        ;
        (hd *= -25), (he = 25)
    }
    this.cameraOffsetX = hd
    this.cameraOffsetY = he
    this.cameraScale = 1.5
    Game.resizeToWindow()
  }
  this.changeName = function(hh) {
    null != hh ?
      1 < hh.length &&
      hh.length <= 32 &&
      (hh != Game.playername ?
        ((this.newName = hh),
          (this.textTitle.text = hh + ' (Изменено)'),
          (this.btnSave.visible = true)) :
        ((this.newName = null), (this.textTitle.text = Game.playername))) :
      'browser' != Game.platform ?
      prompt(
        'Придумайте и введите имя персонажа',
        function(hi) {
          1 == hi.buttonIndex &&
            null != hi.input1 &&
            Game.scenes.active.changeName(hi.input1)
        },
        'Изменение имени',
        ['Ок', 'Отмена']
      ) :
      null != (hh = prompt('Имя персонажа', '')) &&
      this.changeName(hh)
  }
  this.changeHsl = function(hj) {
    var hk = document.getElementById('clColorH'),
      hl = document.getElementById('clColorL'),
      hk = Game.utils.PickRgbRange(
        [
          [
            [223, 184, 140], 0
          ],
          [
            [106, 100, 115], 0.25
          ],
          [
            [67, 72, 84], 0.5
          ],
          [
            [192, 88, 46], 0.75
          ],
          [
            [223, 184, 140], 1
          ],
        ],
        hk.value / 360
      ),
      hm = Game.utils.Rgb2Hsl(hk[0], hk[1], hk[2])
    null != hj &&
      hj &&
      (hl.style.background =
        'linear-gradient(to right,rgba(0,0,0,1) 0%,rgba(' +
        hk[0] +
        ',' +
        hk[1] +
        ',' +
        hk[2] +
        ',1) 50%,rgba(255,255,255,1) 100%)')
    hm[2] = hl.value / 100
    hk = Game.utils.Hsl2Rgb(hm[0], hm[1], hm[2])
    hj = Game.utils.Rgb2Dec(hk[0], hk[1], hk[2])
    this.setColor(1, hj)
  }
  this.copyColor = function() {
    for (
      var hn = this.newColors, ho = 0; ho < hn.length; ho += 3
    ) {
      if (this.selectedId == hn[ho]) {
        this.shareColor = hn[ho + 1][this.currentDir]
        break
      }
    }
  }
  this.pasteColor = function() {
    null != this.shareColor && this.setColor(1, this.shareColor)
  }
  this.setColor = function(hp, hq) {
    for (
      var hr = this.newColors, hs = 0; hs < hr.length; hs += 3
    ) {
      if (this.selectedId == hr[hs]) {
        hr[hs + 2] = 0 < hp ? 1 : 0
        null != hq &&
          ((hr[hs + 1][this.currentDir] = hq),
            this.isColorLock) &&
          (hr[hs + 1][1 - this.currentDir] = hq)
        break
      }
      for (var ht = 0; ht < hr.length; ht += 3) {
        for (
          var hu = 0; hu < Game.incompatibleHats.length; hu++
        ) {
          if (
            -1 < Game.incompatibleHats[hu].indexOf(this.selectedId) &&
            -1 < Game.incompatibleHats[hu].indexOf(hr[ht])
          ) {
            hr[ht + 2] = 0
            break
          }
        }
      }
    }
    for (hs = 0; hs < hr.length; hs += 3) {
      var hv = -1 < Game.requiredHats.indexOf(hr[hs])
      if (hv) {
        for (
          ht = 0; ht < Game.incompatibleHats.length; ht++
        ) {
          var hw = Game.incompatibleHats[ht]
          if (-1 < hw.indexOf(hr[hs])) {
            for (hu = 0; hu < hr.length; hu += 3) {
              hr[hu] != hr[hs] &&
                -1 < hw.indexOf(hr[hu]) &&
                0 < hr[hu + 2] &&
                (hv = false)
            }
          }
        }
        hv && (hr[hs + 2] = 1)
      }
    }
    this.btnSave.visible = true
    this.preview()
  }
  this.changeDir = function() {
    this.currentDir = 1 == this.currentDir ? 0 : 1
    this.showParts()
    this.preview()
  }
  this.lockColor = function() {
    this.isColorLock = !this.isColorLock
    this.showParts()
  }
  this.preview = function() {
    var hx = {
      children: true
    }
    for (
      var hy = this.cat,
        hz = this.newColors,
        ia = hy.removeChildren(),
        ib = 0; ib < ia.length; ib++
    ) {
      ia[ib].destroy(hx)
    }
    hy.scale.set(1 == this.currentDir ? 1 : -1, 1)
    for (ib = 0; ib < hz.length; ib += 3) {
      var ic = parseFloat(hz[ib + 2]),
        ie = hz[ib],
        ig = parseInt(hz[ib + 1][this.currentDir]),
        ih = Game.animList(
          'cat',
          'none',
          0 < ie ? ie : null
        )
      1 <= ih.texture.length &&
        (((ih = new PIXI.Sprite(ih.texture[0])).name =
            'id' + ie),
          ih.anchor.set(0.5),
          (ih.tint = ig),
          (ih.visible = 0 < ic),
          (ih.alpha = ic),
          hy.addChild(ih),
          '7' == ie) &&
        null != (ig = hy.getChildByName('id5')) &&
        hy.swapChildren(ig, ih)
    }
  }
  this.stop = function() {
    Game.hideInteractPage()
  }
  this.resize = function(ii, ij) {
    Game.calcBackground(this.bg)
    var ik = 0,
      il = 0,
      im =
      (700 < ii ?
        (ik = ii / 4) :
        (il = ij / 4),
        this.camera)
    im.screenWidth = ii
    im.screenHeight = ij
    this.resetCamera &&
      (im.moveCenter(-ik, il), (this.resetCamera = false))
    im.animate({
      time: 500,
      position: new PIXI.Point(
        this.cameraOffsetX - ik / this.cameraScale,
        this.cameraOffsetY + il / this.cameraScale
      ),
      scale: this.cameraScale,
      ease: 'easeOutSine',
    })
    this.btnBack.position.set(ii - 22, 22)
    this.btnSave.position.set(
      ii / 2 + ik,
      ij - 32 - 2 * il
    )
    this.textTitle.position.set(ii / 2 + ik, 22)
  }
}

function ip() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    this.addChild(new PIXI.display.Layer(PIXI.lights.diffuseGroup))
    this.addChild(new PIXI.display.Layer(PIXI.lights.normalGroup))
    this.addChild(new PIXI.display.Layer(PIXI.lights.lightGroup))
    this.ambientLight = new PIXI.lights.AmbientLight(16777215, 1)
    this.addChild(this.ambientLight)
    var iq = {
      worldWidth: Game.packet.WIDTH,
      worldHeight: Game.packet.HEIGHT,
    }
    var ir = (this.sky = new PIXI.Sprite(PIXI.Texture.WHITE)),
      it = (this.normalSky = PIXI.Sprite.from('ui/none_n.png')),
      it =
      ((it.parentGroup = PIXI.lights.normalGroup),
        this.addChild(it),
        (ir.parentGroup = PIXI.lights.diffuseGroup),
        this.addChild(ir),
        (this.stars = PIXI.Sprite.from('environment/stars.png'))),
      ir =
      (it.anchor.set(0.5),
        it.scale.set(1.1),
        (it.parentGroup = PIXI.lights.diffuseGroup),
        this.addChild(it),
        (this.clouds = new PIXI.TilingSprite(
          PIXI.Texture.from('environment/clouds.png')
        ))),
      it =
      ((ir.parentGroup = PIXI.lights.diffuseGroup),
        this.addChild(ir),
        (this.camera = new Viewport.Viewport(iq))),
      ir =
      (it
        .clamp({
          left: false,
          right: false,
          top: false,
          bottom: false,
          direction: 'all',
          underflow: 'center',
        })
        .clampZoom({
          minWidth: 0.01 * Game.packet.WIDTH,
          minHeight: 0.01 * Game.packet.HEIGHT,
          maxWidth: 0.95 * Game.packet.WIDTH,
          maxHeight: 0.95 * Game.packet.HEIGHT,
        }),
        it.on(
          'pointerup',
          function(iu) {
            var iv,
              iw = {
                start: 1,
                end: 0,
              }
            var ix = {
              start: 0.6,
              end: 0.5,
              minimumScaleMultiplier: 1,
            }
            var iy = {
              start: 0,
              end: 0,
              minimumSpeedMultiplier: 0.5,
            }
            var ja = {
              x: 0,
              y: 0,
            }
            var jb = {
              min: 270,
              max: 270,
            }
            var jc = {
              min: 0,
              max: 0,
            }
            var jd = {
              min: 0.5,
              max: 0.5,
            }
            this.uiContainer.visible ?
              ((iu = this.camera.toWorld(iu.data.global)),
                null != this.myPlayer &&
                0 < this.myPlayer.moveThreads.length &&
                this.myPlayer.moveThreads.splice(0, 1),
                Game.threads.push({
                  query: Game.packet.ENTITY_MOVE,
                  x: iu.x,
                  y: iu.y,
                }),
                (iv = new PIXI.particles.Emitter(
                  this.containerParticles
                )).init(
                  PIXI.particles.upgradeConfig({
                      alpha: iw,
                      scale: ix,
                      color: {
                        start: '#ffffff',
                        end: '#ffffff',
                      },
                      speed: iy,
                      acceleration: ja,
                      maxSpeed: 0,
                      startRotation: jb,
                      noRotation: true,
                      rotationSpeed: jc,
                      lifetime: jd,
                      blendMode: 'normal',
                      frequency: 0.01,
                      emitterLifetime: 0.5,
                      maxParticles: 1,
                      pos: {
                        x: iu.x,
                        y: iu.y,
                      },
                      addAtBack: false,
                      spawnType: 'point',
                    },
                    [PIXI.Texture.from('environment/paw.png')]
                  )
                ),
                iv.playOnceAndDestroy(),
                (iu = new Date().getTime()),
                null != this.lastClick &&
                iu - this.lastClick < 300 &&
                this.aiRun(),
                (this.lastClick = iu)) :
              (this.levelUi.showMainUi(), this.updateEntityUi())
          },
          this
        ),
        this.addChild(it),
        (this.zoom = 0.1),
        (this.level = new PIXI.Container())),
      ir =
      (it.addChild(ir),
        (this.maxDistance = 2),
        (this.dataChunks = {}),
        (this.displacementSprite = {}),
        (this.displacementSpriteTxt = {}),
        (this.disPlantsSprite = PIXI.Sprite.from('environment/leaves.png'))),
      ir =
      ((ir.texture.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT),
        this.addChild(ir),
        (this.disPlantsFilter = new PIXI.filters.DisplacementFilter(
          ir
        ))),
      ir =
      ((ir.padding = 0),
        (ir.scale.x = 5.5),
        (ir.scale.y = 1.5),
        (this.disWaterSprite = PIXI.Sprite.from('environment/leaves.png'))),
      ir =
      ((ir.texture.baseTexture.wrapMode = PIXI.WRAP_MODES.REPEAT),
        this.addChild(ir),
        (this.disWaterFilter = new PIXI.filters.DisplacementFilter(ir))),
      ir =
      ((ir.padding = 0),
        (ir.scale.x = 30),
        (ir.scale.y = 60),
        (this.entities = new PIXI.Container()),
        this.entities.on(
          'sort',
          function() {
            this.entities.children.sort(function(je, jf) {
              return (
                (je.iZ = je.iZ || 0),
                (jf.iZ = jf.iZ || 0),
                je.iZ != jf.iZ ?
                0 < je.iZ - jf.iZ ?
                1 :
                -1 :
                0
              )
            })
          },
          this
        ),
        it.addChild(this.entities),
        (this.containerParticles = new PIXI.Container()),
        (this.containerParticles.parentGroup = PIXI.lights.diffuseGroup),
        it.addChild(this.containerParticles),
        (this.uiParticles = new PIXI.Container()),
        it.addChild(this.uiParticles),
        (this.containerEmitters = []),
        (this.fog = PIXI.Sprite.from('environment/fog.png')),
        (this.fog.parentGroup = PIXI.lights.diffuseGroup),
        this.addChild(this.fog),
        (this.containerRain = new PIXI.Container())),
      it =
      ((this.emitRain = new PIXI.particles.Emitter(ir)),
        (ir.parentGroup = PIXI.lights.diffuseGroup),
        this.addChild(ir),
        (this.tuman = new PIXI.TilingSprite(
          PIXI.Texture.from('environment/tuman.png')
        ))),
      ir =
      ((it.parentGroup = PIXI.lights.diffuseGroup),
        (it.visible = 'april' == Game.holidayTheme),
        this.addChild(it),
        (this.overNight = PIXI.Sprite.from('environment/night.png'))),
      it =
      ((ir.alpha = 0),
        (ir.parentGroup = PIXI.lights.diffuseGroup),
        this.addChild(ir),
        (this.time = 0),
        (this.temp = 0),
        (this.humid = 0),
        (this.maxHumid = 0),
        (this.pressure = 0),
        (this.maxPressure = 0),
        (this.tickTime = 7.5),
        (this.isWinter = false),
        (this.onlyRain = false),
        (this.heightWaterSprite = 0.08 * Game.packet.HEIGHT),
        (this.musicBirds = PIXI.sound.find('sounds/birds.mp3')),
        (this.musicCrickets = PIXI.sound.find('sounds/crickets.mp3')),
        (this.musicRain = PIXI.sound.find('sounds/rain.mp3')),
        (this.musicWind = PIXI.sound.find('sounds/wind.mp3')),
        (this.musicWater = PIXI.sound.find('sounds/waterfall.mp3')),
        (this.ambientSound = PIXI.sound.find('sounds/tikopia.mp3')),
        (this.timeSound = PIXI.sound.find('sounds/time.mp3')),
        (this.uiBgDamage = PIXI.Sprite.from('ui/uiBgDamage.png')))
    it.visible = false
    this.addChild(it)
    this.dTime = 0
    this.tickAlphaThunderSound = 0
    this.colorMatrix = new PIXI.filters.ColorMatrixFilter()
    this.lastSend = 0;
    (this.levelUi = new jg(this)).init()
  }
  this.start = function() {
    var jh = Game.getSceneConfig().levelData
    this.levelData = jh
    this.rainHumid = 0.69
    this.normalSky.visible = Game.isWebGLSupported
    this.camera.worldWidth = jh.levelWidth
    this.camera.worldHeight = jh.levelHeight
    this.hitTarget = null
    this.myPlayer = null
    this.waterHeight = 0
    this.tickAmbientSound = 0
    this.typeMusic = null
    this.tickNextMusic = 0
    this.ambientSound.volume = 0
    Game.stopMusic()
    this.historyJoinPlayers = {}
    this.enginePhysics = null
    window.addEventListener('keyup', this.keyUp, false)
    this.levelUi.start()
    this.levelUi.showMainUi()
    Game.resizeToWindow()
    this.overNight.visible = !Game.isWebGLSupported
  }
  this.stop = function() {
    this.musicRain.stop()
    this.musicWind.stop()
    this.musicWater.stop()
    this.musicBirds.stop()
    this.musicCrickets.stop()
    this.ambientSound.stop()
    null == Game.nextMusicString &&
      null != Game.currentMusic &&
      (Game.currentMusic.volume = Game.setMaxVolumeMusic)
    null != Game.audio.currentAudio && Game.audio.currentAudio.pause()
    this.clearLevel()
    this.levelUi.stop()
    this.levelUi.showMainUi()
    window.removeEventListener('keyup', this.keyUp)
  }
  this.updateEntityUi = function() {
    for (
      var ji, jj = 0; jj < this.entities.children.length; jj++
    ) {
      null != (ji = this.entities.children[jj]).data &&
        ji.renderEntityUi()
    }
  }
  this.keyUp = function(jk) {
    var jl = Game.scenes.active
    switch (jk.code) {
      case 'KeyY':
        jl.uiContainer.visible &&
          (jk.preventDefault(),
            jl.uiIdcat_container.emit('pointerup'))
        break
      case 'KeyV':
        jl.uiContainer.visible &&
          (jk.preventDefault(),
            jl.btnMode.emit('pointerdown'),
            jl.btnMode.emit('pointerup'))
        break
      case 'KeyE':
        jl.uiContainer.visible &&
          (jk.preventDefault(),
            jl.uiBtnActionUse.emit('pointerup'))
        break
      case 'KeyH':
        jl.uiContainer.visible &&
          (jk.preventDefault(),
            jl.uiBtnActionNose.emit('pointerup'))
        break
      case 'KeyQ':
        jl.uiContainer.visible &&
          (jk.preventDefault(),
            (jl.uiBtnActionDig.visible ?
              jl.uiBtnActionDig :
              jl.uiBtnActionLoc
            ).emit('pointerup'))
        break
      case 'KeyF':
        jl.uiContainer.visible &&
          (jk.preventDefault(),
            jl.uiBtnActionHit.emit('pointerup'))
        break
      case 'ArrowUp':
      case 'ArrowDown':
        jl.uiContainer.visible &&
          (jk.preventDefault(),
            jl.uiBtnActionChange.emit('pointerup'))
        break
      case 'ArrowLeft':
        jl.listBar.visible &&
          (jk.preventDefault(), jl.btnUiBack.visible) &&
          jl.btnUiBack.emit('pointerup')
        break
      case 'ArrowRight':
        jl.listBar.visible &&
          (jk.preventDefault(), jl.btnUiNext.visible) &&
          jl.btnUiNext.emit('pointerup')
        break
      case 'KeyI':
        jl.uiContainer.visible &&
          (jk.preventDefault(), jl.btnInventory.emit('pointerup'))
        break
      case 'KeyM':
        jl.uiContainer.visible &&
          (jk.preventDefault(), jl.btnMap.emit('pointerup'))
        break
      case 'KeyP':
        jl.uiContainer.visible &&
          (jk.preventDefault(), jl.btnProfile.emit('pointerup'))
        break
      case 'KeyT':
        jl.uiContainer.visible &&
          (jk.preventDefault(), jl.btnChat.emit('pointerup'))
        break
      case 'KeyX':
        ;
        (jk.ctrlKey || Game.clInteractPageContent.hidden) &&
        (jk.preventDefault(), jl.levelUi.showMainUi())
    }
  }
  this.clearLevel = function() {
    this.clearEntities()
    this.clearChunks()
    var jm = {
      children: true
    }
    for (
      var jn, jo = this.level.removeChildren(), jp = 0; jp < jo.length; jp++
    ) {
      jo[jp].destroy(jm)
    }
    for (jn in this.levelData.resources)
      Game.resources[jn].texture.destroy(true),
      delete Game.resources[jn]
    this.dataChunks = {}
    this.enginePhysics = null
  }
  this.clearEntities = function() {
    var jq = {
      children: true
    }
    for (
      var jr, js = this.entities.children.length - 1; 0 <= js; js--
    ) {
      null != (jr = this.entities.children[js]).data ?
        jr.safeRemove() :
        jr.destroy(jq)
    }
  }
  this.getTexture = function(jt) {
    return this.levelData.textures[jt % this.levelData.textures.length]
  }
  this.clearChunks = function(ju) {
    var jv, jw, jx
    if (null != this.myPlayer) {
      for (var jy in this.dataChunks)
        if (
          ((jv = this.dataChunks[jy]),
            (jw = this.level.getChildByName(jy)),
            ju ||
            !(
              Math.abs(jw.x - this.myPlayer.x) <
              Game.packet.WIDTH * this.maxDistance * 2
            ))
        ) {
          var jz = {
            children: true
          }
          var ka = {
            children: true
          }
          var kb = {
            children: true
          }
          var kc = {
            children: true
          }
          if (
            (jw.destroy(jz),
              1 == Game.setBoolAnimWind &&
              (this.displacementSprite[jy].mask.destroy(ka),
                this.displacementSprite[jy].destroy(kb),
                delete this.displacementSprite[jy],
                this.displacementSpriteTxt[jy].destroy(true),
                delete this.displacementSpriteTxt[jy]),
              null != Game.supportEntityMask[jv.id])
          ) {
            for (
              var kd = 0; kd < Game.supportEntityMask[jv.id].length; kd++
            ) {
              null !=
                (jx = this.entities.getChildByName(
                  jy + '_' + kd
                )) && jx.destroy(kc)
            }
          }
          delete this.dataChunks[jy]
        }
    }
  }
  this.getOffsetX = function(ke) {
    return Math.floor(ke / Game.packet.WIDTH)
  }
  this.searchChunks = function(kf) {
    if (0 < this.levelData.textures.length) {
      var kf = this.getOffsetX(kf.x),
        kg = kf - this.maxDistance,
        kh = kf + this.maxDistance,
        kf = Math.floor(this.levelData.levelWidth / Game.packet.WIDTH),
        kg = 0 < kg ? kg : 0,
        kh = kh < kf ? kh : kf
      this.clearChunks()
      for (var ki = kg; ki < kh; ki++) {
        this.getChunk(ki)
      }
    }
  }
  this.getChunk = function(kj) {
    var kk = 'chunk' + kj
    if (!(kl = this.level.getChildByName(kk))) {
      var km,
        kn,
        kl,
        ko = this.getTexture(kj)
      if (
        (((kl = PIXI.Sprite.from(
            Game.resources['levels/' + ko.id + '.png'].texture
          )).parentGroup = PIXI.lights.diffuseGroup),
          (kl.width = Game.packet.WIDTH + 2.5),
          (kl.height = Game.packet.HEIGHT),
          kl.position.set(kj * Game.packet.WIDTH, 0),
          (kl.filters = [this.colorMatrix]),
          (kl.name = kk),
          1 == Game.setBoolAnimWind &&
          (((kn = this.displacementSprite[kk] =
              new PIXI.TilingSprite(
                PIXI.Texture.from('environment/leaves.png')
              )).width = Game.packet.WIDTH),
            (kn.height = Game.packet.HEIGHT),
            ((km = PIXI.Sprite.from(
              'levels/' + ko.id + '_m.png'
            )).width = Game.packet.WIDTH),
            (km.height = Game.packet.HEIGHT),
            (kn.mask = km),
            this.addChild(km),
            ((kn = this.displacementSpriteTxt[kk] =
              new PIXI.Sprite(PIXI.Texture.WHITE)).position = kl.position),
            this.level.addChild(kn)),
          null != Game.supportEntityMask[ko.id])
      ) {
        for (
          var kp = 0; kp < Game.supportEntityMask[ko.id].length; kp++
        ) {
          var kq = Game.createPair(
            'levels/' + ko.id + '_' + kp + '.png',
            'levels/' + ko.id + '_' + kp + '_n.png'
          )
          kq.width = Game.packet.WIDTH + 2
          kq.height = Game.packet.HEIGHT
          kq.iZ = Game.supportEntityMask[ko.id][kp]
          kq.position.set(kj * Game.packet.WIDTH, 0)
          kq.name = kk + '_' + kp
          this.entities.addChild(kq)
        }
      }
      if (0 < this.waterHeight) {
        for (kp = 0; kp < this.waterHeight; kp++) {
          var kr =
            Game.packet.HEIGHT -
            kp * this.heightWaterSprite * 0.7 +
            15,
            ks = PIXI.Sprite.from('environment/water.png')
          ks.width = Game.packet.WIDTH + 3
          ks.parentGroup = PIXI.lights.diffuseGroup
          ks.height = this.heightWaterSprite
          ks.anchor.set(0, 1)
          ks.iZ = kr
          ks.position.set(kj * Game.packet.WIDTH, kr)
          ks.filters = [this.disWaterFilter]
          ks.name = 'water' + kp
          ks.alpha = 0.9
          this.entities.addChild(ks)
        }
      }
      this.level.addChild(kl)
      this.initParticles(kj)
      this.initSounds(kj)
      this.dataChunks[kk] = ko
    }
    return kl
  }
  this.changeWaterHeight = function(kt) {
    if (0 < this.waterHeight) {
      for (var ku = 0; ku < this.waterHeight; ku++) {
        var kv = this.entities.getChildByName('water' + ku)
        null != kv && kv.destroy()
      }
    };
    (this.isClosedLoc() || this.isWaterLoc()) && (kt = 0)
    this.waterHeight = kt
    this.clearChunks(true)
    null != this.myPlayer && this.searchChunks(this.myPlayer)
  }
  this.isWaterLoc = function() {
    for (
      var kw = 0, kx = 0; kx < this.levelData.textures.length; kx++
    ) {
      for (
        var ky = this.levelData.textures[kx], kz = 0; kz < ky.elementals.length; kz += 2
      ) {
        if (
          (kw++,
            ky.elementals[kz] != Game.packet.GROUND_WATER)
        ) {
          return false
        }
      }
    }
    return 0 < kw
  }
  this.resetColor = function() {
    var la = this.myPlayer,
      lb = this.colorMatrix,
      lc = Game.utils.GetMonth(this.time),
      lc = this.calcColorWeather(lc)
    if ((lb.reset(), null != la)) {
      for (
        var ld = 0; ld < la.data.effects.length; ld++
      ) {
        if (17 == la.data.effects[ld].id) {
          return void lb.lsd(true)
        }
      }
    }
    this.stars.visible &&
      (lb.hue(lc.colorTone),
        lb.saturate(lc.colorSaturate, true))
  }
  this.smoothChange = function(le, lf, lg) {
    return lf < le ?
      lf < (le -= lg) ?
      le :
      lf :
      (le += lg) < lf ?
      le :
      lf
  }
  this.createEntity = function(lh, lj) {
    var lk = this.entities.getChildByName(lh)
    return null != lj &&
      null != lj.level &&
      lj.level != this.levelData.id ?
      (null != lk && lk.safeRemove(), null) :
      (null != lk ?
        (lk.customRemove = false) :
        ((lk = new am(this, lh)),
          this.entities.addChild(lk),
          Game.app.ticker.add(lk.update, lk)),
        null != lj &&
        (lk.setData(lj), null != lj.player_id) &&
        null != lj.name &&
        null != lj.visible &&
        lj.visible &&
        (this.historyJoinPlayers[lj.player_id] = {
          player_id: lj.player_id,
          name: lj.name,
        }),
        this.levelUi.showEntityUiList(lh),
        lk)
  }
  this.getOnlinePlayers = function() {
    for (
      var ll = [], lm = 0; lm < this.entities.children.length; lm++
    ) {
      var ln = this.entities.children[lm]
      null == ln.data ||
        'cat' != ln.data.entity_id ||
        ln.data.sleep ||
        !ln.visible ||
        (this.myPlayer &&
          this.myPlayer.data.player_id == ln.data.player_id) ||
        ll.push(ln.data.name)
    }
    return ll
  }
  this.isClosedLoc = function() {
    for (
      var lo = 0; lo < this.levelData.textures.length; lo++
    ) {
      var lp = this.levelData.textures[lo]
      if (-1 == Game.closedLocs.indexOf(lp.id)) {
        return false
      }
    }
    return true
  }
  this.update = function(lq) {
    var lr = {
      loop: true
    }
    var ls = {
      loop: true
    }
    var lu,
      lv,
      lw,
      lx,
      ly,
      lz,
      ma,
      mb,
      mc,
      md,
      me,
      mf = this.level,
      mg = this.stars,
      mh = new Date().getTime(),
      mi = 0,
      mj = 'day',
      mk = this.isClosedLoc(),
      ml =
      (null != this.myPlayer &&
        ((lu = this.myPlayer),
          (mm = this.getTexture(
            Math.floor(lu.x / Game.packet.WIDTH)
          )),
          null != lu.data.tribe) &&
        (mi = lu.data.tribe.worldId),
        (this.time += this.tickTime * lq),
        (mn = Game.utils.GetHours(this.time)),
        (ml = Game.utils.IsNight(this.time)),
        this.stars.visible && ml && (mj = 'night'),
        mk || this.musicRain.isPlaying ?
        (this.musicBirds.isPlaying || this.musicCrickets.isPlaying) &&
        (this.musicBirds.stop(), this.musicCrickets.stop()) :
        ml ?
        (this.musicCrickets.isPlaying ||
          ((this.musicCrickets.volume = Game.setMaxVolumeSounds),
            this.musicCrickets.play(lr)),
          this.musicBirds.isPlaying && this.musicBirds.stop()) :
        (this.musicBirds.isPlaying ||
          ((this.musicBirds.volume = Game.setMaxVolumeSounds),
            this.musicBirds.play(ls)),
          this.musicCrickets.isPlaying && this.musicCrickets.stop()),
        0 < this.waterHeight &&
        (this.disWaterSprite.x =
          this.disWaterSprite.x > this.disWaterSprite.texture.width ?
          0 :
          this.disWaterSprite.x + 0.1 * lq),
        this.disPlantsSprite)
    if (1 == Game.setBoolAnimWind && 0 < mf.children.length) {
      for (var mo in ((ml.x =
            ml.x > ml.texture.width ?
            0 :
            ml.x + lq * this.pressure * 0.1),
          this.dataChunks))
        if (
          ((mm = this.dataChunks[mo]),
            null != (lv = mf.getChildByName(mo)) &&
            ((lw = this.displacementSprite[mo]),
              (mo = this.displacementSpriteTxt[mo]),
              (lw.tilePosition.x =
                lw.tilePosition.x > lw.texture.width ?
                0 :
                lw.tilePosition.x + lq * this.pressure * 0.1),
              (lw.tilePosition.y = lw.tilePosition.x),
              mo.texture.destroy(true),
              (mo.texture = Game.app.renderer.generateTexture(lw)),
              ((lx = new PIXI.filters.DisplacementFilter(
                mo,
                1
              )).padding = 10),
              (lx.scale.y = 5.5),
              (lx.scale.x = 5),
              (lv.filters = [lx, this.colorMatrix]),
              null != Game.supportEntityMask[mm.id]))
        ) {
          for (
            var mp = 0; mp < this.entities.children.length; mp++
          ) {
            null == (mq = this.entities.children[mp]).data &&
              0 < mq.children.length &&
              (mq.children[0].filters = [lx, this.colorMatrix])
          }
        }
    }
    var mr = {
      loop: true
    }
    var ms = {
      loop: true
    }
    this.stars.visible &&
      ((ml = 23 == mn ? 0 : mn + 1),
        (mt = this.time / 3600000),
        (mt -= Math.floor(mt)),
        (mn = this.calcAmbient(mn)),
        (ml = this.calcAmbient(ml)),
        (ly =
          mn.brightness +
          (ml.brightness - mn.brightness) * mt),
        this.containerRain.visible &&
        (ly *= 1 - 0.25 * this.containerRain.alpha),
        this.tickAlphaThunderSound > ly &&
        (ly = this.tickAlphaThunderSound),
        (lz = mn.r + (ml.r - mn.r) * mt),
        (ma = mn.g + (ml.g - mn.g) * mt),
        (mb = mn.b + (ml.b - mn.b) * mt),
        (lz *= 255),
        (ma *= 255),
        (mb *= 255),
        Game.isWebGLSupported ?
        ((mc =
            mn.rc + (ml.rc - mn.rc) * mt),
          (md =
            mn.gc + (ml.gc - mn.gc) * mt),
          (ml =
            mn.bc + (ml.bc - mn.bc) * mt),
          (this.ambientLight.color =
            ((mc *= 255) << 16) +
            ((md *= 255) << 8) +
            (ml *= 255)),
          (this.ambientLight.brightness = ly)) :
        (this.overNight.alpha = 1 - ly),
        (this.sky.tint = (lz << 16) + (ma << 8) + mb),
        (mg.alpha = 1 - ly),
        0 < mg.alpha &&
        (mg.rotation =
          6.28 < mg.rotation ?
          0 :
          mg.rotation + 0.00001 * lq),
        null != mm) &&
      null != Game.lightedLocs[mm.id] &&
      ly < 0.5 &&
      (Game.isWebGLSupported ?
        ((this.ambientLight.brightness = 0.9),
          (this.ambientLight.color = Game.lightedLocs[mm.id])) :
        (this.overNight.alpha = 0.1))
    0 < this.tickAlphaThunderSound &&
      (this.tickAlphaThunderSound -= 0.005 * lq)
    this.pressure != this.maxPressure &&
      ((this.pressure = this.smoothChange(
          this.pressure,
          this.maxPressure,
          0.00005 * lq
        )),
        this.pressure == this.maxPressure) &&
      this.resetRain()
    mk || this.musicWater.isPlaying ?
      this.musicWind.isPlaying && this.musicWind.stop() :
      ((this.musicWind.volume = this.pressure * Game.setMaxVolumeSounds),
        this.musicWind.isPlaying || this.musicWind.play(mr))
    this.clouds.tilePosition.x =
      this.clouds.tilePosition.x >
      this.clouds.texture.width * this.clouds.tileScale.x ?
      0 :
      this.clouds.tilePosition.x + 0.02 * lq * this.pressure
    this.tuman.visible &&
      ((this.tuman.alpha = 1 - ly),
        (this.tuman.tilePosition.x =
          this.tuman.tilePosition.x >
          this.tuman.texture.width * this.tuman.tileScale.x ?
          0 :
          this.tuman.tilePosition.x + 0.05 * lq * this.pressure))
    this.humid != this.maxHumid &&
      (this.humid = this.smoothChange(
        this.humid,
        this.maxHumid,
        0.00005 * lq
      ))
    0 == mi && this.humid > this.rainHumid ?
      ((mj = 'rain'),
        (this.containerRain.alpha = (this.humid - this.rainHumid) / 0.35),
        (this.musicRain.volume = mk ?
          this.containerRain.alpha * Game.setMaxVolumeSounds * 0.1 :
          this.containerRain.alpha * Game.setMaxVolumeSounds),
        (this.fog.alpha = 0.2 * this.containerRain.alpha),
        (this.containerRain.visible = !mk),
        mk || this.emitRain.update(0.001 * lq),
        (this.fog.visible = 0 == Game.setFog && this.containerRain.visible),
        !this.isWinter || this.onlyRain ?
        this.musicRain.isPlaying || this.musicRain.play(ms) :
        this.musicRain.isPlaying && this.musicRain.stop()) :
      ((this.containerRain.visible = false),
        (this.fog.visible = false),
        this.musicRain.isPlaying && this.musicRain.stop())
    this.clouds.alpha = 0.5 * this.humid
    this.stars.visible &&
      ((ml = 23 == mn ? 0 : mn + 1),
        (mt = this.time / 3600000),
        (mt -= Math.floor(mt)),
        (mn = this.calcAmbient(mn)),
        (ml = this.calcAmbient(ml)),
        (ly =
          mn.brightness +
          (ml.brightness - mn.brightness) * mt),
        this.containerRain.visible &&
        (ly *= 1 - 0.25 * this.containerRain.alpha),
        this.tickAlphaThunderSound > ly &&
        (ly = this.tickAlphaThunderSound),
        (lz = mn.r + (ml.r - mn.r) * mt),
        (ma = mn.g + (ml.g - mn.g) * mt),
        (mb = mn.b + (ml.b - mn.b) * mt),
        (lz *= 255),
        (ma *= 255),
        (mb *= 255),
        Game.isWebGLSupported ?
        ((mc =
            mn.rc + (ml.rc - mn.rc) * mt),
          (md =
            mn.gc + (ml.gc - mn.gc) * mt),
          (ml =
            mn.bc + (ml.bc - mn.bc) * mt),
          (this.ambientLight.color =
            ((mc *= 255) << 16) +
            ((md *= 255) << 8) +
            (ml *= 255)),
          (this.ambientLight.brightness = ly)) :
        (this.overNight.alpha = 1 - ly),
        (this.sky.tint = (lz << 16) + (ma << 8) + mb),
        (mg.alpha = 1 - ly),
        0 < mg.alpha &&
        (mg.rotation =
          6.28 < mg.rotation ?
          0 :
          mg.rotation + 0.00001 * lq),
        null != mm) &&
      null != Game.lightedLocs[mm.id] &&
      ly < 0.5 &&
      (Game.isWebGLSupported ?
        ((this.ambientLight.brightness = 0.9),
          (this.ambientLight.color = Game.lightedLocs[mm.id])) :
        (this.overNight.alpha = 0.1)),
      0 < this.tickAlphaThunderSound &&
      (this.tickAlphaThunderSound -= 0.005 * lq),
      this.pressure != this.maxPressure &&
      ((this.pressure = this.smoothChange(
          this.pressure,
          this.maxPressure,
          0.00005 * lq
        )),
        this.pressure == this.maxPressure) &&
      this.resetRain(),
      mk || this.musicWater.isPlaying ?
      this.musicWind.isPlaying && this.musicWind.stop() :
      ((this.musicWind.volume = this.pressure * Game.setMaxVolumeSounds),
        this.musicWind.isPlaying || this.musicWind.play(mr)),
      (this.clouds.tilePosition.x =
        this.clouds.tilePosition.x >
        this.clouds.texture.width * this.clouds.tileScale.x ?
        0 :
        this.clouds.tilePosition.x + 0.02 * lq * this.pressure),
      this.tuman.visible &&
      ((this.tuman.alpha = 1 - ly),
        (this.tuman.tilePosition.x =
          this.tuman.tilePosition.x >
          this.tuman.texture.width * this.tuman.tileScale.x ?
          0 :
          this.tuman.tilePosition.x + 0.05 * lq * this.pressure)),
      this.humid != this.maxHumid &&
      (this.humid = this.smoothChange(
        this.humid,
        this.maxHumid,
        0.00005 * lq
      )),
      0 == mi && this.humid > this.rainHumid ?
      ((mj = 'rain'),
        (this.containerRain.alpha = (this.humid - this.rainHumid) / 0.35),
        (this.musicRain.volume = mk ?
          this.containerRain.alpha * Game.setMaxVolumeSounds * 0.1 :
          this.containerRain.alpha * Game.setMaxVolumeSounds),
        (this.fog.alpha = 0.2 * this.containerRain.alpha),
        (this.containerRain.visible = !mk),
        mk || this.emitRain.update(0.001 * lq),
        (this.fog.visible = 0 == Game.setFog && this.containerRain.visible),
        !this.isWinter || this.onlyRain ?
        this.musicRain.isPlaying || this.musicRain.play(ms) :
        this.musicRain.isPlaying && this.musicRain.stop()) :
      ((this.containerRain.visible = false),
        (this.fog.visible = false),
        this.musicRain.isPlaying && this.musicRain.stop()),
      (this.clouds.alpha = 0.5 * this.humid)
    for (
      var mu,
        mm,
        mq,
        mn,
        mt,
        mv = 30 < Game.packets.length ? 30 : Game.packets.length; 0 < mv;

    ) {
      switch ((me = Game.packets[0]).query) {
        case Game.packet.INVENTORY_USE:
          195 <= me.item_id &&
            me.item_id <= 224 &&
            (null != (mq = this.findEntity(me.entity_id)) &&
              mq.healAnim(1),
              null != this.myPlayer) &&
            this.myPlayer.data.id == me.entity_id &&
            (Game.playSound('magic.mp3'), this.levelUi.showMainUi())
          break
        case Game.packet.ENTITY_ADD:
          this.createEntity(me.id, me)
          break
        case Game.packet.SET_WEATHER:
          if (null != me.time) {
            switch (
              ((this.time = me.time),
                (mm = this.getTexture(0)).id)
            ) {
              case '4957e478-0f5f-4095-98b8-a0bad81d2b0b':
              case '3dde2a3d-b74a-4790-bf82-10d5adc60970':
              case '5a486e1e-b930-4a5e-8410-fe3bb10a0293':
              case '82a1ef2b-6c7e-4699-a359-5fba0c13084b':
              case '439fb510-5714-40e4-9d72-8ecda96bb235':
              case '00524f92-5ebe-4018-9ece-1d73b202a3ba':
                mu = true
                break
              default:
                mu = Game.utils.IsWinter(this.time)
            }
            this.isWinter != mu &&
              ((this.isWinter = mu), this.resetRain())
            Game.myStorage.set('month', Game.utils.GetMonth(this.time))
          }
          null != me.temp && (this.temp = me.temp),
            null != me.tickTime && (this.tickTime = me.tickTime),
            null != me.humid &&
            (0 == this.humid && (this.humid = me.humid),
              (this.maxHumid = me.humid)),
            null != me.rainHumid &&
            (this.rainHumid = me.rainHumid),
            null != me.onlyRain &&
            ((this.onlyRain = me.onlyRain), this.resetRain()),
            null != me.pressure &&
            (0 == this.pressure &&
              ((this.pressure = me.pressure), this.resetRain()),
              (this.maxPressure = me.pressure)),
            this.resetColor(),
            this.changeWaterHeight(me.waterHeight)
          break
        case Game.packet.ENTITY_UPDATE:
          null != (mq = this.entities.getChildByName(me.id)) ?
            mq.setData(me) :
            Game.threads.push({
              query: Game.packet.GET_ENTITY,
              id: me.id,
            })
          break
        case Game.packet.ENTITY_REMOVE:
          null != (mq = this.entities.getChildByName(me.id)) &&
            (mq.smoothRemove(), Game.updateChatPrivacy())
          break
        case Game.packet.UPDATE_TITLE:
          this.levelUi.updatePlayerTitle(me.text)
          break
        case Game.packet.CHAT_SEND:
          for (
            mp = 0; mp < me.messages.length; mp++
          ) {
            this.addMessage(me.messages[mp])
          }
          break
        case Game.packet.CHAT_GLOBAL_SEND:
          Game.selectedChatChannel == me.channel_id && Game.updateChat()
          break
        case Game.packet.UPDATE_FIGHTS:
          this.levelUi.updateFights(me.fights)
          break
        case Game.packet.UPDATE_MAP:
          this.map.visible && this.levelUi.updateMap(me.dataMap)
          break
        case Game.packet.PLAY_AMBIENT_SOUND:
          this.playThunder()
          break
        case Game.packet.UPDATE_ACHIEVEMENTS:
          var mw = Game.updateAchiev(me.achievements)
          null != mw && this.levelUi.playAchievement(mw)
          break
        case Game.packet.UPDATE_EVENTS:
          if (null != this.tribeTasks) {
            for (var mx in me) {
              var my = me[mx]
              if (!this.unreadBook && 0 < my.length) {
                for (mp = 0; mp < my.length; mp++) {
                  var mz = my[mp]
                  if (
                    null == mz.tribeId ||
                    null == lu ||
                    mz.tribeId == lu.data.tribe.id
                  ) {
                    for (
                      var na = null, nb = 0; nb < this.tribeTasks[mx].length; nb++
                    ) {
                      if (
                        this.tribeTasks[mx][nb].uid ==
                        mz.uid
                      ) {
                        na = this.tribeTasks[mx][nb]
                        break
                      }
                    }
                    if (
                      null == na ||
                      na.completed != mz.completed
                    ) {
                      this.unreadBook = true
                      break
                    }
                  }
                }
              }
              this.tribeTasks[mx] = my
            }
          } else {
            this.tribeTasks = me
          }
          this.levelUi.updateNote()
      }
      Game.packets.splice(0, 1)
      mv--
    }
    0 < Game.threads.length &&
      (Game.send(Game.threads[0]),
        Game.threads.splice(0, 1),
        (this.lastSend = mh))
    0 < this.shakeDecay ?
      (this.uiContainer.position.set(
          -this.shakeIntensity + Math.random() * this.shakeIntensity * 2,
          -this.shakeIntensity + Math.random() * this.shakeIntensity * 2
        ),
        (this.shakeDecay -= lq)) :
      this.uiContainer.position.set(0, 0)
    this.bottomActionBar.visible &&
      ((mn = this.uiBottomActionBar),
        (mt = this.textBottomActionBar),
        mn.scale.x < 0.5 ?
        (mn.scale.set(mn.scale.x + 0.005 * lq),
          (mt.alpha = 0)) :
        0.5 != mn.scale.x ?
        mn.scale.set(0.5) :
        mt.alpha < 1 ?
        (mt.alpha += 0.005 * lq) :
        (mt.alpha = 1))
    this.achievementContainer.visible &&
      (0 < this.tickAchievement - lq ?
        ((this.tickAchievement -= lq),
          this.tickAchievement < 1000 &&
          (this.achievementContainer.alpha = this.tickAchievement / 1000)) :
        (this.achievementContainer.visible = false))
    2 == mi && (mj = 'night')
    1 == Game.setMusic &&
      1000 < this.time &&
      ((600000 < this.tickNextMusic &&
          (null == Game.currentMusic || !Game.currentMusic.isPlaying)) ||
        (120000 < this.tickNextMusic && Game.currentMusicType != mj) ?
        ((this.tickNextMusic = 0), Game.playMusic(mj)) :
        (this.tickNextMusic += lq),
        0 < this.tickAmbientSound || this.ambientCanAttack ?
        ((this.tickAmbientSound -= lq),
          (this.ambientSound.volume =
            this.ambientSound.volume < Game.setMaxVolumeMusic ?
            this.ambientSound.volume + 0.00025 * lq :
            Game.setMaxVolumeMusic)) :
        0 < this.ambientSound.volume &&
        (this.ambientSound.volume =
          0 < this.ambientSound.volume ?
          this.ambientSound.volume - 0.00025 * lq :
          0),
        0 < this.ambientSound.volume ?
        this.ambientSound.isPlaying || this.ambientSound.play() :
        this.ambientSound.stop(),
        null == Game.nextMusicString) &&
      'menu' != Game.currentMusicType &&
      null != Game.currentMusic &&
      (Game.currentMusic.volume =
        Game.setMaxVolumeMusic - this.ambientSound.volume)
    this.typeMusic = mj
  }
  this.updateWorld = function(nc) {
    var nd = 0
    1 ==
      (nd =
        null != nc && null != nc.data.tribe ?
        nc.data.tribe.worldId :
        nd) ?
      ((this.stars.visible = false),
        (this.clouds.visible = false),
        (this.ambientLight.color = 13697023),
        (this.ambientLight.brightness = 1),
        (this.overNight.alpha = 0),
        (this.sky.tint = 16777215)) :
      2 == nd ?
      ((this.stars.visible = false),
        (this.clouds.visible = false),
        (this.ambientLight.color = 16745090),
        (this.ambientLight.brightness = 0.4),
        (this.overNight.alpha = 0.6),
        (this.sky.tint = 16745090)) :
      ((this.stars.visible = true), (this.clouds.visible = true))
  }
  this.initParticles = function(ne) {
    var nf = {
      children: true
    }
    for (
      var ng,
        nh = this.getTexture(ne),
        ni = this.containerParticles,
        nj = this.containerEmitters,
        nk = 0; nk < nj.length; nk++
    ) {
      nj[nk].destroy(nf)
    }
    var nl = {
      start: 0,
      end: 1,
    }
    var nm = {
      start: 0.4,
      end: 0.5,
      minimumScaleMultiplier: 1,
    }
    var nn = {
      start: 200,
      end: 10,
      minimumSpeedMultiplier: 0.5,
    }
    var np = {
      x: 0,
      y: 0,
    }
    var nq = {
      min: 180,
      max: 360,
    }
    var nr = {
      min: 0,
      max: 0,
    }
    var ns = {
      min: 0.1,
      max: 0.5,
    }
    var nt = {
      x: -50,
      y: 0,
      w: 100,
      h: 25,
    }
    var nu = {
      start: 0,
      end: 1,
    }
    var nv = {
      start: 1,
      end: 2,
      minimumScaleMultiplier: 1,
    }
    var nw = {
      start: 200,
      end: 100,
      minimumSpeedMultiplier: 0.5,
    }
    var nx = {
      x: 0,
      y: 0,
    }
    var ny = {
      min: 270,
      max: 270,
    }
    var nz = {
      min: 0,
      max: 0,
    }
    var oa = {
      min: 1,
      max: 2,
    }
    var ob = {
      x: -50,
      y: 0,
      w: 100,
      h: 25,
    }
    var oc = {
      start: 0,
      end: 1,
    }
    var od = {
      start: 0.5,
      end: 0.6,
      minimumScaleMultiplier: 1,
    }
    var oe = {
      start: 150,
      end: 10,
      minimumSpeedMultiplier: 0.5,
    }
    var of = {
      x: 0,
      y: 0,
    }
    var og = {
      min: 160,
      max: 330,
    }
    var oh = {
      min: 0,
      max: 0,
    }
    var oi = {
      min: 0.1,
      max: 0.5,
    }
    var oj = {
      x: -60,
      y: 0,
      w: 140,
      h: 25,
    }
    var ok = {
      start: 0,
      end: 1,
    }
    var ol = {
      start: 0.6,
      end: 0.8,
      minimumScaleMultiplier: 1,
    }
    var om = {
      start: 200,
      end: 10,
      minimumSpeedMultiplier: 0.5,
    }
    var oo = {
      x: 0,
      y: 0,
    }
    var op = {
      min: 180,
      max: 360,
    }
    var oq = {
      min: 0,
      max: 0,
    }
    var or = {
      min: 0.1,
      max: 0.5,
    }
    var os = {
      x: -150,
      y: 0,
      w: 300,
      h: 45,
    }
    var ot = {
      start: 0,
      end: 1,
    }
    var ou = {
      start: 0.4,
      end: 0.5,
      minimumScaleMultiplier: 1,
    }
    var ov = {
      start: 200,
      end: 10,
      minimumSpeedMultiplier: 0.5,
    }
    var ow = {
      x: 0,
      y: 0,
    }
    var ox = {
      min: 180,
      max: 360,
    }
    var oy = {
      min: 0,
      max: 0,
    }
    var oz = {
      min: 0.1,
      max: 0.5,
    }
    var pa = {
      x: -35,
      y: 0,
      w: 70,
      h: 20,
    }
    var pb = {
      start: 0,
      end: 1,
    }
    var pc = {
      start: 0.8,
      end: 1.5,
      minimumScaleMultiplier: 1,
    }
    var pd = {
      start: 200,
      end: 10,
      minimumSpeedMultiplier: 0.5,
    }
    var pe = {
      x: 0,
      y: 0,
    }
    var pf = {
      min: 180,
      max: 360,
    }
    var pg = {
      min: 0,
      max: 0,
    }
    var ph = {
      min: 0.1,
      max: 0.5,
    }
    var pi = {
      x: 0,
      y: 0,
      w: 700,
      h: 110,
    }
    var pj = {
      start: 1,
      end: 0.5,
    }
    var pk = {
      start: 3,
      end: 2,
      minimumScaleMultiplier: 1,
    }
    var pl = {
      start: 250,
      end: 100,
      minimumSpeedMultiplier: 0.5,
    }
    var pm = {
      x: 0,
      y: 0,
    }
    var pn = {
      min: 180,
      max: 360,
    }
    var po = {
      min: 0,
      max: 0,
    }
    var pp = {
      min: 0.1,
      max: 0.5,
    }
    var pq = {
      x: 0,
      y: 0,
      w: 1115,
      h: 200,
    }
    '256303ca5e0939e75fcf7e6e9888e857a26bdd4c' == nh.id ?
      ((ng = new PIXI.particles.Emitter(ni)).init(
          PIXI.particles.upgradeConfig({
              alpha: nl,
              scale: nm,
              color: {
                start: '#d6f8ff',
                end: '#ffffff',
              },
              speed: nn,
              acceleration: np,
              maxSpeed: 0,
              startRotation: nq,
              noRotation: true,
              rotationSpeed: nr,
              lifetime: ns,
              blendMode: 'normal',
              frequency: 0.001,
              emitterLifetime: -1,
              maxParticles: 70,
              pos: {
                x: ne * Game.packet.WIDTH + 625,
                y: 300,
              },
              addAtBack: false,
              spawnType: 'rect',
              spawnRect: nt,
            },
            [PIXI.Texture.from('environment/particle.png')]
          )
        ),
        ng.playOnceAndDestroy(),
        nj.push(ng)) :
      'e0b2e161-2f2c-4973-86fa-1e0bf101efb2' == nh.id ?
      ((ng = new PIXI.particles.Emitter(ni)).init(
          PIXI.particles.upgradeConfig({
              alpha: nu,
              scale: nv,
              color: {
                start: '#fbb741',
                end: '#bdbdbd',
              },
              speed: nw,
              acceleration: nx,
              maxSpeed: 0,
              startRotation: ny,
              noRotation: true,
              rotationSpeed: nz,
              lifetime: oa,
              blendMode: 'normal',
              frequency: 0.001,
              emitterLifetime: -1,
              maxParticles: 70,
              pos: {
                x: ne * Game.packet.WIDTH + 640,
                y: 300,
              },
              addAtBack: false,
              spawnType: 'rect',
              spawnRect: ob,
            },
            [PIXI.Texture.from('environment/particle.png')]
          )
        ),
        ng.playOnceAndDestroy(),
        nj.push(ng)) :
      'af0968ce-6188-482d-8b49-3a1d3509be24' == nh.id ?
      ((ng = new PIXI.particles.Emitter(ni)).init(
          PIXI.particles.upgradeConfig({
              alpha: oc,
              scale: od,
              color: {
                start: '#646460',
                end: '#919391',
              },
              speed: oe,
              acceleration: of,
              maxSpeed: 0,
              startRotation: og,
              noRotation: true,
              rotationSpeed: oh,
              lifetime: oi,
              blendMode: 'normal',
              frequency: 0.001,
              emitterLifetime: -1,
              maxParticles: 70,
              pos: {
                x: ne * Game.packet.WIDTH + 600,
                y: 345,
              },
              addAtBack: false,
              spawnType: 'rect',
              spawnRect: oj,
            },
            [PIXI.Texture.from('environment/particle.png')]
          )
        ),
        ng.playOnceAndDestroy(),
        nj.push(ng)) :
      'dfbf0ffb-f08e-4ade-88c5-f90284c8335b' == nh.id ?
      ((ng = new PIXI.particles.Emitter(ni)).init(
          PIXI.particles.upgradeConfig({
              alpha: ok,
              scale: ol,
              color: {
                start: '#133b34',
                end: '#dce0df',
              },
              speed: om,
              acceleration: oo,
              maxSpeed: 0,
              startRotation: op,
              noRotation: true,
              rotationSpeed: oq,
              lifetime: or,
              blendMode: 'normal',
              frequency: 0.0008,
              emitterLifetime: -1,
              maxParticles: 70,
              pos: {
                x: ne * Game.packet.WIDTH + 515,
                y: 420,
              },
              addAtBack: false,
              spawnType: 'rect',
              spawnRect: os,
            },
            [PIXI.Texture.from('environment/particle.png')]
          )
        ),
        ng.playOnceAndDestroy(),
        nj.push(ng)) :
      '5b11cbf3-d9c1-4522-9eab-fd9c30c66e8f' == nh.id ?
      ((ni = {
          alpha: ot,
          scale: ou,
          color: {
            start: '#d6f8ff',
            end: '#ffffff',
          },
          speed: ov,
          acceleration: ow,
          maxSpeed: 0,
          startRotation: ox,
          noRotation: true,
          rotationSpeed: oy,
          lifetime: oz,
          blendMode: 'normal',
          frequency: 0.001,
          emitterLifetime: -1,
          maxParticles: 70,
          pos: {
            x: ne * Game.packet.WIDTH + 865,
            y: 365,
          },
          addAtBack: false,
          spawnType: 'rect',
          spawnRect: pa,
        }),
        (ng = new PIXI.particles.Emitter(this.containerParticles)).init(
          PIXI.particles.upgradeConfig(ni, [
            PIXI.Texture.from('environment/particle.png'),
          ])
        ),
        ng.playOnceAndDestroy(),
        nj.push(ng),
        (ni.pos.x = ne * Game.packet.WIDTH + 955),
        (ni.pos.y = 265),
        (ng = new PIXI.particles.Emitter(this.containerParticles)).init(
          PIXI.particles.upgradeConfig(ni, [
            PIXI.Texture.from('environment/particle.png'),
          ])
        ),
        ng.playOnceAndDestroy(),
        nj.push(ng),
        (ni.pos.x = ne * Game.packet.WIDTH + 1065),
        (ni.pos.y = 140),
        (ng = new PIXI.particles.Emitter(this.containerParticles)).init(
          PIXI.particles.upgradeConfig(ni, [
            PIXI.Texture.from('environment/particle.png'),
          ])
        ),
        ng.playOnceAndDestroy(),
        nj.push(ng)) :
      '265393f6-e199-4756-9acf-c4665f25852d' == nh.id ||
      'bf9a29b9-0065-41fd-8754-5f3f9535c21d' == nh.id ?
      ((ng = new PIXI.particles.Emitter(this.containerParticles)).init(
          PIXI.particles.upgradeConfig({
              alpha: pb,
              scale: pc,
              color: {
                start: '#d6f8ff',
                end: '#ffffff',
              },
              speed: pd,
              acceleration: pe,
              maxSpeed: 0,
              startRotation: pf,
              noRotation: true,
              rotationSpeed: pg,
              lifetime: ph,
              blendMode: 'normal',
              frequency: 0.0001,
              emitterLifetime: -1,
              maxParticles: 100,
              pos: {
                x: ne * Game.packet.WIDTH,
                y: 180,
              },
              addAtBack: false,
              spawnType: 'rect',
              spawnRect: pi,
            },
            [PIXI.Texture.from('environment/particle.png')]
          )
        ),
        ng.playOnceAndDestroy(),
        nj.push(ng)) :
      'e21c842f-7700-40bc-b7db-ab95a50360bb' == nh.id &&
      ((ng = new PIXI.particles.Emitter(this.containerParticles)).init(
          PIXI.particles.upgradeConfig({
              alpha: pj,
              scale: pk,
              color: {
                start: '#d6f8ff',
                end: '#ffffff',
              },
              speed: pl,
              acceleration: pm,
              maxSpeed: 0,
              startRotation: pn,
              noRotation: true,
              rotationSpeed: po,
              lifetime: pp,
              blendMode: 'normal',
              frequency: 0.00001,
              emitterLifetime: -1,
              maxParticles: 200,
              pos: {
                x: ne * Game.packet.WIDTH + Game.packet.WIDTH - 1115,
                y: Game.packet.HEIGHT - 210,
              },
              addAtBack: false,
              spawnType: 'rect',
              spawnRect: pq,
            },
            [PIXI.Texture.from('environment/particle.png')]
          )
        ),
        ng.playOnceAndDestroy(),
        nj.push(ng))
  }
  this.initSounds = function(pr) {
    pr = this.getTexture(pr)
    var ps = {
      loop: true
    };
    ('256303ca5e0939e75fcf7e6e9888e857a26bdd4c' != pr.id &&
      'dfbf0ffb-f08e-4ade-88c5-f90284c8335b' != pr.id &&
      'e21c842f-7700-40bc-b7db-ab95a50360bb' != pr.id &&
      '265393f6-e199-4756-9acf-c4665f25852d' != pr.id &&
      'bf9a29b9-0065-41fd-8754-5f3f9535c21d' != pr.id) ||
    ((this.musicWater.volume = Game.setMaxVolumeSounds),
      this.musicWater.isPlaying) ||
    this.musicWater.play(ps)
  }
  this.resetRain = function() {
    var pt,
      pu,
      pv = Game.app.screen.width,
      pw = Game.app.screen.height,
      px = this.emitRain,
      py = 80 - 40 * this.pressure,
      pz = {
        start: 1,
        end: 0,
      }
    var qa = {
      start: 0.1,
      end: 0.1,
      minimumScaleMultiplier: 1.1,
    }
    var qb = {
      x: 7,
      y: 0,
    }
    var qc = {
      min: 10,
      max: 100,
    }
    var qd = {
      x: 0,
      y: 0,
    }
    var qe = {
      x: 0.5 * -pv,
      y: 0,
      w: 1.5 * pv,
      h: 0,
    }
    var qf = {
      start: 0.7,
      end: 0,
    }
    var qg = {
      start: 0.4,
      end: 0.35,
      minimumScaleMultiplier: 1,
    }
    var qh = {
      x: 0,
      y: 0,
    }
    var qi = {
      min: 0,
      max: 0,
    }
    var qj = {
      x: 0,
      y: 0,
    }
    this.isWinter && !this.onlyRain ?
      ((pu =
          0.019 * pw - 0.004 * (pt = 50 + 850 * this.pressure)),
        px.init(
          PIXI.particles.upgradeConfig({
              alpha: pz,
              scale: qa,
              speed: {
                start: pt,
                end: pt + 50,
                minimumSpeedMultiplier: 1.1,
              },
              acceleration: qb,
              maxSpeed: 0,
              startRotation: {
                min: py - 5,
                max: 5 + py,
              },
              noRotation: false,
              rotationSpeed: qc,
              lifetime: {
                min: pu,
                max: pu,
              },
              blendMode: 'normal',
              frequency: 0.02,
              emitterLifetime: -1,
              maxParticles: 500,
              pos: qd,
              addAtBack: false,
              spawnType: 'rect',
              spawnRect: qe,
            },
            [PIXI.Texture.from('environment/particle.png')]
          )
        ),
        px.update(6)) :
      ((pu =
          0.0013 * pw -
          0.00015 * (pt = 1000 + 500 * this.pressure)),
        px.init(
          PIXI.particles.upgradeConfig({
              alpha: qf,
              scale: qg,
              color: {
                start: '#ffffff',
                end: '#ffffff',
              },
              speed: {
                start: pt,
                end: pt + 50,
                minimumSpeedMultiplier: 1.1,
              },
              acceleration: qh,
              maxSpeed: 0,
              startRotation: {
                min: py,
                max: 10 + py,
              },
              noRotation: false,
              rotationSpeed: qi,
              lifetime: {
                min: pu,
                max: pu,
              },
              blendMode: 'normal',
              frequency: 0.01,
              emitterLifetime: -1,
              maxParticles: 100,
              pos: qj,
              addAtBack: false,
              spawnType: 'rect',
              spawnRect: {
                x: -pv,
                y: 0,
                w: 2 * pv,
                h: 0,
              },
            },
            [PIXI.Texture.from('environment/raindrop.png')]
          )
        ),
        px.update(2))
  }
  this.resize = function(qk, ql) {
    this.normalSky.width = qk
    this.normalSky.height = ql
    this.sky.width = qk
    this.sky.height = ql
    var qm = this.stars
    Game.calcBackground(qm, 0.5)
    qm.position.set(qk / 2, ql / 2)
    this.clouds.width = qk
    this.clouds.height = ql
    this.clouds.tileScale.set(ql / this.clouds.texture.height)
    this.tuman.width = qk
    this.tuman.height = ql
    this.tuman.tileScale.set(ql / this.tuman.texture.height)
    this.overNight.width = qk
    this.overNight.height = ql
    this.mapBg.width = qk
    this.mapBg.height = ql
    this.fog.width = qk
    this.fog.height = ql
    this.camera.screenWidth = qk
    this.camera.screenHeight = ql
    this.mapCamera.screenWidth = qk
    this.mapCamera.screenHeight = ql
    this.camera.setZoom(this.zoom)
    null != this.myPlayer &&
      this.camera.moveCenter(this.myPlayer.x, this.myPlayer.y)
    this.uiBgDamage.width = qk
    this.uiBgDamage.height = ql
    this.resetRain()
    this.levelUi.resize(qk, ql)
  }
  this.addMessage = function(qn) {
    var qo,
      qp,
      qq = [],
      qr = qn.text
    if (qn.channel_id == Game.packet.CHAT_BOT) {
      for (
        var qr = (qr = Game.utils.ReplaceAll(
            qr,
            '\n@',
            '@'
          )).split(/(?=@)/g),
          qs = 0; qs < qr.length; qs++
      ) {
        for (
          var qt = qr[qs].split('\n'), qu = 0; qu < qt.length; qu++
        ) {
          this.levelUi.createUiList(qt[qu])
        }
      }
      Game.resizeToWindow()
    } else {
      qn.channel_id == Game.packet.CHAT_NOTE ?
        this.levelUi.addNotice(
          'Загляните в заметки племени для просмотра новой информации!',
          16630692
        ) :
        qn.channel_id != Game.packet.CHAT_GLOBAL &&
        (qr.length < 100 &&
          0 < qn.player_id &&
          1 == Game.setChatEntity &&
          (qo = this.findEntity(qn.player_id)),
          qn.channel_id == Game.packet.CHAT_HELP ?
          this.levelUi.addFloatNotice(qr) :
          1 == Game.setChatNotice &&
          ((qp = ''),
            qn.name && (qp = qn.name + ': '),
            this.levelUi.addNotice(
              qp + qr,
              qn.channel_id == Game.packet.CHAT_LOCAL_RP ?
              16630692 :
              16777215
            )))
      null != qo &&
        ((qo.lastTextMessage = qr),
          (qo.showTimeMessage = 15000),
          qo.renderEntityUi())
      qq.push(qn)
      Game.addMessage(qq)
    }
  }
  this.findEntity = function(qv) {
    for (
      var qw, qx = 0; qx < this.entities.children.length; qx++
    ) {
      if (null != (qw = this.entities.children[qx]).data) {
        if (
          null != qw.data.player_id &&
          qw.data.player_id == qv
        ) {
          return qw
        }
        if (null != qw.data.id && qw.data.id == qv) {
          return qw
        }
      }
    }
    return null
  }
  this.aiRun = function() {
    Game.threads.push({
      query: Game.packet.ENTITY_INTERACT,
      interactId: Game.packet.INTERACT_ACTION_RUN,
      inHuntingMode: true,
    })
    null != this.aiRun_timeout && clearTimeout(this.aiRun_timeout)
    this.aiRun_timeout = setTimeout(function() {
      Game.threads.push({
        query: Game.packet.ENTITY_INTERACT,
        interactId: Game.packet.INTERACT_ACTION_RUN,
        inHuntingMode: false,
      })
    }, 10000)
  }
  this.aiHit = function(qy) {
    if (null != this.myPlayer) {
      var qz,
        ra = this.myPlayer,
        rb = null,
        rd = []
      if (
        null ==
        (rb =
          null != this.hitTarget &&
          null !=
          (rb = this.entities.getChildByName(this.hitTarget)) &&
          Game.utils.Distance(
            ra.x,
            ra.y,
            rb.x,
            rb.y
          ) >=
          2 * ra.width ?
          (this.hitTarget = null) :
          rb) ||
        qy
      ) {
        for (
          var re = 0; re < this.entities.children.length; re++
        ) {
          var rf,
            rg = this.entities.children[re]
          null == rg.data ||
            rg == ra ||
            -1 == rg.data.interacts.indexOf(Game.packet.INTERACT_HIT) ||
            (null != rg.data.sleep && rg.data.sleep) ||
            (null != rg.data.tribe &&
              rg.data.tribe.id == ra.data.tribe.id) ||
            (rg.data.visible &&
              (rf = Game.utils.Distance(
                ra.x,
                ra.y,
                rg.x,
                rg.y
              )) <
              2 * ra.width &&
              (rd.push(rg),
                null == rb ||
                rf <
                Game.utils.Distance(
                  ra.x,
                  ra.y,
                  rb.x,
                  rb.y
                )) &&
              (rb = rg))
        }
      }
      qy &&
        0 < rd.length &&
        ((qz =
            null != this.hitTarget ?
            rd.indexOf(this.entities.getChildByName(this.hitTarget)) +
            1 :
            0),
          (this.hitTarget = (rb =
            rd[
              (qz = rd.length - 1 < qz ? 0 : qz)
            ]).name))
      null != rb ?
        qy ?
        ((qz = 'Цель: ' + rb.data.name),
          null != rb.data.player_id &&
          (qz += ' (' + rb.data.player_id + ')'),
          this.levelUi.addNotice(qz)) :
        (Game.threads.push({
            query: Game.packet.ENTITY_INTERACT,
            interactId: Game.packet.INTERACT_HIT,
            targetId: rb.name,
          }),
          null != rb.data.player_id && (this.tickAmbientSound = 15000)) :
        this.levelUi.addNotice('Нет цели')
    }
  }
  this.playThunder = function() {
    var rh = PIXI.sound.find(
      'sounds/thunder' + Game.utils.RandomInt(1, 6) + '.mp3'
    )
    null != rh &&
      ((rh.volume = Game.setMaxVolumeSounds), rh.play())
    0 == Game.setMaxLight && (this.tickAlphaThunderSound = 1.5)
  }
  this.playStepSound = function(ri, rj) {
    var rk,
      rl,
      rm,
      rn,
      ro = {
        start: 1,
        end: 0,
      }
    var rp = {
      start: 0.15,
      end: 0.15,
      minimumScaleMultiplier: 1,
    }
    var rq = {
      start: 400,
      end: 350,
      minimumSpeedMultiplier: 0.5,
    }
    var rr = {
      x: 0,
      y: 200,
    }
    var rs = {
      min: 0,
      max: 0,
    }
    var rt = {
      min: 0.1,
      max: 0.5,
    }
    var rv = {
      x: 0,
      y: 0,
      r: 0,
    }
    null != ri &&
      ((rm =
          ri == Game.packet.GROUND_WATER ||
          Game.packet.HEIGHT - this.waterHeight * this.heightWaterSprite * 0.7 <
          rj.y),
        (rn = {
          alpha: ro,
          scale: rp,
          speed: rq,
          acceleration: rr,
          maxSpeed: 0,
          startRotation: {
            min: 247 + 68 * rj.direction,
            max: 292 + 68 * rj.direction,
          },
          noRotation: false,
          rotationSpeed: rs,
          lifetime: rt,
          blendMode: 'normal',
          frequency: 0.03,
          emitterLifetime: 0.2,
          maxParticles: 50,
          pos: {
            x: rj.x,
            y: rj.y - 15,
          },
          addAtBack: false,
          spawnType: 'circle',
          spawnCircle: rv,
        }),
        rm ?
        ((rk = 'sounds/water' + Game.utils.RandomInt(1, 4) + '.mp3'),
          (rn.color = {
            start: '#3ea1a3',
            end: '#3ea1a3',
          })) :
        ri == Game.packet.GROUND_DIRT ?
        ((rk = 'sounds/grass' + Game.utils.RandomInt(1, 4) + '.mp3'),
          null != rj.data.inHuntingMode &&
          rj.data.inHuntingMode &&
          (rn.color = {
            start: '#a2653e',
            end: '#a2653e',
          })) :
        (rk = 'sounds/step' + Game.utils.RandomInt(1, 4) + '.mp3'),
        null != rk && rj.playMySound(rk),
        null != rj.data.player_groups &&
        !rm &&
        -1 < rj.data.player_groups.indexOf(Game.packet.GROUP_WINTER2) ?
        ((ri = (ri = [
            '#ff0000',
            '#00ff00',
            '#00ffff',
            '#ffff00',
            '#ff00ff',
          ])[Game.utils.RandomInt(0, ri.length - 1)]),
          (rn.color = {
            start: ri,
            end: ri,
          }),
          (rl = new PIXI.particles.Emitter(this.uiParticles))) :
        null != rn.color &&
        (rl = new PIXI.particles.Emitter(this.containerParticles)),
        null != rl) &&
      (rl.init(
          PIXI.particles.upgradeConfig(rn, [
            PIXI.Texture.from('environment/particle.png'),
          ])
        ),
        rl.playOnceAndDestroy())
  }
  this.calcColorWeather = function(rw) {
    var rx = 0,
      ry = 0
    switch (rw) {
      case 0:
      case 1:
      case 11:
        ;
        (rx = -25), (ry = -0.5)
        break
      case 2:
      case 3:
      case 4:
        ry = -0.3
        break
      case 8:
      case 9:
      case 10:
        rx = -25
    }
    var rz = {}
    return (
      (rz.colorTone = rx),
      (rz.colorSaturate = ry),
      rz
    )
  }
  this.calcAmbient = function(sa) {
    var sb = 1,
      sc = 0.4196078431372549,
      sd = 0.5882352941176471,
      se = 0.9686274509803922,
      sf = 1,
      sg = 1,
      sh = 1
    switch (sa) {
      case 21:
      case 22:
      case 23:
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
        ;
        (sb = 0.4),
        (sc = 0.03137254901960784),
        (sd = 0.047058823529411764),
        (se = 0.09803921568627451)
        break
      case 5:
      case 20:
        ;
        (sb = 0.6),
        (sc = 0.2901960784313726),
        (sd = 0.2235294117647059),
        (sf = 1),
        (sg = se = 0.5176470588235295),
        (sh = 0.5725490196078431)
        break
      case 6:
      case 19:
        ;
        (sb = 0.8),
        (sc = 0.38823529411764707),
        (sd = 0.34901960784313724),
        (se = 0.7411764705882353),
        (sf = 1),
        (sg = 0.5176470588235295),
        (sh = 0.5725490196078431)
        break
      case 7:
      case 18:
        sb = 0.9
    }
    var si = {}
    return (
      (si.brightness = sb),
      (si.r = sc),
      (si.g = sd),
      (si.b = se),
      (si.rc = sf),
      (si.gc = sg),
      (si.bc = sh),
      si
    )
  }
}

function jg(sj) {
  this.scene = sj
  this.init = function() {
    var sk = {
      fontSize: 10,
      fill: 16777215,
    }
    sl = sm.uiBgMenu = new PIXI.Sprite(sn['uiBgMenu.png'])
    sl.scale.set(0.5)
    sl.anchor.set(0.5, 0)
    so.addChild(sl)
    sp = sm.btnHome = Game.createButton(
      sn,
      'buttonHome.png'
    )
    sp.on(
      'pointerup',
      function() {
        this.showPauseMenu()
      },
      this
    )
    so.addChild(sp)
    sq = sm.btnMap = Game.createButton(sn, 'buttonMap.png')
    sq.on(
      'pointerup',
      function() {
        this.openNote()
      },
      this
    )
    so.addChild(sq)
    sr = sm.btnInventory = Game.createButton(
      sn,
      'btnInventory.png'
    )
    sr.on(
      'pointerup',
      function() {
        this.openInventory()
      },
      this
    )
    so.addChild(sr)
    ss = sm.btnFull = Game.createButton(
      sn,
      'buttonFull.png'
    )
    ss.on('pointerup', Game.openFull)
    so.addChild(ss)
    sl = sm.btnMode = Game.createButton(sn, 'btnMode.png')
    sl.on(
      'pointerdown',
      function() {
        this.lastClick = new Date().getTime()
      },
      sm
    )
    sl.on(
      'pointerup',
      function() {
        300 < new Date().getTime() - this.lastClick ?
          (this.levelUi.hideMainUi(true),
            (this.uiBgHiddenMenu.visible = true),
            (this.uiBgAnimMenu.visible = true),
            this.updateEntityUi()) :
          (this.camera.zoomPercent(0.25),
            this.camera.scaled >
            0.002 * Math.max(Game.app.screen.width, Game.app.screen.height) &&
            this.camera.setZoom(0.1),
            (this.zoom = this.camera.scaled),
            null != this.myPlayer && this.myPlayer.initPlayerEntity(0))
      },
      sm
    )
    so.addChild(sl)
    sp = sm.btnAudio = Game.createButton(
      sn,
      'uiBtnMicOff.png',
      false
    )
    sp.on(
      'pointerup',
      function() {
        Game.audio.stopRecord()
        this.children[0].texture = sn['uiBtnMicOff.png']
        this.children[1].visible = false
      },
      sp
    )
    sp.on(
      'pointerupoutside',
      function() {
        Game.audio.stopRecord()
        this.children[0].texture = sn['uiBtnMicOff.png']
        this.children[1].visible = false
      },
      sp
    )
    sp.on(
      'pointerdown',
      function() {
        this.children[0].texture = sn['uiBtnMicOn.png']
        this.children[1].text = 'Говорите'
        this.children[1].visible = true
        Game.audio.startRecord()
      },
      sp
    )
    sq = sm.textBtnAudio = new PIXI.Text('', {
      fontVariant: 'small-caps',
      fontSize: 12,
      fill: 15658734,
      fontWeight: 'bold',
    })
    sq.visible = false
    sq.anchor.set(1, 0.5)
    sq.position.set(-sp.width / 2 - 5, 0)
    sp.addChild(sq)
    so.addChild(sp)
    sr = sm.uiBtnActionHit = Game.createButton(
      sn,
      'uiBtnActionHit.png'
    )
    ss = sm.uiBtnActionUse = Game.createButton(
      sn,
      'uiBtnActionUse.png'
    )
    sl = sm.uiBtnActionNose = Game.createButton(
      sn,
      'uiBtnActionNose.png'
    )
    sq = sm.uiBtnActionDig = Game.createButton(
      sn,
      'uiBtnActionDirt.png'
    )
    sp = sm.uiBtnActionChange = Game.createButton(
      sn,
      'uiBtnActionChange.png'
    )
    sr.on(
      'pointerup',
      function() {
        this.aiHit(false)
        this.aiRun()
      },
      sm
    )
    so.addChild(sr)
    sp.on(
      'pointerup',
      function() {
        this.aiHit(true)
      },
      sm
    )
    so.addChild(sp)
    sq.on('pointerup', function() {
      Game.threads.push({
        query: Game.packet.ENTITY_INTERACT,
        interactId: Game.packet.INTERACT_DIG,
      })
    })
    so.addChild(sq)
    sl.on('pointerup', function() {
      Game.threads.push({
        query: Game.packet.ENTITY_ACTION,
        actionId: Game.packet.ACTION_SEARCH,
      })
    })
    so.addChild(sl)
    ss.on(
      'pointerup',
      function() {
        this.showListEntityInteracts()
      },
      this
    )
    so.addChild(ss)
    sr = sm.floatNotifications = new PIXI.Container()
    so.addChild(sr)
    sp = sm.hourTimeBar = new PIXI.Container()
    sp.visible = false
    so.addChild(sp)
    sq = sm.textHourTimeBar = new PIXI.Text('', {
      fontSize: 20,
      fill: 16777215,
      fontWeight: 'bold',
      dropShadow: true,
      dropShadowBlur: 4,
      dropShadowAlpha: 0.2,
      dropShadowDistance: 2,
      align: 'center',
    })
    sq.anchor.set(0.5, 1)
    sp.addChild(sq)
    sm.tickTextHourTimeBar = 0
    sm.showTimeBar = 0
    sm.hourTime = -1
    sl = sm.bottomActionBar = new PIXI.Container()
    sl.visible = false
    sm.addChild(sl)
    ss = sm.bgBottomActionBar = new PIXI.Sprite(
      PIXI.Texture.WHITE
    )
    ss.tint = 0
    ss.alpha = 0.8
    ss.interactive = true
    ss.on('pointerup', function() {
      Game.threads.push({
        query: Game.packet.ENTITY_INTERACT,
        interactId: Game.packet.INTERACT_ACTION_STOP,
      })
    })
    sl.addChild(ss)
    sr = sm.particlesBottomActionBar = new PIXI.Container()
    sl.addChild(sr)
    so = sm.uiBottomActionBar = new PIXI.Sprite(
      sn['bottomActionBar.png']
    )
    so.scale.set(0.5)
    so.anchor.set(0.5)
    so.interactive = true
    sl.addChild(so)
    sq = sm.textBottomActionBar = new PIXI.Text('', {
      fontVariant: 'small-caps',
      fontSize: Game.btnFontSize,
      fill: 16777215,
      fontWeight: 'bold',
    })
    sq.anchor.set(0.5)
    sl.addChild(sq)
    sp = sm.cancelTextBottomActionBar = new PIXI.Text(
      'Отменить',
      st
    )
    sp.anchor.set(0.5, 0)
    sl.addChild(sp)
    this.dialogTime = 0
    this.initDialog()
    this.initNote()
    ss = sm.achievementContainer = new PIXI.Container()
    ss.visible = false
    sm.addChild(ss)
    sr = sm.achievementBg = new PIXI.Sprite(PIXI.Texture.WHITE)
    sr.tint = 0
    sr.alpha = 0.5
    ss.addChild(sr)
    sm.achievementParticles = new PIXI.Container()
    ss.addChild(sm.achievementParticles)
    so = sm.achievementSprite = new PIXI.Sprite(
      PIXI.Texture.WHITE
    )
    so.anchor.set(0.5, 1)
    so.scale.set(0.95)
    ss.addChild(so)
    sq = sm.achievementTitle = new PIXI.Text('Новое достижение', {
      fontSize: 18,
      fill: 16777215,
      fontWeight: 'bold',
    })
    sq.anchor.set(0.5, 0)
    ss.addChild(sq)
    sp = sm.achievementText = new PIXI.Text('...', {
      fontSize: Game.btnFontSize,
      fill: 16777215,
      fontWeight: 'bold',
    })
    sp.anchor.set(0.5, 0)
    ss.addChild(sp)
    sm.tickAchievement = 0
    this.initInventory()
    sl = sm.notifications = new PIXI.Container()
    var su,
      sv,
      sw,
      sm = this.scene,
      sn = Game.resources.ui.textures,
      so = (sm.uiBgHiddenMenu = new PIXI.Sprite(
        sn['uiBgHiddenMenu.png']
      )),
      so =
      (so.scale.set(0.5),
        so.anchor.set(0.5, 0),
        sm.addChild(so),
        (sm.uiBgAnimMenu = new PIXI.Sprite(
          sn['uiBgAnimMenu.png']
        ))),
      so =
      (so.anchor.set(0.5, 0),
        sm.addChild(so),
        (sm.uiContainer = new PIXI.Container())),
      sp =
      (sm.addChild(so),
        (sm.effects = new PIXI.Container())),
      sp =
      (so.addChild(sp),
        (sm.shakeDecay = 0),
        (sm.shakeIntensity = 10),
        (sm.btnProfile = Game.createButton(sn, 'uiProfile.png'))),
      sq = (sm.uiCat = PIXI.Sprite.from(sn['uiCat0.png'])),
      sr = PIXI.Sprite.from(sn['uiBook.png']),
      ss = (sm.uiProfileName = new PIXI.Text('', {
        fontVariant: 'small-caps',
        fontSize: 16,
        fill: 7081990,
        align: 'center',
        fontWeight: 'bold',
      })),
      sl = (sm.uiLevelName = new PIXI.Text('', {
        fontVariant: 'small-caps',
        fontSize: 12,
        lineHeight: 7,
        fill: 16777215,
        align: 'center',
      })),
      sq =
      (sp.on(
          'pointerup',
          function() {
            this.openProfile()
          },
          this
        ),
        sp.position.set(103, 33),
        sq.anchor.set(0.5),
        sq.scale.set(0.5),
        sq.position.set(-70, 0),
        sp.addChild(sq),
        sr.scale.set(0.5),
        sr.position.set(-100, -10),
        sp.addChild(sr),
        ss.anchor.set(0.5),
        ss.position.set(18, -17),
        sp.addChild(ss),
        sl.anchor.set(0.5),
        sl.position.set(18, -1),
        sp.addChild(sl),
        so.addChild(sp),
        (sm.unreadBook = false),
        (sm.textSeason = new PIXI.Text('', sk))),
      sr =
      (sq.position.set(67, 40),
        so.addChild(sq),
        (sm.chatBreak = new PIXI.Sprite(sn['break.png']))),
      ss =
      (sr.anchor.set(0.5, 0),
        sr.scale.set(0.5),
        sr.position.set(66, 92),
        so.addChild(sr),
        (sm.uiEye = PIXI.Sprite.from(sn['eye0.png'])),
        sm.uiEye.scale.set(0.7),
        sm.uiEye.anchor.set(0.5),
        so.addChild(sm.uiEye),
        (sm.tickPlayerTitle = 0),
        (sm.textPlayerTitle = new PIXI.Text('', {
          fontSize: 36,
          fill: 16777215,
          fontVariant: 'small-caps',
          align: 'center',
          fontWeight: 'bold',
          dropShadow: true,
          dropShadowBlur: 4,
          dropShadowAlpha: 1,
          dropShadowDistance: 2,
        })),
        sm.textPlayerTitle.anchor.set(0.5),
        so.addChild(sm.textPlayerTitle),
        (sm.btnChat = Game.createButton(sn, 'btnChat.png'))),
      sx =
      (ss.position.set(33, 115),
        ss.on(
          'pointerup',
          function() {
            this.hideMainUi(true)
            Game.openChat()
          },
          this
        ),
        so.addChild(ss),
        ['health', 'hunger', 'thirst', 'tired']),
      sy = [16717581, 6345997, 973475, 16244176],
      sz = (sm.uiIdcat_container = new PIXI.Container())
    sz.position.set(33, 160)
    sz.interactive = true
    sz.on('pointerup', function() {
      Game.scenes.active.tickIdcatText = 5000
    })
    so.addChild(sz)
    for (var ta = 0; ta < sx.length; ta++) {
      su = sx[ta];
      (sv = new PIXI.Sprite(sn['uiIdcat_empty.png'])).anchor.set(
        0.5
      )
      sv.scale.set(0.5)
      sv.position.set(0, 45 * ta)
      sz.addChild(sv);
      (sv = new PIXI.Sprite(
        sn['uiIdcat_' + su + '.png']
      )).anchor.set(0.5)
      sv.scale.set(0.5)
      sv.position.set(0, 45 * ta)
      sz.addChild(sv);
      (sw = new PIXI.Sprite(sn['uiIdcat_mask.png'])).anchor.set(
        0.5,
        1
      )
      sw.position.set(0, 45 * ta + 23)
      sv.mask = sw
      sz.addChild(sw);
      (sv = new PIXI.Sprite(
        sn['uiIdcat_' + su + 'Icon.png']
      )).anchor.set(0.5)
      sv.scale.set(0.5)
      sv.position.set(0, 45 * ta)
      sz.addChild(sv);
      (sw = new PIXI.Text('100%', {
        fontSize: 16,
        fill: sy[ta],
        align: 'center',
        fontWeight: 'bold',
        dropShadow: true,
        dropShadowBlur: 2,
        dropShadowAlpha: 1,
        dropShadowDistance: 1,
      })).anchor.set(0.5)
      sw.position.set(0, 45 * ta)
      sw.visible = false
      sz.addChild(sw)
    }
    sm.tickIdcatText = 0
    var st = {
      fontVariant: 'small-caps',
      fontSize: 16,
      fill: 12237498,
      fontWeight: 'bold',
    };
    (sl = sm.uiBgMenu =
      new PIXI.Sprite(sn['uiBgMenu.png'])),
    sl.scale.set(0.5),
      sl.anchor.set(0.5, 0),
      so.addChild(sl),
      (sp = sm.btnHome =
        Game.createButton(sn, 'buttonHome.png')),
      sp.on(
        'pointerup',
        function() {
          this.showPauseMenu()
        },
        this
      ),
      so.addChild(sp),
      (sq = sm.btnMap =
        Game.createButton(sn, 'buttonMap.png')),
      sq.on(
        'pointerup',
        function() {
          this.openNote()
        },
        this
      ),
      so.addChild(sq),
      (sr = sm.btnInventory =
        Game.createButton(sn, 'btnInventory.png')),
      sr.on(
        'pointerup',
        function() {
          this.openInventory()
        },
        this
      ),
      so.addChild(sr),
      (ss = sm.btnFull =
        Game.createButton(sn, 'buttonFull.png')),
      ss.on('pointerup', Game.openFull),
      so.addChild(ss),
      (sl = sm.btnMode =
        Game.createButton(sn, 'btnMode.png')),
      sl.on(
        'pointerdown',
        function() {
          this.lastClick = new Date().getTime()
        },
        sm
      ),
      sl.on(
        'pointerup',
        function() {
          300 < new Date().getTime() - this.lastClick ?
            (this.levelUi.hideMainUi(true),
              (this.uiBgHiddenMenu.visible = true),
              (this.uiBgAnimMenu.visible = true),
              this.updateEntityUi()) :
            (this.camera.zoomPercent(0.25),
              this.camera.scaled >
              0.002 *
              Math.max(Game.app.screen.width, Game.app.screen.height) &&
              this.camera.setZoom(0.1),
              (this.zoom = this.camera.scaled),
              null != this.myPlayer && this.myPlayer.initPlayerEntity(0))
        },
        sm
      ),
      so.addChild(sl),
      (sp = sm.btnAudio =
        Game.createButton(sn, 'uiBtnMicOff.png', false)),
      sp.on(
        'pointerup',
        function() {
          Game.audio.stopRecord()
          this.children[0].texture = sn['uiBtnMicOff.png']
          this.children[1].visible = false
        },
        sp
      ),
      sp.on(
        'pointerupoutside',
        function() {
          Game.audio.stopRecord()
          this.children[0].texture = sn['uiBtnMicOff.png']
          this.children[1].visible = false
        },
        sp
      ),
      sp.on(
        'pointerdown',
        function() {
          this.children[0].texture = sn['uiBtnMicOn.png']
          this.children[1].text = 'Говорите'
          this.children[1].visible = true
          Game.audio.startRecord()
        },
        sp
      ),
      (sq = sm.textBtnAudio =
        new PIXI.Text('', {
          fontVariant: 'small-caps',
          fontSize: 12,
          fill: 15658734,
          fontWeight: 'bold',
        })),
      (sq.visible = false),
      sq.anchor.set(1, 0.5),
      sq.position.set(-sp.width / 2 - 5, 0),
      sp.addChild(sq),
      so.addChild(sp),
      (sr = sm.uiBtnActionHit =
        Game.createButton(sn, 'uiBtnActionHit.png')),
      (ss = sm.uiBtnActionUse =
        Game.createButton(sn, 'uiBtnActionUse.png')),
      (sl = sm.uiBtnActionNose =
        Game.createButton(sn, 'uiBtnActionNose.png')),
      (sq = sm.uiBtnActionDig =
        Game.createButton(sn, 'uiBtnActionDirt.png')),
      (sp = sm.uiBtnActionChange =
        Game.createButton(sn, 'uiBtnActionChange.png')),
      sr.on(
        'pointerup',
        function() {
          this.aiHit(false)
          this.aiRun()
        },
        sm
      ),
      so.addChild(sr),
      sp.on(
        'pointerup',
        function() {
          this.aiHit(true)
        },
        sm
      ),
      so.addChild(sp),
      sq.on('pointerup', function() {
        Game.threads.push({
          query: Game.packet.ENTITY_INTERACT,
          interactId: Game.packet.INTERACT_DIG,
        })
      }),
      so.addChild(sq),
      sl.on('pointerup', function() {
        Game.threads.push({
          query: Game.packet.ENTITY_ACTION,
          actionId: Game.packet.ACTION_SEARCH,
        })
      }),
      so.addChild(sl),
      ss.on(
        'pointerup',
        function() {
          this.showListEntityInteracts()
        },
        this
      ),
      so.addChild(ss),
      (sr = sm.floatNotifications = new PIXI.Container()),
      so.addChild(sr),
      (sp = sm.hourTimeBar = new PIXI.Container()),
      (sp.visible = false),
      so.addChild(sp),
      (sq = sm.textHourTimeBar =
        new PIXI.Text('', {
          fontSize: 20,
          fill: 16777215,
          fontWeight: 'bold',
          dropShadow: true,
          dropShadowBlur: 4,
          dropShadowAlpha: 0.2,
          dropShadowDistance: 2,
          align: 'center',
        })),
      sq.anchor.set(0.5, 1),
      sp.addChild(sq),
      (sm.tickTextHourTimeBar = 0),
      (sm.showTimeBar = 0),
      (sm.hourTime = -1),
      (sl = sm.bottomActionBar = new PIXI.Container()),
      (sl.visible = false),
      sm.addChild(sl),
      (ss = sm.bgBottomActionBar =
        new PIXI.Sprite(PIXI.Texture.WHITE)),
      (ss.tint = 0),
      (ss.alpha = 0.8),
      (ss.interactive = true),
      ss.on('pointerup', function() {
        Game.threads.push({
          query: Game.packet.ENTITY_INTERACT,
          interactId: Game.packet.INTERACT_ACTION_STOP,
        })
      }),
      sl.addChild(ss),
      (sr = sm.particlesBottomActionBar = new PIXI.Container()),
      sl.addChild(sr),
      (so = sm.uiBottomActionBar =
        new PIXI.Sprite(sn['bottomActionBar.png'])),
      so.scale.set(0.5),
      so.anchor.set(0.5),
      (so.interactive = true),
      sl.addChild(so),
      (sq = sm.textBottomActionBar =
        new PIXI.Text('', {
          fontVariant: 'small-caps',
          fontSize: Game.btnFontSize,
          fill: 16777215,
          fontWeight: 'bold',
        })),
      sq.anchor.set(0.5),
      sl.addChild(sq),
      (sp = sm.cancelTextBottomActionBar =
        new PIXI.Text('Отменить', st)),
      sp.anchor.set(0.5, 0),
      sl.addChild(sp),
      (this.dialogTime = 0),
      this.initDialog(),
      this.initNote(),
      (ss = sm.achievementContainer = new PIXI.Container()),
      (ss.visible = false),
      sm.addChild(ss),
      (sr = sm.achievementBg =
        new PIXI.Sprite(PIXI.Texture.WHITE)),
      (sr.tint = 0),
      (sr.alpha = 0.5),
      ss.addChild(sr),
      (sm.achievementParticles = new PIXI.Container()),
      ss.addChild(sm.achievementParticles),
      (so = sm.achievementSprite =
        new PIXI.Sprite(PIXI.Texture.WHITE)),
      so.anchor.set(0.5, 1),
      so.scale.set(0.95),
      ss.addChild(so),
      (sq = sm.achievementTitle =
        new PIXI.Text('Новое достижение', {
          fontSize: 18,
          fill: 16777215,
          fontWeight: 'bold',
        })),
      sq.anchor.set(0.5, 0),
      ss.addChild(sq),
      (sp = sm.achievementText =
        new PIXI.Text('...', {
          fontSize: Game.btnFontSize,
          fill: 16777215,
          fontWeight: 'bold',
        })),
      sp.anchor.set(0.5, 0),
      ss.addChild(sp),
      (sm.tickAchievement = 0),
      this.initInventory(),
      (sl = sm.notifications = new PIXI.Container())
    sm.addChild(sl)
  }
  this.start = function() {
    var tb = this.scene
    tb.uiLevelName.text = Game.utils.CutStr(tb.levelData.name, 15)
    this.initSetClass()
    this.updateFights()
    this.initMap()
    this.initProfile()
    0 == Game.setPixelInterpolation && (PIXI.settings.ROUND_PIXELS = true)
    Game.app.ticker.add(this.update, this)
  }
  this.stop = function() {
    Game.app.ticker.remove(this.update, this)
    PIXI.settings.ROUND_PIXELS = false
  }
  this.update = function(tc) {
    var te,
      tf,
      tg,
      th = this.scene,
      ti = th.inventory,
      tj = th.elInventory,
      tk = th.itemsInventory,
      ti =
      (ti.visible &&
        ((tl = Game.calcMaxScale(tj)),
          ti.alpha < 1 ?
          ((ti.alpha =
              1 < ti.alpha + 0.1 * tc ?
              1 :
              ti.alpha + 0.1 * tc),
            (tj.scale.x = tl * ti.alpha),
            (tj.scale.y = tj.scale.x)) :
          tj.scale.x != tl ?
          tj.scale.set(tl) :
          tk.alpha < 1 && (tk.alpha += 0.1 * tc)),
        th.selectClassMenu.visible &&
        th.selectClassMenu.alpha < 1 &&
        (th.selectClassMenu.alpha += 0.025 * tc),
        Game.utils.GetHours(th.time)),
      tl = ti + '',
      tj = Game.utils.GetMinutes(th.time) + '',
      tk = 1 - th.hourTimeBar.alpha,
      tk =
      ((th.textSeason.text =
          (tl = 1 == tl.length ? '0' + tl : tl) +
          ':' +
          (tj = 1 == tj.length ? '0' + tj : tj)),
        (th.textSeason.alpha = 0.8 * tk),
        th.hourTimeBar.visible ?
        (2000 < th.tickTextHourTimeBar ?
          (th.tickTextHourTimeBar = 0) :
          (th.tickTextHourTimeBar += 10 * tc),
          (th.textHourTimeBar.text =
            tl +
            (1000 < th.tickTextHourTimeBar ? ':' : ' ') +
            tj +
            '\n\n' +
            Game.strings.ru.seasons[Game.utils.GetSeason(th.time)] +
            '\n' +
            th.temp +
            ' \xB0C'),
          0 < th.showTimeBar ?
          ((th.showTimeBar -= 10 * tc),
            th.showTimeBar < 2000 ?
            0 < th.hourTimeBar.alpha ?
            (th.hourTimeBar.alpha -= 0.005 * tc) :
            (th.hourTimeBar.alpha = 0) :
            th.hourTimeBar.alpha < 1 ?
            (th.hourTimeBar.alpha += 0.01 * tc) :
            (th.hourTimeBar.alpha = 1)) :
          (th.hourTimeBar.visible = false)) :
        th.hourTime != ti &&
        ((th.hourTimeBar.alpha = 0),
          (th.hourTimeBar.visible = true),
          (th.showTimeBar = 6000),
          (th.timeSound.volume = Game.setMaxVolumeMusic),
          th.timeSound.play()),
        (th.hourTime = ti),
        Math.sin(th.tickAlpha)),
      tl =
      (th.mapLoad.visible &&
        (th.mapLoad.rotation =
          6.28 < th.mapLoad.rotation ?
          0 :
          th.mapLoad.rotation + 0.2 * tc),
        th.map.visible &&
        th.mapCamera.alpha < 1 &&
        (th.mapCamera.alpha += 0.01 * tc),
        th.uiBgDamage),
      tm =
      (tl.visible &&
        (tl.alpha =
          (2 * tl._maxAlpha) / 3 +
          (tk * tl._maxAlpha) / 3),
        th.uiIdcat_container),
      tn = 0.5 + 0.05 * tk
    0 < th.tickIdcatText && (th.tickIdcatText -= 10 * tc)
    for (
      var tp, tq = 0; tq < tm.children.length; tq += 5
    ) {
      te = tm.children[tq]
      tf = tm.children[tq + 1]
      tm.children[tq + 2].scale.y <= 0.125 ?
        (te.scale.set(tn), tf.scale.set(tn)) :
        (te.scale.set(0.5), tf.scale.set(0.5))
      tg = tm.children[tq + 4]
      1000 < th.tickIdcatText ?
        ((tg.visible = true),
          (tg.alpha = 1),
          (tf.alpha = te.alpha = 0.1)) :
        0 < th.tickIdcatText ?
        ((tg.alpha = th.tickIdcatText / 1000),
          (tf.alpha = te.alpha = 1 - 0.9 * tg.alpha)) :
        (tg.visible = false)
    }
    var ts = 0
    if (th.notifications.visible) {
      if (0 < th.notifications.children.length) {
        for (
          tq = 0; tq < th.notifications.children.length; tq++
        ) {
          ;
          (tp = th.notifications.children[tq])
          .tickNotice < 1 ?
            (tp.destroy(true), this.addNotice('')) :
            tp.tickNotice < 1000 &&
            (tp.alpha = 0.001 * tp.tickNotice)
          tp.tickNotice -= 10 * tc
          ts = tp.alpha > ts ? tp.alpha : ts
        }
        th.chatBreak.visible = true
        th.chatBreak.alpha = ts
      } else {
        th.chatBreak.visible = false
      }
    }
    var tt = {
      children: true
    }
    th.uiContainer.visible &&
      0 < th.floatNotifications.children.length &&
      ((tp = th.floatNotifications.children[0]).tickNotice < 1 ?
        tp.destroy(tt) :
        tp.tickNotice < 1000 ?
        (tp.alpha = 0.001 * tp.tickNotice) :
        (tp.alpha = 1),
        (tp.tickNotice -= 10 * tc),
        (tp.visible = true))
    var tu,
      tw,
      tx,
      tj = th.uiProfile,
      ti = th.elProfile
    if (
      (tj.visible &&
        ((tl = Game.calcMaxScale(ti)),
          tj.alpha < 1 ?
          ((tj.alpha =
              1 < tj.alpha + 0.1 * tc ?
              1 :
              tj.alpha + 0.1 * tc),
            (ti.scale.x = tl * tj.alpha),
            (ti.scale.y = ti.scale.x)) :
          ti.scale.x != tl && ti.scale.set(tl)),
        th.uiNoteContainer.visible &&
        ((tk = Game.calcMaxScale(th.uiNoteWindow)),
          th.uiNoteContainer.alpha < 1 ?
          ((th.uiNoteContainer.alpha =
              1 < th.uiNoteContainer.alpha + 0.1 * tc ?
              1 :
              th.uiNoteContainer.alpha + 0.1 * tc),
            (th.uiNoteWindow.scale.x =
              tk * th.uiNoteContainer.alpha),
            (th.uiNoteWindow.scale.y = th.uiNoteWindow.scale.x)) :
          th.uiNoteWindow.scale.x != tk &&
          th.uiNoteWindow.scale.set(tk)),
        th.uiBgAnimMenu.visible &&
        ((th.uiBgAnimMenu.scale.y -= 0.025 * tc),
          th.uiBgAnimMenu.scale.y <= 0) &&
        (th.uiBgAnimMenu.visible = false),
        th.listBar.visible)
    ) {
      if (
        (null !=
          (tj =
            th.containerBgListBar.getChildByName('background')) &&
          tj.alpha < 1 &&
          tj.texture.valid &&
          (tj.alpha =
            1 < tj.alpha + 0.02 * tc ?
            1 :
            tj.alpha + 0.02 * tc),
          2 < this.dialogTime)
      ) {
        for (
          tq = 0; tq < th.listBarUis.children.length; tq++
        ) {
          if ((tw = th.listBarUis.children[tq]).visible) {
            for (
              var ty = 0; ty < tw.children.length; ty++
            ) {
              if (
                null !=
                (tu = tw.children[ty])._animText &&
                tu.text.length < tu._animText.length
              ) {
                tu.text += tu._animText[tu.text.length]
                break
              }
            }
            break
          }
        }
        this.dialogTime -= 2
      }
      this.dialogTime += tc
    }
    if (th.uiNoteContainer.visible) {
      if (1 < th.uiNoteFightContainer.children.length) {
        for (
          tq = 0; tq < th.uiNoteFightContainer.children.length; tq++
        ) {
          if (
            (tx = th.uiNoteFightContainer.children[tq])
            .visible
          ) {
            if (
              (null == tx._alphaTime &&
                (tx._alphaTime = 150),
                0 < tx._alphaTime)
            ) {
              tx._alphaTime -= tc
              break
            }
            tq + 1 > th.uiNoteFightContainer.children.length - 1 ?
              (th.uiNoteFightContainer.children[0].visible = true) :
              (th.uiNoteFightContainer.children[
                tq + 1
              ].visible = true)
            tx.visible = false
            tx._alphaTime = 150
            break
          }
        }
      }
      th.uiNoteTribeTaskSprite.visible &&
        (th.uiNoteTribeTaskSprite.alpha =
          1 -
          Math.min(Math.abs(th.uiNoteTribeTasks.children[0].y), 80) / 80)
    }
    th.uiEye.alpha = 1 - th.hourTimeBar.alpha
    0 < th.tickPlayerTitle ?
      ((th.tickPlayerTitle -= 10 * tc),
        (th.tickPlayerTitle =
          0 < th.tickPlayerTitle ? th.tickPlayerTitle : 0),
        (th.textPlayerTitle.alpha =
          1500 < th.tickPlayerTitle ?
          1 :
          th.tickPlayerTitle / 1500),
        (th.textPlayerTitle.visible = true)) :
      (th.textPlayerTitle.visible = false)
  }
  this.updateGround = function(tz) {
    var ua = this.scene,
      ub = Game.resources.ui.textures,
      tz = tz == Game.packet.GROUND_WATER,
      ua = (tz =
        null != ua.myPlayer ?
        tz ||
        Game.packet.HEIGHT -
        ua.waterHeight * ua.heightWaterSprite * 0.7 <
        ua.myPlayer.y :
        tz) ?
      ub['uiBtnActionWater.png'] :
      ub['uiBtnActionDirt.png']
    this.scene.uiBtnActionDig.children[0].texture = ua
  }
  this.initNote = function() {
    var uc,
      ud,
      ue = this.scene,
      uf = Game.resources.ui.textures,
      ug = (ue.uiNoteContainer = new PIXI.Container())
    ue.addChild(ug);
    (ud = ue.uiNoteBackground =
      new PIXI.Sprite(PIXI.Texture.WHITE)).tint = 0
    ud.alpha = 0.7
    ud.interactive = true
    ug.addChild(ud);
    (uiNoteWindow = ue.uiNoteWindow =
      PIXI.Sprite.from('ui/note.png')).anchor.set(0.5)
    ug.addChild(uiNoteWindow);
    (ud = new PIXI.Text('Племя', {
      fontVariant: 'small-caps',
      fontSize: 34,
      align: 'center',
      fill: 15436419,
      fontWeight: 'bold',
    })).anchor.set(0.5)
    ud.position.set(-616, -392)
    uiNoteWindow.addChild(ud);
    (uiNoteTribeIcon = ue.uiNoteTribeIcon =
      PIXI.Sprite.from(uf['tribe/id0.png'])).anchor.set(0.5)
    uiNoteTribeIcon.scale.set(1.8)
    uiNoteTribeIcon.position.set(42, -359)
    uiNoteWindow.addChild(uiNoteTribeIcon);
    (ud = Game.createButton()).on(
      'pointerup',
      function() {
        Game.openNote()
      },
      ue
    )
    ud.hitArea = new PIXI.Rectangle(-168, -33, 335, 65)
    ud.position.set(-251, -392)
    uiNoteWindow.addChild(ud);
    (uc = new PIXI.Text('Заметки', {
      fontVariant: 'small-caps',
      fontSize: 34,
      align: 'center',
      fill: 16777215,
      fontWeight: 'bold',
    })).anchor.set(0.5)
    uc.position.set(-25, 0)
    ud.addChild(uc);
    (uc = ue.uiNoteTribeDescIcon =
      PIXI.Sprite.from(uf['link.png'])).anchor.set(0.5)
    uc.position.set(75, 0)
    uc.fill = 12632256
    ud.addChild(uc)
    ud.on('pointerout', function() {
      this.children[0].style.fill = 16777215
      this.children[1].tint = 16777215
    })
    ud.on('pointerover', function() {
      this.children[0].style.fill = 12632256
      this.children[1].tint = 12632256
    });
    (uc = ue.uiNoteTribeTasks =
      Game.createScrollContainer(380, 435)).position.set(-356, -221)
    uiNoteWindow.addChild(uc);
    (ud = new PIXI.Text('Мои задания', {
      fontVariant: 'small-caps',
      fontSize: 34,
      align: 'center',
      fill: 16762209,
      fontWeight: 'bold',
    })).anchor.set(0.5)
    ud.position.set(494, -305)
    uiNoteWindow.addChild(ud);
    (uc = ue.uiNotePlayerTasks =
      Game.createScrollContainer(370, 435)).position.set(314, -221)
    uiNoteWindow.addChild(uc);
    (ud = new PIXI.Text('Рейтинг', {
      fontVariant: 'small-caps',
      fontSize: 30,
      align: 'center',
      fill: 16762209,
      fontWeight: 'bold',
    })).anchor.set(0.5)
    ud.position.set(-556, -307)
    uiNoteWindow.addChild(ud);
    (uc = new PIXI.Text('Задания племени', {
      fontVariant: 'small-caps',
      fontSize: 30,
      align: 'center',
      fill: 16762209,
      fontWeight: 'bold',
    })).anchor.set(0.5)
    uc.position.set(-201, -307)
    uiNoteWindow.addChild(uc);
    (ud = ue.uiNoteTribeTaskSprite =
      PIXI.Sprite.from(uf['winter24.png'])).anchor.set(0, 0.5)
    ud.position.set(45, -221)
    uiNoteWindow.addChild(ud);
    (uc = ue.uiNoteFightTitle =
      new PIXI.Text('Активные сражения', {
        fontVariant: 'small-caps',
        fontSize: 30,
        align: 'center',
        fill: 16762209,
        fontWeight: 'bold',
      })).anchor.set(0.5)
    uc.position.set(-352, 263)
    uiNoteWindow.addChild(uc);
    (ud = ue.uiNoteFightContainer =
      new PIXI.Container()).position.set(-352, 333)
    uiNoteWindow.addChild(ud);
    (uc = ue.uiNoteStatContainer =
      new PIXI.Container()).position.set(-721, -197)
    uiNoteWindow.addChild(uc);
    (ud = ue.uiNoteBtnClose =
      Game.createButton(uf, 'btnClose.png')).on(
      'pointerup',
      function() {
        this.showMainUi()
      },
      this
    )
    ug.addChild(ud)
  }
  this.openNote = function() {
    var uh = this.scene
    null != uh.myPlayer &&
      (this.hideMainUi(),
        (uh.uiNoteContainer.visible = true),
        (uh.uiNoteContainer.alpha = 0),
        uh.uiNoteWindow.scale.set(0),
        this.updateNote())
  }
  this.closeNote = function() {
    this.scene.uiNoteContainer.visible = false
    this.updateNote()
  }
  this.updateNote = function() {
    var uj,
      uk,
      um,
      un,
      uo,
      uq,
      ur,
      us,
      ut,
      uu,
      uv,
      uw,
      ux,
      uy,
      uz,
      va,
      vb,
      vc = 0,
      vd = 0,
      ve = this.scene,
      vf = Game.resources.ui.textures,
      vg = ve.uiNoteTribeTasks.children[0],
      vh = ve.uiNotePlayerTasks.children[0],
      vi = ve.uiNoteFightContainer,
      vj = ve.uiNoteStatContainer,
      vk = ve.uiNoteTribeTaskSprite,
      vl = vj.removeChildren(),
      vl = vi.removeChildren().concat(vl)
    vl = vg.removeChildren().concat(vl)
    vl = vh.removeChildren().concat(vl)
    var vm = {
      children: true
    }
    for (var vn = 0; vn < vl.length; vn++) {
      vl[vn].destroy(vm)
    }
    if (
      ((vg.y = 0),
        (vh.y = 0),
        (vk.visible = false),
        ve.uiNoteContainer.visible &&
        null != ve.dataFights &&
        null != ve.tribeTasks &&
        null != ve.myPlayer &&
        null != ve.myPlayer.data.tribe)
    ) {
      if (
        ((uk = ve.tribeTasks),
          (un = ve.dataFights),
          (um = ve.myPlayer.data.tribe.id) < 7 ?
          ((ve.uiNoteTribeIcon.texture =
              vf['tribe/id' + um + '.png']),
            (ve.uiNoteTribeIcon.visible = true)) :
          (ve.uiNoteTribeIcon.visible = false),
          null != uk.tribeEvents)
      ) {
        for (
          var vo, vp = [], vn = 0; vn < uk.tribeEvents.length; vn++
        ) {
          ;
          (vo = uk.tribeEvents[vn]).tribeId ==
            um && vp.push(vo)
        }
        var vq = {
          dropShadow: true,
          dropShadowDistance: 2,
          dropShadowBlur: 4,
          dropShadowAlpha: 0.2,
          fontSize: 30,
          fill: 14737632,
        }
        if (0 < vp.length) {
          vp.sort(function(vr, vt) {
            return vr.completed && !vt.completed ? 1 : -1
          })
          for (
            var vu = 0, vn = 0; vn < vp.length; vn++
          ) {
            ;
            (uz =
              '[' ==
              (uy = (vo = vp[vn]).name)[0]) &&
            (0 == vn &&
              -1 < uy.indexOf('[Зима24]') &&
              (vk.visible = true),
              (uy = uy.substring(uy.indexOf(']') + 2)))
            uz = vo.completed ?
              ((va = uz ? '[Событие]' : '[Выполнено]'),
                13812416) :
              uz ?
              ((va = '[Событие]'), 16748897) :
              ((va = '[Активно]'), 16762209)
            vo.completed ||
              ((vb = new PIXI.Text(va, {
                  dropShadow: true,
                  dropShadowDistance: 2,
                  dropShadowBlur: 4,
                  dropShadowAlpha: 0.2,
                  fontSize: 30,
                  fill: uz,
                })).position.set(0, vu),
                vg.addChild(vb))
            va = vo.completed ?
              va + ' ' :
              '                   ';
            (ux = new PIXI.Text(va + uy, {
              dropShadow: true,
              dropShadowDistance: 2,
              dropShadowBlur: 4,
              dropShadowAlpha: 0.2,
              fontSize: 30,
              wordWrap: true,
              wordWrapWidth: 380,
              fill: vo.completed ? 13812416 : 15982043,
            })).position.set(0, vu)
            vg.addChild(ux)
            vu += ux.height + 15
          }
        } else {
          ux = new PIXI.Text('Здесь пока что пусто.', vq)
          vg.addChild(ux)
        }
      }
      if (null != uk.playerEvents) {
        vp = []
        for (
          vn = 0; vn < uk.playerEvents.length; vn++
        ) {
          vp.push(uk.playerEvents[vn])
        }
        var vv = {
          dropShadow: true,
          dropShadowDistance: 2,
          dropShadowBlur: 4,
          dropShadowAlpha: 0.2,
          fontSize: 30,
          fill: 14737632,
        }
        if (0 < vp.length) {
          vp.sort(function(vw, vx) {
            return vw.completed && !vx.completed ? 1 : -1
          })
          for (
            vn = vu = 0; vn < vp.length; vn++
          ) {
            va = (vo = vp[vn]).completed ?
              '[Выполнено]' :
              '[Активно]'
            vo.completed ||
              ((vb = new PIXI.Text(va, {
                  dropShadow: true,
                  dropShadowDistance: 2,
                  dropShadowBlur: 4,
                  dropShadowAlpha: 0.2,
                  fontSize: 30,
                  fill: vo.completed ? 14737632 : 16762209,
                })).position.set(0, vu),
                vh.addChild(vb))
            va = vo.completed ?
              va + ' ' :
              '                   ';
            (ux = new PIXI.Text(va + vo.name, {
              dropShadow: true,
              dropShadowDistance: 2,
              dropShadowBlur: 4,
              dropShadowAlpha: 0.2,
              fontSize: 30,
              wordWrap: true,
              wordWrapWidth: 370,
              fill: vo.completed ? 14737632 : 16777215,
            })).position.set(0, vu)
            vh.addChild(ux)
            vu += ux.height + 15
          }
        } else {
          ux = new PIXI.Text('Нет заданий.', vv)
          vh.addChild(ux)
        }
      }
      if (null != uk.tribes && null != uk.tribeRating) {
        for (var vn in uk.tribeRating)
          vc < (uo = uk.tribeRating[vn]) &&
          (vc = uo)
        if (0 < vc) {
          for (
            vn = Game.packet.TRIBE_ALONE; vn <= Game.packet.TRIBE_HOME; vn++
          ) {
            uo = uk.tribeRating[vn]
            ur = uk.tribes[vn]
            0 < uo &&
              ((uq = uo / vc),
                (us = new PIXI.Container()).position.set(
                  0,
                  67 * vd
                ),
                vj.addChild(us),
                (uw = PIXI.Sprite.from(
                  vf['tribe/id' + ur.id + '.png']
                )).anchor.set(0, 0.5),
                uw.scale.set(0.6),
                us.addChild(uw),
                ((uv = PIXI.Sprite.from(
                  vf['progressSkill.png']
                )).width = 270 * uq),
                (uv.tint =
                  ur.id == um ? 10498601 : 15982043),
                uv.anchor.set(0, 0.5),
                uv.position.set(55, 0),
                us.addChild(uv),
                (uu = new PIXI.Text(uo, {
                  fontVariant: 'small-caps',
                  lineHeight: 30,
                  fontSize: 26,
                  align: 'left',
                  fill: ur.id == um || uq <= 0.25 ?
                    16777215 : 10513479,
                  fontWeight: 'bold',
                })).position.set(
                  0.25 < uq ? 55 + 140 * uq : 65 + 270 * uq,
                  1
                ),
                uu.anchor.set(0.25 < uq ? 0.5 : 0, 0.5),
                us.addChild(uu),
                vd++)
          }
        }
      }
      if (0 < un.length) {
        for (vn = 0; vn < un.length; vn++) {
          uj = un[vn];
          (ut = new PIXI.Container()).visible = vn < 1
          vi.addChild(ut);
          (uw = PIXI.Sprite.from(
            vf['tribe/id' + uj.tribe1 + '.png']
          )).anchor.set(0.5)
          uw.position.set(-310, 0)
          ut.addChild(uw);
          (uw = PIXI.Sprite.from(
            vf['tribe/id' + uj.tribe2 + '.png']
          )).anchor.set(0.5)
          uw.position.set(310, 0)
          ut.addChild(uw);
          (uu = new PIXI.Text(uj.pointsTribe1, {
            fontVariant: 'small-caps',
            fontSize: 28,
            align: 'center',
            fill: 16777215,
            fontWeight: 'bold',
          })).position.set(-170, 0)
          uu.anchor.set(0.5)
          ut.addChild(uu);
          (uu = new PIXI.Text(uj.pointsTribe2, {
            fontVariant: 'small-caps',
            fontSize: 28,
            align: 'center',
            fill: 16777215,
            fontWeight: 'bold',
          })).position.set(170, 0)
          uu.anchor.set(0.5)
          ut.addChild(uu);
          (uu = new PIXI.Text('VS', {
            fontVariant: 'small-caps',
            fontSize: 30,
            align: 'center',
            fill: 16777215,
            fontWeight: 'bold',
          })).anchor.set(0.5)
          ut.addChild(uu);
          (uu = new PIXI.Text(
            'Локация: ' + uj.levelName + ' [' + uj.levelId + ']', {
              fontVariant: 'small-caps',
              fontSize: 24,
              align: 'center',
              fill: 16777215,
              fontWeight: 'bold',
            }
          )).position.set(0, 60)
          uu.anchor.set(0.5)
          uu.interactive = true
          uu._levelId = uj.levelId
          uu.on(
            'pointerup',
            function() {
              this.openMap(uu._levelId)
            },
            this
          )
          ut.addChild(uu)
        }
        ve.uiNoteFightTitle.visible = true
      } else {
        ve.uiNoteFightTitle.visible = false
      }
    }
  }
  this.initDialog = function() {
    var vy,
      vz = this.scene,
      wa = Game.resources.ui.textures,
      wb = (vz.listBar = new PIXI.Container()),
      wc = (vz.bgListBar = new PIXI.Sprite(PIXI.Texture.WHITE)),
      wd = {
        fontSize: 18,
        fill: 16777215,
        fontWeight: 'bold',
        align: 'center',
      }
    wc.tint = 0
    wc.alpha = 0.7
    wc.interactive = true
    wb.addChild(wc)
    wc = vz.containerBgListBar = new PIXI.Container()
    wb.addChild(wc);
    (wc = vz.listBarTitle =
      new PIXI.Text('', wd)).anchor.set(0.5)
    wb.addChild(wc);
    (wc = vz.dialogListBar =
      PIXI.Sprite.from('ui/dialog.png')).anchor.set(0.5)
    wb.addChild(wc)
    vy = vz.listBarUis = new PIXI.Container()
    wc.addChild(vy);
    (vy = vz.btnUiNext =
      Game.createButton(wa, 'btnNextText.png')).on(
      'pointerup',
      function() {
        this.nextUiList(1)
      },
      this
    )
    wb.addChild(vy);
    (wc = vz.btnUiBack =
      Game.createButton(wa, 'btnPrevText.png')).on(
      'pointerup',
      function() {
        this.nextUiList(-1)
      },
      this
    )
    wb.addChild(wc);
    (vy = vz.listBarBtnBack =
      Game.createButton(wa, 'btnCloseDialog.png')).on(
      'pointerup',
      function() {
        this.showMainUi()
      },
      this
    )
    wb.addChild(vy)
    wc = vz.listQuestWindow = new PIXI.Container()
    wb.addChild(wc)
    vz.addChild(wb);
    (wc.tint = 0),
    (wc.alpha = 0.7),
    (wc.interactive = true),
    wb.addChild(wc),
      (wc = vz.containerBgListBar = new PIXI.Container()),
      wb.addChild(wc),
      (wc = vz.listBarTitle =
        new PIXI.Text('', wd)).anchor.set(0.5),
      wb.addChild(wc),
      (wc = vz.dialogListBar =
        PIXI.Sprite.from('ui/dialog.png')).anchor.set(0.5),
      wb.addChild(wc),
      (vy = vz.listBarUis = new PIXI.Container()),
      wc.addChild(vy),
      (vy = vz.btnUiNext =
        Game.createButton(wa, 'btnNextText.png')).on(
        'pointerup',
        function() {
          this.nextUiList(1)
        },
        this
      ),
      wb.addChild(vy),
      (wc = vz.btnUiBack =
        Game.createButton(wa, 'btnPrevText.png')).on(
        'pointerup',
        function() {
          this.nextUiList(-1)
        },
        this
      ),
      wb.addChild(wc),
      (vy = vz.listBarBtnBack =
        Game.createButton(wa, 'btnCloseDialog.png')).on(
        'pointerup',
        function() {
          this.showMainUi()
        },
        this
      ),
      wb.addChild(vy),
      (wc = vz.listQuestWindow = new PIXI.Container()),
      wb.addChild(wc),
      vz.addChild(wb)
  }
  this.initProfile = function() {
    var we,
      wf,
      wg = this.scene,
      wh = Game.resources.ui.textures,
      wi = (wg.uiProfile = new PIXI.Container()),
      wj = {
        fontSize: 30,
        align: 'center',
        fill: 15904835,
        fontWeight: 'bold',
      }
    wi.visible = false
    wi.interactive = true
    wg.addChild(wi);
    (we = wg.uiProfileBg =
      new PIXI.Sprite(PIXI.Texture.WHITE)).tint = 0
    we.alpha = 0.7
    wi.addChild(we);
    (we = wg.elProfile =
      PIXI.Sprite.from('ui/profile.png')).anchor.set(0.5)
    we.scale.set(0.5)
    wi.addChild(we);
    (wf = wg.uiProfileCat = new PIXI.Container()).position.set(
      -10,
      35
    )
    we.addChild(wf);
    (wf = wg.uiProfileHealthBar =
      PIXI.Sprite.from(wh['healthBar.png'])).position.set(-152, 111)
    we.addChild(wf);
    (wf = wg.uiProfileHealthText =
      new PIXI.Text('', wj)).anchor.set(0.5)
    wf.position.set(-10, 127)
    we.addChild(wf);
    (wf = wg.uiProfileSkills =
      new PIXI.Container()).position.set(390, -310)
    we.addChild(wf);
    (wf = wg.uiProfileFriendList =
      new PIXI.Container()).position.set(-812, 156)
    we.addChild(wf);
    (wf = wg.uiProfileClassName =
      new PIXI.Text('', wk)).anchor.set(0.5)
    wf.position.set(540, 391)
    we.addChild(wf);
    (wf = wg.uiProfileLunText =
      new PIXI.Text('', wl)).anchor.set(0.5)
    wf.position.set(-10, 340)
    we.addChild(wf);
    (wf = wg.uiProfileStatusName =
      new PIXI.Text('', wm)).anchor.set(0.5)
    wf.position.set(-9, 198)
    we.addChild(wf);
    (wf = wg.uiProfileChilds =
      Game.createScrollText('', wn, 360, 120)).position.set(-815, -200)
    we.addChild(wf);
    (wf = wg.uiProfileParentOne =
      new PIXI.Text('', wo)).anchor.set(0.5)
    wf.position.set(-760, -326)
    we.addChild(wf);
    (wf = wg.uiProfileParentTwo =
      new PIXI.Text('', wp)).anchor.set(0.5)
    wf.position.set(-510, -326)
    we.addChild(wf);
    (wf = wg.uiProfileParentName =
      new PIXI.Text('', wq)).anchor.set(0.5)
    wf.position.set(-636, -238)
    we.addChild(wf);
    (wf = wg.uiProfileNotFriendText =
      new PIXI.Text('Здесь пока что пусто.', wr)).anchor.set(0.5)
    wf.position.set(-634, 410)
    we.addChild(wf);
    (wf = new PIXI.Text('Навыки', ws)).anchor.set(0.5)
    wf.position.set(582, -410)
    we.addChild(wf);
    (wf = new PIXI.Text('Родословная', {
      fontVariant: 'small-caps',
      fontSize: 34,
      align: 'center',
      fill: 15904835,
      fontWeight: 'bold',
    })).anchor.set(0.5)
    wf.position.set(-631, -425)
    we.addChild(wf);
    (wf = new PIXI.Text('Мои котята', {
      fontVariant: 'small-caps',
      fontSize: 24,
      align: 'center',
      fill: 15904835,
      fontWeight: 'bold',
    })).anchor.set(0.5)
    wf.position.set(-636, -57)
    we.addChild(wf);
    (wf = new PIXI.Text('Друзья', {
      fontVariant: 'small-caps',
      fontSize: 34,
      align: 'center',
      fill: 15904835,
      fontWeight: 'bold',
    })).anchor.set(0.5)
    wf.position.set(-655, 49)
    we.addChild(wf);
    (wf = wg.btnFriendPageNext =
      Game.createButton(wh, 'arrowRight.png', true, 1)).on(
      'pointerup',
      function() {
        this.updateFriendList(1)
      },
      this
    )
    wf.position.set(-530, 420)
    we.addChild(wf);
    (wf = wg.btnFriendPagePrev =
      Game.createButton(wh, 'arrowLeft.png', true, 1)).on(
      'pointerup',
      function() {
        this.updateFriendList(-1)
      },
      this
    )
    wf.position.set(-730, 420)
    we.addChild(wf);
    (wf = wg.uiProfileBtnBack =
      Game.createButton(wh, 'btnClose.png')).on(
      'pointerup',
      function() {
        this.showMainUi()
      },
      this
    )
    wi.addChild(wf)
    this.selectedFriendPage = 0
    var wk = {
      fontVariant: 'small-caps',
      fontSize: 32,
      align: 'center',
      fill: 15904835,
      fontWeight: 'bold',
    }
    var wl = {
      fontSize: 28,
      align: 'center',
      fill: 16777215,
      fontWeight: 'bold',
    }
    var wm = {
      fontVariant: 'small-caps',
      wordWrap: true,
      wordWrapWidth: 345,
      fontSize: 32,
      align: 'center',
      fill: 15904835,
      fontWeight: 'bold',
    }
    var wn = {
      fontVariant: 'small-caps',
      fontSize: 24,
      fill: 13412775,
    }
    var wo = {
      fontVariant: 'small-caps',
      wordWrap: true,
      wordWrapWidth: 180,
      fontSize: 26,
      align: 'center',
      fill: 13412775,
    }
    var wp = {
      fontVariant: 'small-caps',
      wordWrap: true,
      wordWrapWidth: 180,
      fontSize: 26,
      align: 'center',
      fill: 13412775,
    }
    var wq = {
      fontVariant: 'small-caps',
      wordWrap: true,
      wordWrapWidth: 380,
      fontSize: 26,
      align: 'center',
      fill: 13412775,
    }
    var wr = {
      fontVariant: 'small-caps',
      fontSize: 26,
      align: 'center',
      fill: 13412775,
    }
    var ws = {
      fontVariant: 'small-caps',
      fontSize: 34,
      align: 'center',
      fill: 15904835,
      fontWeight: 'bold',
    };
    (wi.visible = false),
    (wi.interactive = true),
    wg.addChild(wi),
      ((we = wg.uiProfileBg =
        new PIXI.Sprite(PIXI.Texture.WHITE)).tint = 0),
      (we.alpha = 0.7),
      wi.addChild(we),
      (we = wg.elProfile =
        PIXI.Sprite.from('ui/profile.png')).anchor.set(0.5),
      we.scale.set(0.5),
      wi.addChild(we),
      (wf = wg.uiProfileCat = new PIXI.Container()).position.set(
        -10,
        35
      ),
      we.addChild(wf),
      (wf = wg.uiProfileHealthBar =
        PIXI.Sprite.from(wh['healthBar.png'])).position.set(-152, 111),
      we.addChild(wf),
      (wf = wg.uiProfileHealthText =
        new PIXI.Text('', wj)).anchor.set(0.5),
      wf.position.set(-10, 127),
      we.addChild(wf),
      (wf = wg.uiProfileSkills =
        new PIXI.Container()).position.set(390, -310),
      we.addChild(wf),
      (wf = wg.uiProfileFriendList =
        new PIXI.Container()).position.set(-812, 156),
      we.addChild(wf),
      (wf = wg.uiProfileClassName =
        new PIXI.Text('', wk)).anchor.set(0.5),
      wf.position.set(540, 391),
      we.addChild(wf),
      (wf = wg.uiProfileLunText =
        new PIXI.Text('', wl)).anchor.set(0.5),
      wf.position.set(-10, 340),
      we.addChild(wf),
      (wf = wg.uiProfileStatusName =
        new PIXI.Text('', wm)).anchor.set(0.5),
      wf.position.set(-9, 198),
      we.addChild(wf),
      (wf = wg.uiProfileChilds =
        Game.createScrollText('', wn, 360, 120)).position.set(
        -815,
        -200
      ),
      we.addChild(wf),
      (wf = wg.uiProfileParentOne =
        new PIXI.Text('', wo)).anchor.set(0.5),
      wf.position.set(-760, -326),
      we.addChild(wf),
      (wf = wg.uiProfileParentTwo =
        new PIXI.Text('', wp)).anchor.set(0.5),
      wf.position.set(-510, -326),
      we.addChild(wf),
      (wf = wg.uiProfileParentName =
        new PIXI.Text('', wq)).anchor.set(0.5),
      wf.position.set(-636, -238),
      we.addChild(wf),
      (wf = wg.uiProfileNotFriendText =
        new PIXI.Text('Здесь пока что пусто.', wr)).anchor.set(0.5),
      wf.position.set(-634, 410),
      we.addChild(wf),
      (wf = new PIXI.Text('Навыки', ws)).anchor.set(0.5),
      wf.position.set(582, -410),
      we.addChild(wf),
      (wf = new PIXI.Text('Родословная', {
        fontVariant: 'small-caps',
        fontSize: 34,
        align: 'center',
        fill: 15904835,
        fontWeight: 'bold',
      })).anchor.set(0.5),
      wf.position.set(-631, -425),
      we.addChild(wf),
      (wf = new PIXI.Text('Мои котята', {
        fontVariant: 'small-caps',
        fontSize: 24,
        align: 'center',
        fill: 15904835,
        fontWeight: 'bold',
      })).anchor.set(0.5),
      wf.position.set(-636, -57),
      we.addChild(wf),
      (wf = new PIXI.Text('Друзья', {
        fontVariant: 'small-caps',
        fontSize: 34,
        align: 'center',
        fill: 15904835,
        fontWeight: 'bold',
      })).anchor.set(0.5),
      wf.position.set(-655, 49),
      we.addChild(wf),
      (wf = wg.btnFriendPageNext =
        Game.createButton(wh, 'arrowRight.png', true, 1)).on(
        'pointerup',
        function() {
          this.updateFriendList(1)
        },
        this
      ),
      wf.position.set(-530, 420),
      we.addChild(wf),
      (wf = wg.btnFriendPagePrev =
        Game.createButton(wh, 'arrowLeft.png', true, 1)).on(
        'pointerup',
        function() {
          this.updateFriendList(-1)
        },
        this
      ),
      wf.position.set(-730, 420),
      we.addChild(wf),
      (wf = wg.uiProfileBtnBack =
        Game.createButton(wh, 'btnClose.png')).on(
        'pointerup',
        function() {
          this.showMainUi()
        },
        this
      ),
      wi.addChild(wf),
      (this.selectedFriendPage = 0)
  }
  this.openProfile = function() {
    var wt = this.scene
    null != wt.myPlayer &&
      (this.hideMainUi(),
        (wt.uiProfile.visible = true),
        (wt.uiProfile.alpha = 0),
        wt.elProfile.scale.set(0),
        this.updateProfile(wt.myPlayer))
  }
  this.closeProfile = function() {
    this.scene.uiProfile.visible = false
    this.updateProfile()
  }
  this.updateProfile = function(wu) {
    var wv = {
      children: true
    }
    for (
      var ww,
        wx,
        wy,
        wz,
        xa = this.scene,
        xb = xa.uiProfileSkills,
        xc = xa.uiProfileCat,
        xd = xa.uiProfileChilds.children[0],
        xe = Game.resources.ui.textures,
        xf = 0,
        xg = 0,
        xh = 0,
        xi = 0,
        xj = 0,
        xk = xb.removeChildren(),
        xl = 0; xl < xk.length; xl++
    ) {
      xk[xl].destroy(wv)
    }
    var xm = {
      children: true
    }
    if (
      (0 < xc.children.length &&
        xc.children[0].destroy(xm),
        null != wu &&
        null != (ww = wu.data).name &&
        null != ww.player_id &&
        null != ww.childs &&
        null != ww.name &&
        null != ww.parents &&
        null != ww.tribe &&
        null != ww.birthday &&
        null != ww.status &&
        null != ww.skills &&
        null != ww.selectedClass &&
        null != ww.health &&
        null != ww.maxHealth)
    ) {
      if (
        ((wz = Game.utils.LunCalc(ww.birthday, xa.time)),
          xa.uiProfile.visible)
      ) {
        for (var xn in ww.skills)
          xn == Game.packet.SKILL_SPEED ||
          xn == Game.packet.SKILL_SLEEP ?
          (xg =
            xg > ww.skills[xn] ?
            xg :
            ww.skills[xn]) :
          (xf =
            xf > ww.skills[xn] ?
            xf :
            ww.skills[xn])
        for (var xn in ww.skills)
          (wx = new PIXI.Container()).position.set(0, 76 * xh),
          xb.addChild(wx),
          (wy = PIXI.Sprite.from(
            xe['progressBarSkill.png']
          )).anchor.set(0, 0.5),
          wx.addChild(wy),
          0 < ww.skills[xn] &&
          ((wy = PIXI.Sprite.from(xe['progressSkill.png'])),
            xn == Game.packet.SKILL_SPEED ||
            xn == Game.packet.SKILL_SLEEP ?
            (wy.width *= ww.skills[xn] / xg) :
            (wy.width *= ww.skills[xn] / xf),
            wy.anchor.set(0, 0.5),
            wx.addChild(wy)),
          (wy = new PIXI.Text(
            Game.strings.ru.skills[xn] +
            '\n' +
            ww.skills[xn], {
              fontVariant: 'small-caps',
              lineHeight: 30,
              fontSize: 26,
              align: 'left',
              fill: 13412775,
              fontWeight: 'bold',
            }
          )).position.set(5, -15),
          wy.anchor.set(0, 0.5),
          wx.addChild(wy),
          xh++
        for (var xo in ((xa.uiProfileClassName.text =
              Game.strings.ru.selectedClass[ww.selectedClass]),
            (xa.uiProfileHealthBar.width =
              (292 * ww.health) / ww.maxHealth),
            (xa.uiProfileHealthText.text =
              ww.health + '/' + ww.maxHealth),
            (xa.uiProfileParentName.text =
              ww.name + ' [' + ww.player_id + ']'),
            ww.parents))
          0 < xj ?
          (xa.uiProfileParentTwo.text =
            ww.parents[xo] + ' [' + xo + ']') :
          (xa.uiProfileParentOne.text =
            ww.parents[xo] + ' [' + xo + ']'),
          xj++
        for (var xo in (xj < 1 &&
            ((xa.uiProfileParentOne.text = 'Неизвестно [?]'),
              (xa.uiProfileParentTwo.text = 'Неизвестно [?]')),
            (xa.uiProfileStatusName.text =
              0 < ww.status ?
              Game.strings.ru.status[ww.status] + ' ' + ww.name :
              ww.name),
            (xa.uiProfileLunText.text = wz),
            (xd.text = ''),
            ww.childs))
          0 < xi && (xd.text += ', '),
          (xd.text +=
            ww.childs[xo] + ' [' + xo + ']'),
          xi++
        xi < 1 && (xd.text = 'Здесь пока что пусто.')
        xc.addChild(wu.generateEntity(false))
        0 == xa.uiProfileFriendList.children.length &&
          this.updateFriendList(0)
      } else {
        xa.uiCat.texture = xe[Game.utils.GetUiCat(wz)]
      }
    }
  }
  this.updateFriendList = function(xp) {
    var xq = {
      children: true
    }
    for (
      var xr,
        xs,
        xt,
        xu,
        xv = this.scene,
        xw = xv.uiProfileFriendList,
        xx = Game.resources.ui.textures,
        xy = 0,
        xz = xw.removeChildren(),
        ya = 0; ya < xz.length; ya++
    ) {
      xz[ya].destroy(xq)
    }
    if (
      null != xv.myPlayer &&
      null != xv.myPlayer.data.myFriends &&
      ((xu = xv.myPlayer.data.myFriends),
        (xv.uiProfileNotFriendText.visible = xu.length < 1),
        (xv.btnFriendPageNext.visible = false),
        (xv.btnFriendPagePrev.visible = false),
        !(xu.length < 1))
    ) {
      ;
      ((xp =
          (xp += this.selectedFriendPage) < 0 ?
          Math.ceil(xu.length / 4) - 1 :
          xp) < 0 ||
        xu.length / 4 <= xp) &&
      (xp = 0)
      for (
        ya = 4 * (this.selectedFriendPage = xp); ya < 4 * xp + 4 && !(ya >= xu.length); ya++
      ) {
        xs = xu[ya];
        (xr = new PIXI.Container()).visible = false
        xr.name = '' + xs
        xr.position.set(0, 69 * xy);
        (xt = new PIXI.Text('Загрузка профиля...', {
          fontVariant: 'small-caps',
          fontSize: 26,
          align: 'left',
          fill: 13412775,
          fontWeight: 'bold',
        })).anchor.set(0, 0.5)
        xt.interactive = true
        xt.on(
          'pointerup',
          function() {
            Game.openPlayerInfo(this.name)
          },
          xr
        )
        xw.addChild(xr)
        xr.addChild(xt);
        (xt = Game.createButton(
          xx,
          'btnRemove.png'
        )).position.set(345, 0)
        xt.on(
          'pointerup',
          function() {
            Game.threads.push({
              query: Game.packet.REMOVE_FRIEND,
              id: parseInt(this.name),
            })
          },
          xr
        )
        xr.addChild(xt)
        Game.sendApi('get_player_info/?id=' + xs, function(yb) {
          var yc,
            yd,
            ye = false
          if (null != yb && 'level' == Game.scenes.activeName) {
            if (
              null != (yd = Game.scenes.active).myPlayer &&
              0 < yb.content.length &&
              ((yb = yb.content[0]),
                null !=
                (yc = yd.uiProfileFriendList.getChildByName(
                  '' + yb.player_id
                )) &&
                ((yc.children[0].text =
                    Game.utils.CutStr(yb.name, 13) +
                    ' [' +
                    yb.player_id +
                    ']'),
                  (yc.visible = true)),
                (ye = 1 < yd.myPlayer.data.myFriends.length / 4))
            ) {
              for (
                var yf = 0; yf < yd.uiProfileFriendList.children.length; yf++
              ) {
                if (
                  !yd.uiProfileFriendList.children[yf].visible
                ) {
                  ye = false
                  break
                }
              }
            }
            yd.btnFriendPageNext.visible = ye
            yd.btnFriendPagePrev.visible = ye
          }
        })
        xy++
      }
    }
  }
  this.drawEffects = function(yg) {
    var yh = {
      children: true
    }
    for (
      var yi,
        yj = this.scene,
        yk = yj.effects,
        yl = Game.resources.ui.textures,
        ym = yk.removeChildren(),
        yn = 0; yn < ym.length; yn++
    ) {
      ym[yn].destroy(yh)
    }
    for (
      var yo = 0; yo < yg.data.effects.length; yo++
    ) {
      yi = yg.data.effects[yo];
      (yi = new PIXI.Sprite(
        yl['effects/id' + yi.id + '.png']
      )).anchor.set(0.5, 0)
      yi.scale.set(0.5)
      yi.position.set(
        40 * yo - 20 * yg.data.effects.length + 20,
        0
      )
      yk.addChild(yi)
    }
    yj.resetColor()
  }
  this.drawIndicators = function(yp) {
    var yq = this.scene,
      yr = yq.uiBgDamage,
      yq = yq.uiIdcat_container,
      ys = yp.data.health / yp.data.maxHealth
    yq.children[2].scale.y = 0.5 * ys
    yq.children[4].text = Math.ceil(100 * ys) + '%'
    yq.children[7].scale.y =
      (yp.data.hunger / yp.data.maxHunger) * 0.5
    yq.children[9].text =
      Math.ceil((yp.data.hunger / yp.data.maxHunger) * 100) + '%'
    yq.children[12].scale.y =
      (yp.data.thirst / yp.data.maxThirst) * 0.5
    yq.children[14].text =
      Math.ceil((yp.data.thirst / yp.data.maxThirst) * 100) + '%'
    yq.children[17].scale.y =
      (yp.data.tired / yp.data.maxTired) * 0.5
    yq.children[19].text =
      Math.ceil((yp.data.tired / yp.data.maxTired) * 100) + '%'
    ys <= 0.25 ?
      ((yr.visible = true),
        (yr._maxAlpha = 1 - ys / 0.25)) :
      (yr.visible = false)
  }
  this.initInventory = function() {
    var yt = this.scene,
      yu = Game.resources.ui.textures,
      yv = (yt.inventory = new PIXI.Container()),
      yw =
      ((yv.visible = false),
        (yv.interactive = true),
        yt.addChild(yv),
        (yt.inventoryBg = new PIXI.Sprite(PIXI.Texture.WHITE))),
      yw =
      ((yw.tint = 0),
        (yw.alpha = 0.7),
        yv.addChild(yw),
        (yt.elInventory = PIXI.Sprite.from('ui/inventory.png'))),
      yx =
      (yw.anchor.set(0.5),
        yv.addChild(yw),
        (yt.inventoryToMap = Game.createButton(
          yu,
          'btnMap.png',
          true,
          1
        ))),
      yx =
      (yx.position.set(-267, 195),
        yx.on(
          'pointerup',
          function() {
            this.openMap()
          },
          this
        ),
        yw.addChild(yx),
        (yt.btnUseItem = Game.createButton(
          yu,
          'button3.png',
          true,
          1.2
        ))),
      yy = new PIXI.Text('Использовать', {
        fontVariant: 'small-caps',
        fontSize: 22,
        fill: 16433761,
        fontWeight: 'bold',
      }),
      yy =
      (yy.anchor.set(0.5),
        yy.position.set(0, -1),
        yx.addChild(yy),
        yx.position.set(193, 236),
        yx.on('pointerup', function() {
          Game.threads.push({
            query: Game.packet.ENTITY_INTERACT,
            interactId: Game.packet.INTERACT_USE_ITEM_INVENTORY,
            indexId: Game.scenes.active.selectedIndexItem,
          })
        }),
        yw.addChild(yx),
        (yt.btnDropItem = Game.createButton(
          yu,
          'btnDrop.png',
          true,
          1
        ))),
      yx =
      (yy.position.set(332, 236),
        yy.on('pointerup', function() {
          Game.threads.push({
            query: Game.packet.ENTITY_INTERACT,
            interactId: Game.packet.INTERACT_REMOVE_ITEM_INVENTORY,
            indexId: Game.scenes.active.selectedIndexItem,
          })
        }),
        yw.addChild(yy),
        (yt.itemPreviewInventory = new PIXI.Sprite(PIXI.Texture.WHITE))),
      yy =
      ((yx.width = 150),
        (yx.height = 150),
        yx.anchor.set(0.5),
        yx.position.set(230, -121),
        yw.addChild(yx),
        (yt.itemNameInventory = new PIXI.Text('', {
          fontVariant: 'small-caps',
          fontSize: 36,
          fill: 15587141,
          align: 'center',
          fontWeight: 'bold',
          wordWrap: true,
          wordWrapWidth: 440,
        }))),
      yx =
      (yy.anchor.set(0.5),
        yy.position.set(232, 69),
        yw.addChild(yy),
        (yt.itemDescriptionInventory = new PIXI.Text('', {
          fontVariant: 'small-caps',
          fontSize: 22,
          fill: 16777215,
          align: 'center',
          wordWrap: true,
          wordWrapWidth: 440,
        }))),
      yy =
      (yx.anchor.set(0.5),
        yx.position.set(235, 160),
        yw.addChild(yx),
        (yt.itemsInventory = new PIXI.Container())),
      yx =
      (yy.position.set(-417, -145),
        yw.addChild(yy),
        (yt.inventoryBtnBack = Game.createButton(
          yu,
          'btnClose.png'
        )))
    yx.on(
      'pointerup',
      function() {
        this.showMainUi()
      },
      this
    )
    yv.addChild(yx)
    yt.selectedIndexItem = 0
  }
  this.openInventory = function(yz) {
    var za,
      zb = this.scene,
      zc = zb.itemsInventory,
      zd = zb.itemNameInventory,
      ze = zb.itemPreviewInventory,
      zf = zb.itemDescriptionInventory,
      zg = zb.btnUseItem,
      zh = zb.btnDropItem,
      zi = Game.resources.items.textures
    yz = yz || 0
    zb.inventory.visible ||
      (this.hideMainUi(),
        (zb.inventory.visible = true),
        zb.elInventory.scale.set(0),
        (zb.itemsInventory.alpha = 0),
        (zb.inventory.alpha = 0))
    for (
      var zj = 0; zj < zc.children.length; zj++
    ) {
      zc.children[zj].children[0].visible = false
    }
    zc.children.length > yz &&
      (zc.children[yz].children[0].visible = true)
    null != zb.myPlayer &&
      zb.myPlayer.data.inventory.list.length > yz ?
      ((za = zb.myPlayer.data.inventory.list[yz]),
        (ze.visible = true),
        (zg.visible = true),
        (zh.visible = true),
        (ze.texture = zi['id' + za.id + '.png']),
        (zd.text = za.name),
        null != Game.strings.ru.items_description[za.id] ?
        (zf.text = Game.strings.ru.items_description[za.id]) :
        (zf.text = '...')) :
      ((ze.visible = false),
        (zg.visible = false),
        (zh.visible = false),
        (zd.text = '???'),
        (zf.text =
          'Выберите предмет, чтобы им воспользоваться или выбросить.'))
    zb.selectedIndexItem = yz
  }
  this.updateInventory = function() {
    var zk = {
      children: true
    }
    for (
      var zl,
        zm,
        zn,
        zo = Game.resources.ui.textures,
        zp = Game.resources.items.textures,
        zq = this.scene.itemsInventory,
        zr = zq.removeChildren(),
        zs = 0; zs < zr.length; zs++
    ) {
      zr[zs].destroy(zk)
    }
    if (null != sj.myPlayer) {
      for (
        zs = 0; zs < sj.myPlayer.data.inventory.list.length; zs++
      ) {
        zn = sj.myPlayer.data.inventory.list[zs];
        (zl = new PIXI.Container()).name = zs;
        (zm = new PIXI.Sprite(
          zo['bgItem' + zs + '.png']
        )).anchor.set(0.5)
        zm.position.set(0, 2 < zs ? -6 : 6)
        zm.visible = false
        zl.addChild(zm);
        (zm = Game.createButton(
          zp,
          'id' + zn.id + '.png',
          true,
          1
        )).interactive = true
        zm.buttonMode = true
        zm.on(
          'pointerup',
          function() {
            Game.scenes.active.levelUi.openInventory(this.name)
          },
          zl
        )
        zl.position.set(
          2 < zs ? 152 * (zs - 3) : 152 * zs,
          2 < zs ? 165 : 0
        )
        zl.addChild(zm)
        zq.addChild(zl)
      }
      sj.inventory.visible && this.openInventory()
    }
  }
  this.initSetClass = function() {
    var zt = this.scene,
      zu = Game.resources.ui.textures,
      zv = (zt.selectClassMenu = new PIXI.Container()),
      zt =
      ((zv.interactive = true),
        (zv.visible = false),
        (zv.alpha = 0),
        zt.addChild(zv),
        PIXI.Sprite.from('ui/backgrounds/menu_settings.png')),
      zt =
      (zv.addChild(zt),
        new PIXI.Text('', {
          fontSize: 18,
          fill: 16777215,
          fontWeight: 'bold',
        })),
      zt =
      (zt.anchor.set(0.5),
        zv.addChild(zt),
        Game.createButton(zu, 'buttonBack.png'))
    zt.on(
      'pointerup',
      function() {
        this.showSetClass('')
      },
      this
    )
    zv.addChild(zt)
    zv.addChild(new PIXI.Container())
  }
  this.showSetClass = function(zw) {
    var zx,
      zy,
      zz,
      aaa,
      aab = this.scene,
      aac = Game.resources.ui.textures,
      aad = aab.selectClassMenu.children[1],
      aae = aab.selectClassMenu.children[2],
      aaf = aab.selectClassMenu.children[3]
    switch (((aae.visible = true), this.hideSetClass(), zw)) {
      case 'page0_0':
        return void Game.send({
          query: Game.packet.SET_CLASS,
          skillSpeed: 60,
          skillSleep: 40,
        })
      case 'page0_1':
        return void Game.send({
          query: Game.packet.SET_CLASS,
          skillSpeed: 70,
          skillSleep: 30,
        })
      case 'page0_2':
        return void Game.send({
          query: Game.packet.SET_CLASS,
          skillSpeed: 80,
          skillSleep: 20,
        })
      case 'page1_0':
        return void Game.send({
          query: Game.packet.SET_CLASS,
          skillSpeed: 50,
          skillSleep: 50,
        })
      case 'page2_0':
        return void Game.send({
          query: Game.packet.SET_CLASS,
          skillSpeed: 40,
          skillSleep: 60,
        })
      case 'page2_1':
        return void Game.send({
          query: Game.packet.SET_CLASS,
          skillSpeed: 30,
          skillSleep: 70,
        })
      case 'page2_2':
        return void Game.send({
          query: Game.packet.SET_CLASS,
          skillSpeed: 20,
          skillSleep: 80,
        })
      case 'page0':
        ;
        (aaa = [
          'Выбрать класс:\n\n+10 ловкость\n-10 выносливость',
          'Выбрать класс:\n\n+20 ловкость\n-20 выносливость',
          'Выбрать класс:\n\n+30 ловкость\n-30 выносливость',
        ]),
        (aad.text = 'Ловкий'),
        (zw = '0_')
        break
      case 'page1':
        ;
        (aaa = ['Выбрать класс:\n\n50 ловкость\n50 выносливость']),
        (aad.text = 'Обычный'),
        (zw = '1_')
        break
      case 'page2':
        ;
        (aaa = [
          'Выбрать класс:\n\n+10 выносливость\n-10 ловкость',
          'Выбрать класс:\n\n+20 выносливость\n-20 ловкость',
          'Выбрать класс:\n\n+30 выносливость\n-30 ловкость',
        ]),
        (aad.text = 'Крепкий'),
        (zw = '2_')
        break
      default:
        ;
        (aaa = [
          'Ловкий\n\nБолее гибкое и приспособленное к изворотам телосложение.',
          'Обычный\n\nСтандартное телосложение.',
          'Крепкий\n\nБолее крепкое и выносливое телосложение.',
        ]),
        (aad.text = 'Выберите класс'),
        (aae.visible = false)
    }
    var aag = {
      dropShadow: true,
      dropShadowDistance: 1,
      dropShadowAlpha: 0.2,
      wordWrap: true,
      wordWrapWidth: 180,
      fontSize: 16,
      fill: 16777215,
      align: 'center',
    }
    for (var aah = 0; aah < aaa.length; aah++) {
      ;
      (zx = new PIXI.Sprite(aac['bgClass.png'])).name =
        'page' + zw + aah
      zx.anchor.set(0.5)
      zx.position.set(
        1 < aaa.length ? 185 * aah - 190 : 0,
        0
      )
      zx.interactive = true
      zx.buttonMode = true
      zx.on(
        'pointerup',
        function() {
          'level' == Game.scenes.activeName &&
            Game.scenes.active.levelUi.showSetClass(this.name)
        },
        zx
      )
      zx.on(
        'pointerout',
        function() {
          this.alpha = 1
        },
        zx
      )
      zx.on(
        'pointerover',
        function() {
          this.alpha = 0.5
        },
        zx
      );
      (zz = new PIXI.Text(aaa[aah], aag)).anchor.set(
        0.5
      )
      '' == zw &&
        (zz.position.set(0, 60),
          (zy = new PIXI.Sprite(
            aac['class' + aah + '.png']
          )).anchor.set(0.5),
          zy.scale.set(0.5),
          zy.position.set(0, -60),
          zx.addChild(zy))
      zx.addChild(zz)
      aaf.addChild(zx)
    }
    aab.selectClassMenu.visible = true
  }
  this.hideSetClass = function() {
    var aai = {
      children: true
    }
    for (
      var aaj = this.scene,
        aak = aaj.selectClassMenu.children[3].removeChildren(),
        aal = 0; aal < aak.length; aal++
    ) {
      aak[aal].destroy(aai)
    }
    aaj.selectClassMenu.visible = false
  }
  this.showUiList = function() {
    this.hideMainUi()
    this.scene.listBar.visible = true
    this.nextUiList(0)
  }
  this.hideMainUi = function(aam) {
    var aan = this.scene
    aan.uiContainer.visible = false
    aan.map.visible = false
    aan.inventory.visible = false
    aan.listBar.visible = false
    aan.bottomActionBar.visible = false
    aan.uiBgHiddenMenu.visible = false
    aan.uiBgAnimMenu.visible = false
    aan.uiBgAnimMenu.scale.set(0.5)
    aam
      ?
      (aan.notifications.visible = false) :
      aan.notifications.position.set(0, 0)
    this.closeNote()
    this.closeProfile()
    Game.hideInteractPage()
    Game.audio.stopRecord()
  }
  this.showMainUi = function() {
    for (
      var aao = this.scene,
        aap =
        (this.hideMainUi(),
          (aao.uiContainer.visible = true),
          (aao.notifications.visible = true),
          aao.notifications.position.set(70, 92),
          this.clearAllUiList(),
          Game.closeClPage(),
          aao.mapLevels.removeChildren()),
        aaq = 0; aaq < aap.length; aaq++
    ) {
      aap[aaq].destroy()
    }
    aao.mapLines.clear()
  }
  this.resize = function(aar, aas) {
    var aat = this.scene,
      aau =
      null != document.fullscreenElement ||
      null != document.mozFullscreenElement ||
      null != document.webkitFullscreenElement
    aat.effects.position.set(aar / 2, 4)
    aat.uiEye.position.set(aar / 2, 121)
    aat.textPlayerTitle.position.set(aar / 2, aas / 2)
    aat.achievementBg.width = aar
    aat.achievementBg.height = aas
    aat.achievementSprite.position.set(aar / 2, aas / 2 + 5)
    aat.achievementTitle.position.set(aar / 2, aas / 2 + 15)
    aat.achievementText.position.set(aar / 2, aas / 2 + 45)
    aat.bgBottomActionBar.width = aar
    aat.bgBottomActionBar.height = aas
    aat.uiBottomActionBar.position.set(aar / 2, aas - 35)
    aat.textBottomActionBar.position.set(aar / 2, aas - 35)
    aat.cancelTextBottomActionBar.position.set(aar / 2, 10)
    aat.particlesBottomActionBar.position.set(
      aar / 2,
      aas / 2
    )
    aat.inventoryBg.width = aar
    aat.inventoryBg.height = aas
    610 < aar && 310 < aas ?
      aat.inventoryBtnBack.position.set(
        aar / 2 + 283,
        aas / 2 - 132
      ) :
      aat.inventoryBtnBack.position.set(aar - 23, 23)
    aat.elInventory.position.set(aar / 2, aas / 2)
    aat.bgListBar.width = aar
    aat.bgListBar.height = aas
    aat.containerBgListBar.position.set(aar / 2, aas / 2)
    aat.dialogListBar.scale.set(
      Game.calcMaxScale(aat.dialogListBar)
    )
    aat.dialogListBar.position.set(aar / 2, aas - 120)
    1010 < aar && 210 < aas ?
      aat.listBarBtnBack.position.set(
        aar / 2 + 485,
        aas - 145
      ) :
      aat.listBarBtnBack.position.set(aar - 23, 23)
    aat.listQuestWindow.position.set(aar / 2, aas / 2)
    aat.listBarTitle.position.set(aar / 2, 23)
    aat.btnUiBack.position.set(aar / 2 - 23, aas - 25)
    aat.btnUiNext.position.set(aar / 2 + 23, aas - 25)
    aat.uiNoteBackground.width = aar
    aat.uiNoteBackground.height = aas
    aat.uiNoteWindow.scale.set(Game.calcMaxScale(aat.uiNoteWindow))
    aat.uiNoteWindow.position.set(0.5 * aar, 0.5 * aas)
    960 < aar && 490 < aas ?
      aat.uiNoteBtnClose.position.set(
        0.5 * aar + 465,
        0.5 * aas - 245 + 45
      ) :
      aat.uiNoteBtnClose.position.set(aar - 23, 23)
    aat.uiBgAnimMenu.position.set(aar - 38, 2)
    aat.uiBgHiddenMenu.position.set(aar - 38, 0)
    aat.textHourTimeBar.position.set(aar / 2, 185)
    aat.floatNotifications.position.set(142, aas - 52)
    aat.uiBgMenu.position.set(aar - 38, 0)
    aat.btnHome.position.set(aar - 39, 28)
    aat.btnMap.position.set(aar - 39, 75)
    aat.btnInventory.position.set(aar - 39, 122)
    aat.btnMode.position.set(aar - 38, 215)
    aat.btnMode.visible = 340 < aas
    aat.btnAudio.position.set(aar - 38, 262)
    aat.btnAudio.visible = 1 == Game.setAudioBar && 392 < aas
    aat.btnFull.visible = 'browser' == Game.platform && !aau
    aat.btnFull.visible &&
      (aat.btnFull.position.set(aar / 2, 23),
        aat.effects.position.set(aar / 2, 49))
    aat.uiBtnActionHit.position.set(aar - 38, aas - 38)
    aat.uiBtnActionChange.position.set(aar - 20, aas - 95)
    aat.uiBtnActionDig.position.set(aar - 65, aas - 90)
    aat.uiBtnActionNose.position.set(aar - 90, aas - 65)
    aat.uiBtnActionUse.position.set(aar - 95, aas - 20)
    Game.calcBackground(aat.selectClassMenu.children[0])
    aat.selectClassMenu.children[1].position.set(aar / 2, 22)
    aat.selectClassMenu.children[2].position.set(22, 22)
    aat.selectClassMenu.children[3].position.set(
      aar / 2,
      aas / 2
    )
    aat.uiProfileBg.width = aar
    aat.uiProfileBg.height = aas
    1020 < aar && 500 < aas ?
      aat.uiProfileBtnBack.position.set(
        aar / 2 + 485,
        aas / 2 - 219
      ) :
      aat.uiProfileBtnBack.position.set(aar - 23, 23)
    aat.elProfile.position.set(aar / 2, aas / 2)
    aat.mapLoad.position.set(aar / 2, aas / 2)
    aat.mapBtnBack.position.set(aar - 23, 23)
    aat.map.visible && this.openMap()
  }
  this.playAchievement = function(aav) {
    var aaw = this.scene,
      aax = PIXI.sound.find('sounds/levelup.mp3'),
      aay = new PIXI.particles.Emitter(aaw.achievementParticles),
      aaz = {
        start: 0.5,
        end: 1,
      }
    aay.init(
      PIXI.particles.upgradeConfig({
          alpha: aaz,
          scale: aba,
          speed: abb,
          color: abc,
          acceleration: {
            x: 0,
            y: Game.app.screen.height / 2,
          },
          maxSpeed: 0,
          startRotation: abd,
          noRotation: true,
          rotationSpeed: abe,
          lifetime: abf,
          blendMode: 'normal',
          frequency: 0.0001,
          emitterLifetime: 0.1,
          maxParticles: 250,
          pos: {
            x: Game.app.screen.width / 2,
            y: Game.app.screen.height,
          },
          addAtBack: false,
          spawnType: 'point',
        },
        [PIXI.Texture.from('environment/particle.png')]
      )
    )
    aay.playOnceAndDestroy()
    null != aax &&
      ((aax.volume = Game.setMaxVolumeSounds), aax.play())
    aaw.achievementText.text = Game.strings.ru.achievements[aav]
    aaw.achievementSprite.texture = PIXI.Texture.from(
      'ui/achievements/id' + aav + '.png'
    )
    aaw.achievementContainer.visible = true
    aaw.achievementContainer.alpha = 1
    aaw.tickAchievement = 4000
    var aba = {
      start: 0.25,
      end: 0.5,
      minimumScaleMultiplier: 1,
    }
    var abb = {
      start: 150,
      end: 25,
      minimumSpeedMultiplier: 5,
    }
    var abc = {
      start: '#f9d71c',
      end: '#f9d71c',
    }
    var abd = {
      min: 0,
      max: -180,
    }
    var abe = {
      min: 0,
      max: 0,
    }
    var abf = {
      min: 1,
      max: 5,
    }
    aay.init(
        PIXI.particles.upgradeConfig({
            alpha: aaz,
            scale: aba,
            speed: abb,
            color: abc,
            acceleration: {
              x: 0,
              y: Game.app.screen.height / 2,
            },
            maxSpeed: 0,
            startRotation: abd,
            noRotation: true,
            rotationSpeed: abe,
            lifetime: abf,
            blendMode: 'normal',
            frequency: 0.0001,
            emitterLifetime: 0.1,
            maxParticles: 250,
            pos: {
              x: Game.app.screen.width / 2,
              y: Game.app.screen.height,
            },
            addAtBack: false,
            spawnType: 'point',
          },
          [PIXI.Texture.from('environment/particle.png')]
        )
      ),
      aay.playOnceAndDestroy(),
      null != aax &&
      ((aax.volume = Game.setMaxVolumeSounds), aax.play()),
      (aaw.achievementText.text =
        Game.strings.ru.achievements[aav]),
      (aaw.achievementSprite.texture = PIXI.Texture.from(
        'ui/achievements/id' + aav + '.png'
      )),
      (aaw.achievementContainer.visible = true),
      (aaw.achievementContainer.alpha = 1),
      (aaw.tickAchievement = 4000)
  }
  this.updateFights = function(abg) {
    var abh = this.scene
    null != abg && (abh.dataFights = abg)
    this.updateNote()
  }
  this.updatePlayerTitle = function(abi) {
    var abj = this.scene,
      abi =
      ((abj.textPlayerTitle.text = abi),
        (abj.textPlayerTitle.alhpa = 1),
        (abj.tickPlayerTitle = 5000),
        PIXI.sound.find('sounds/blow.mp3'))
    abi.volume = Game.setMaxVolumeSounds
    abi.play()
  }
  this.updateEye = function(abk) {
    for (
      var abl,
        abm = this.scene,
        abn = false,
        abo = false,
        abp = false,
        abq = Game.resources.ui.textures,
        abr = 0; abr < abm.entities.children.length; abr++
    ) {
      if (
        null != (abl = abm.entities.children[abr]).data &&
        'cat' != abl.data.entity_id &&
        abl.data.isAggressive &&
        ((abn = true),
          null != abm.myPlayer &&
          null != abl.data.radiusAttack &&
          Math.abs(abm.myPlayer.x - abl.x) <
          abl.data.radiusAttack &&
          (abp = true),
          abl.data.canAttack)
      ) {
        abo = true
        break
      }
    }
    abo
      ?
      ((abm.uiEye.texture = abq['eye2.png']),
        abk &&
        (((abk = PIXI.sound.find('sounds/alert.mp3')).volume =
            Game.setMaxVolumeSounds),
          abk.play())) :
      (abm.uiEye.texture = abp ?
        abq['eye1.png'] :
        abq['eye0.png'])
    abm.uiEye.visible = abn
    abm.ambientCanAttack = abp
  }
  this.updateMap = function(abt) {
    var abu = this.scene,
      abv = Game.resources.ui.textures,
      abw = Game.resources['levels/preview'].textures,
      abx = abu.mapCamera
    if (!(0 < abu.mapLevels.children.length)) {
      abx.setZoom(0.8)
      abx.moveCenter(abx.worldWidth / 2, abx.worldHeight / 2)
      abu.mapCamera.alpha = 0
      abu.mapLoad.visible = false
      for (
        var aby, abz, aca = 0; aca < abt.length; aca++
      ) {
        var acb = abt[aca],
          acc = new PIXI.Container(),
          acd =
          ((acc.name = acb.id),
            acc.position.set(acb.x, acb.y),
            -1 < Game.lastSeenLevel.indexOf(acb.id + '')),
          ace =
          abu.levelData.id == acb.id ||
          abu.levelData.dubLevelId == acb.id,
          acf = acb.name + ' [' + acb.id + ']',
          acg =
          (ace && (acf += '\n(ВЫ ЗДЕСЬ)'),
            new PIXI.Sprite(PIXI.Texture.WHITE)),
          ach =
          (acg.anchor.set(0.5),
            (acg.width = 100),
            (acg.height = 70),
            (acg.tint = acd ? 7051000 : 8421504),
            acc.addChild(acg),
            new PIXI.Sprite(abw[acb.texture + '.png'])),
          ach =
          (ach.anchor.set(0.5),
            (ach.width = 100),
            (ach.height = 70),
            (ach.tint = acd ? 16777215 : 8421504),
            acc.addChild(ach),
            new PIXI.Sprite(
              abv[ace ? 'frame_click.png' : 'frame.png']
            )),
          ach =
          (ach.anchor.set(0.5),
            (ach.width = 100),
            (ach.height = 70),
            acc.addChild(ach),
            new PIXI.Sprite(PIXI.Texture.WHITE)),
          acd =
          ((ach.alpha = 0.5),
            ach.anchor.set(0.5, 0),
            ach.position.set(0, acg.height / 2 + 4),
            (ach.tint = 0),
            (ach.visible = acd),
            acc.addChild(ach),
            new PIXI.Text(acd ? acf : '???', {
              fontVariant: 'small-caps',
              fontSize: 14,
              align: 'center',
              fontWeight: 'bold',
              fill: acb.color,
              lineHeight: 20,
            }))
        acd.anchor.set(0.5, 0)
        acd.position.set(0, acg.height / 2 + 5)
        acc.addChild(acd)
        ach.width = acd.width + 4
        ach.height = acd.height;
        (ace =
          null != this.selectedLevelId ?
          this.selectedLevelId == acb.id :
          ace) && abx.moveCenter(acc.x, acc.y)
        abu.mapLevels.addChild(acc)
      }
      for (
        var aci = abu.mapLines, aca = 0; aca < abt.length; aca++
      ) {
        if (
          ((acb = abt[aca]),
            null !=
            (abz = abu.mapLevels.getChildByName(acb.id)))
        ) {
          for (
            var acj = 0; acj < acb.childLevels.length; acj++
          ) {
            null !=
              (aby = abu.mapLevels.getChildByName(
                acb.childLevels[acj]
              )) &&
              (aci.lineStyle(1, 16777215, 0.2),
                aci.moveTo(abz.x, abz.y),
                aci.lineTo(aby.x, aby.y))
          }
        }
      }
    }
  }
  this.updateAction = function(ack, acl) {
    var acm,
      acn,
      aco = this.scene,
      acp = aco.bottomActionBar,
      acq = aco.uiBottomActionBar,
      acr = aco.textBottomActionBar,
      aco = aco.particlesBottomActionBar
    if (null == acl || acl.id != ack.id) {
      var acs = {
        children: true
      }
      for (
        var act = aco.removeChildren(), acu = 0; acu < act.length; acu++
      ) {
        act[acu].destroy(acs)
      }
      acq.scale.set(0)
      ack.id == Game.packet.ACTION_CAR ?
        ((acn = PIXI.Sprite.from('ui/dialogs/car.png')).anchor.set(0.5),
          acn.scale.set(0.5),
          aco.addChild(acn),
          (acm = PIXI.sound.find('sounds/car.mp3'))) :
        ack.id == Game.packet.ACTION_DIRT ?
        ((acn = PIXI.Sprite.from('ui/dialogs/dirt.png')).anchor.set(
            0.5
          ),
          acn.scale.set(0.5),
          aco.addChild(acn),
          (acm = PIXI.sound.find('sounds/water4.mp3'))) :
        ack.id == Game.packet.ACTION_OUTCAST ?
        ((acn =
            0.5 < Math.random() ?
            PIXI.Sprite.from('ui/dialogs/home_m.png') :
            PIXI.Sprite.from('ui/dialogs/home_f.png')).anchor.set(0.5),
          acn.scale.set(0.5),
          aco.addChild(acn),
          (acm = PIXI.sound.find('sounds/hit.mp3'))) :
        ack.id == Game.packet.ACTION_SWIM && null != acl ?
        ((Game.sceneConfig = ack),
          (Game.nextSceneName = 0.5 < Math.random() ? 'swimtwo' : 'swim'),
          Game.safeServerClose()) :
        ack.id == Game.packet.ACTION_CLIMB &&
        null != acl &&
        ((Game.sceneConfig = ack),
          (Game.nextSceneName = 'apple'),
          Game.safeServerClose())
      acm &&
        ((acm.volume = Game.setMaxVolumeSounds), acm.play())
    }
    0 < ack.duration ?
      (this.hideMainUi(),
        (acp.visible = true),
        (acr.text = ack.name),
        (acr.text +=
          ' (' +
          Game.utils.GetTimerString(ack.duration - ack.stopTime) +
          ')')) :
      acp.visible && this.showMainUi()
  }
  this.openMap = function(acv) {
    var acw = this.scene
    this.hideMainUi()
    acw.map.visible = true
    acw.mapLoad.visible = true
    this.selectedLevelId = acv
    Game.threads.push({
      query: Game.packet.UPDATE_MAP
    })
  }
  this.initMap = function() {
    var acx = {
      worldWidth: 12448,
      worldHeight: 32586,
    }
    var acy = {
      minScale: 0.5,
      maxScale: 1.1,
    }
    var acz = this.scene,
      ada = Game.resources.ui.textures,
      adb = (acz.map = new PIXI.Container()),
      adc =
      ((adb.visible = false),
        acz.addChild(adb),
        (acz.mapBg = new PIXI.Sprite(PIXI.Texture.WHITE))),
      adc =
      ((adc.tint = 0),
        (adc.alpha = 0.5),
        adb.addChild(adc),
        (acz.mapLoad = new PIXI.Sprite(
          PIXI.Texture.from('ui/load.png')
        ))),
      adc =
      (adc.scale.set(0.5),
        adc.anchor.set(0.5),
        adb.addChild(adc),
        (acz.mapCamera = new Viewport.Viewport(acx))),
      ade =
      (adc
        .clamp({
          left: false,
          right: false,
          top: false,
          bottom: false,
          direction: 'all',
          underflow: 'center',
        })
        .clampZoom(acy)
        .drag()
        .decelerate()
        .wheel(),
        adb.addChild(adc),
        (acz.mapLines = new PIXI.Graphics())),
      ade =
      (adc.addChild(ade),
        (acz.mapLevels = new PIXI.Container())),
      ade =
      (adc.addChild(ade),
        (acz.tickAlpha = 0),
        (acz.mapBtnBack = Game.createButton(ada, 'btnClose.png')))
    ade.on(
      'pointerup',
      function() {
        this.showMainUi()
      },
      this
    )
    adb.addChild(ade)
  }
  this.addFloatNotice = function(adf) {
    var adg,
      adh,
      adi = this.scene.floatNotifications,
      adj = Game.resources.ui.textures
    if (0 < adi.children.length) {
      for (
        var adk = 0; adk < adi.children.length; adk++
      ) {
        ;
        (adh = adi.children[adk]).children[1].text ==
          adf && (adh.tickNotice = 0)
      }
    };
    (adg = new PIXI.Container()).visible = adi.children.length < 1
    adg.buttonMode = true
    adg.interactive = true
    adg.tickNotice = 10000
    adg.on('pointerup', function() {
      this.tickNotice = 0
    })
    adg.on('pointerover', function() {
      this.tickNotice = 3000 < this.tickNotice ? this.tickNotice : 3000
    })
    adi.addChild(adg);
    (adj = PIXI.Sprite.from(adj['float.png'])).scale.set(0.9)
    adj.anchor.set(0.5)
    adg.addChild(adj);
    (adj = new PIXI.Text(adf, {
      fontSize: 14,
      align: 'center',
      fill: 16777215,
      wordWrap: true,
      wordWrapWidth: 260,
    })).anchor.set(0.5)
    adj.position.set(0, -20)
    adg.addChild(adj)
    Game.playSound('help.mp3', 5000)
  }
  this.addNotice = function(adl, adm) {
    var adn,
      ado,
      adp = 0,
      adq = this.scene.notifications,
      adr = adl.substring(0, 160)
    if (
      (adr.length != adl.length && (adr += '(...)'),
        0 < adq.children.length)
    ) {
      for (
        var ads = 0; ads < adq.children.length; ads++
      ) {
        ;
        (ado = adq.children[ads]).getChildAt(1).text ==
          adr && ado.destroy(true)
      }
    }
    if (4 < adq.children.length) {
      for (
        var adt = adq.removeChildren(0, 1), adu = 0; adu < adt.length; adu++
      ) {
        adt[adu].destroy(true)
      }
    }
    0 < adl.length &&
      ((adn = new PIXI.Container()),
        adq.addChild(adn),
        (adl = new PIXI.Text(adr, {
          fontSize: 14,
          fill: 16777215,
          wordWrap: true,
          wordWrapWidth: Game.app.screen.width / 2,
          breakWords: true,
        })).position.set(5, 5),
        null != adm && (adl.style.fill = adm),
        ((bgNotice = new PIXI.Sprite(PIXI.Texture.WHITE)).tint = 0),
        (bgNotice.alpha = 0.5),
        (bgNotice.width = adl.width + 10),
        (bgNotice.height = adl.height + 10),
        adn.addChild(bgNotice),
        (adn.tickNotice = 6500),
        adn.addChild(adl))
    for (ads = 0; ads < adq.children.length; ads++) {
      adn = adq.children[ads]
      bgNotice = adn.getChildAt(0)
      adn.position.set(0, adp)
      adp += bgNotice.height
    }
  }
  this.showPauseMenu = function() {
    for (
      var adv,
        adw = this.scene,
        adx = '<table class="cl-table-entities"><tr><td>',
        ady =
        ((adx =
            (adx =
              (adx +=
                '<div onclick="Game.nextSceneName=\'cat\';Game.safeServerClose();" class="cl-li-light" style="background: no-repeat url(\'' +
                Game.versionCode +
                '/ui/button.png\'); background-size: 100% 100%;">Редактор персонажа</div><br>') +
              ("<div onclick=\"Game.scenes.active.levelUi.hideMainUi(); Game.openClPage('Справка по игре', '" +
                Game.serverStaticContent +
                'help.html\');" class="cl-li-light" style="background: no-repeat url(\'' +
                Game.versionCode +
                '/ui/button.png\'); background-size: 100% 100%;">Справка по игре</div><br>')) +
            ('<div onclick="Game.safeServerClose();" class="cl-li-light" style="background: no-repeat url(\'' +
              Game.versionCode +
              '/ui/button.png\'); background-size: 100% 100%;">Выйти в главное меню</div>')),
          ''),
        adz = '',
        aea = [],
        aeb = 0; aeb < adw.entities.children.length; aeb++
    ) {
      null != (aec = adw.entities.children[aeb]).data &&
        'cat' == aec.data.entity_id &&
        null != aec.data.player_id &&
        null != aec.data.visible &&
        aec.data.visible &&
        ((adz +=
            '<div style="position: relative; margin-top: 10px;"><div class="cl-li-dark" style="padding-right: 46px;">[' +
            aec.data.player_id +
            '] ' +
            aec.data.name +
            '</div><img onclick="Game.knockPlayer(\'Жалоба на ' +
            aec.data.name +
            ' [' +
            aec.data.player_id +
            "]', " +
            aec.data.player_id +
            ');" class="cl-li-menu-icon" src="' +
            Game.versionCode +
            '/ui/uiFlagIcon.png"></div>'),
          aea.push(aec.data.player_id))
    }
    for (adv in ((adx +=
          '</td><td><b>Локация: ' +
          adw.levelData.name +
          '</b><br>' +
          adz),
        0 == adz.length && (adx += '<br><br>Пусто.<br>'),
        adw.historyJoinPlayers)) {
      var aec = adw.historyJoinPlayers[adv]; - 1 == aea.indexOf(aec.player_id) &&
        (ady +=
          '<div style="position: relative; margin-top: 10px;"><div class="cl-li-dark disabled" style="padding-right: 46px;">[' +
          aec.player_id +
          '] ' +
          aec.name +
          '</div><img onclick="Game.knockPlayer(\'Жалоба на ' +
          aec.name +
          ' [' +
          aec.player_id +
          "]', " +
          aec.player_id +
          ');" class="cl-li-menu-icon" src="' +
          Game.versionCode +
          '/ui/uiFlagIcon.png"></div>')
    }
    1 < ady.length &&
      (adx += '<br><b>Недавно вышедшие:</b>' + ady)
    adx += '</td></tr></table>'
    this.hideMainUi()
    Game.openClPage(
      '',
      '',
      function(aed) {
        aed.innerHTML = adx
      },
      ''
    )
  }
  this.showListEntityInteracts = function(aee) {
    var aef,
      aeg,
      aeh,
      aei,
      aej,
      aek = this.scene,
      ael = [],
      aem = 0,
      aen = 0
    if (null != aek.myPlayer) {
      for (
        var aeo = aek.myPlayer, aep = 0; aep < aek.entities.children.length; aep++
      ) {
        null == (aeg = aek.entities.children[aep]) ||
          null == aeg.data ||
          aeg.data.id == aeo.data.id ||
          aeg.data.interacts.length <= 0 ||
          !aeg.visible ||
          ((aei = Game.utils.Distance(
              aeo.data.x,
              aeo.data.y,
              aeg.data.x,
              aeg.data.y
            )) < 200 &&
            ((aen += aeg._dPlayer = aei),
              aem++,
              ael.push(aeg)))
      }
      if (
        ((aen /= aem),
          ael.sort(function(aeq, aer) {
            return aeq._dPlayer - aer._dPlayer
          }),
          ael.splice(20),
          0 < ael.length)
      ) {
        var aet = {
          children: true
        }
        for (
          var aeu,
            aev,
            aew = '<table class="cl-table-entities"><tr><td>',
            aex = '',
            aep = 0; aep < ael.length; aep++
        ) {
          aex +=
            '<div onclick="Game.scenes.active.levelUi.showListEntityInteracts(\'' +
            (aej = ael[aep]).data.id +
            '\');" class="cl-li-dark' +
            (aej._dPlayer < 200 ? '' : ' disabled') +
            '">'
          Game.isWebGLSupported &&
            null != (sprite = aej.getEntityPreview()) &&
            ((aex +=
                '<img class="cl-entities-preview" src="' +
                Game.app.renderer.extract.base64(sprite) +
                '">'),
              sprite.destroy(aet))
          null != aej.data.status &&
            0 < aej.data.status &&
            (aex += Game.strings.ru.status[aej.data.status] + ': ')
          'item' == aej.data.entity_id ||
            'bag' == aej.data.entity_id ?
            (aex += 'Предмет: ') :
            'portal' == aej.data.entity_id && (aex += 'Портал: ')
          aex += aej.data.name
          null != aej.data.player_id &&
            (aex += ' [' + aej.data.player_id + ']');
          ((null != aee && aej.data.id == aee) ||
            (null == aee && 0 == aep)) &&
          ((aef = aej), (aex += ' (Выбрано)'))
          aex += '</div>'
        }
        if (null == aef) {
          this.showListEntityInteracts()
        } else {
          if (
            (aef._dPlayer < 0.45 * aen ||
              1 == ael.length) &&
            1 == aef.data.interacts.length
          ) {
            this.showMainUi()
            Game.threads.push({
              query: Game.packet.ENTITY_INTERACT,
              interactId: aef.data.interacts[0],
              targetId: aef.data.id,
            })
          } else {
            if (
              ((aew += '<b>' + aef.data.name),
                null != aef.data.duration &&
                (0 == aef.data.currentStage ?
                  (aew += ' (Готово к сбору)') :
                  aek.time <
                  aef.data.startGameTime + aef.data.duration ?
                  (aew +=
                    ' (' +
                    Math.ceil(
                      ((aek.time - aef.data.startGameTime) /
                        aef.data.duration) *
                      100
                    ) +
                    '%)') :
                  (aew += ' (<100%)')),
                null != aef.data.player_id &&
                (aew += ' [' + aef.data.player_id + ']'),
                (aew = aew + '</b>' + '<br><br>'),
                null != aef.data.interacts)
            ) {
              for (
                aep = 0; aep < aef.data.interacts.length; aep++
              ) {
                aeh = aef.data.interacts[aep]
                aew +=
                  '<div class="cl-li-light" onclick="Game.scenes.active.levelUi.showMainUi();Game.threads.push({query:' +
                  Game.packet.ENTITY_INTERACT +
                  ',interactId:' +
                  aeh +
                  ",targetId:'" +
                  aef.data.id +
                  '\'});">' +
                  Game.strings.ru.interactNames[aeh] +
                  '</div>'
              }
            }
            if (
              (null != aef.data.status &&
                (aew =
                  (aew += '<br><br><b>Информация</b>') +
                  '<br>Должность: ' +
                  Game.strings.ru.status[aef.data.status]),
                null != aef.data.tribe &&
                null != aef.data.tribe.color &&
                ((aeu = PIXI.utils.hex2string(
                    aef.data.tribe.color
                  )),
                  (aew +=
                    '<br>Запах: <span style="background:' +
                    aeu +
                    ';color:' +
                    aeu +
                    ';">_____</span>')),
                null != aef.data.birthday &&
                ((aeu = Game.utils.LunCalc(
                    aef.data.birthday,
                    aek.time
                  )),
                  (aew +=
                    '<br>Возраст: ' +
                    (aeu = 999 < aeu ? '>999' : aeu) +
                    ' лун(ы)')),
                null != aef.data.selectedClass &&
                (aew =
                  (aew += '<br>Выбранный класс: ') +
                  ('' != aef.data.selectedClass ?
                    Game.strings.ru.selectedClass[
                      aef.data.selectedClass
                    ] :
                    'отсутствует')),
                null != aef.data.username &&
                '' != aef.data.username &&
                ((aew += '<br>Аккаунт: ' + aef.data.username),
                  null == aef.data.sleep ||
                  aef.data.sleep ||
                  (aew +=
                    ' (<a target="_blank" href="https://forums.worldcats.ru/u/' +
                    aef.data.username +
                    '/private">Переписки</a>)')),
                null != aef.data.skills)
            ) {
              for (var aey in ((aew += '<br><br><b>Навыки</b>'),
                  aef.data.skills))
                aew +=
                '<br>' +
                Game.strings.ru.skills[aey] +
                ': ' +
                aef.data.skills[aey]
            }
            if (
              null != aef.data.parents &&
              0 < Object.keys(aef.data.parents).length
            ) {
              for (var aez in ((aew += '<br><br><b>Родители:</b>'),
                  aef.data.parents))
                null != (aev = aef.data.parents[aez]) &&
                (aew += '<br>' + aev + ' [' + aez + ']')
            }
            if (
              null != aef.data.childs &&
              0 < Object.keys(aef.data.childs).length
            ) {
              for (var aez in ((aew += '<br><br><b>Дети:</b>'),
                  aef.data.childs))
                null != (aev = aef.data.childs[aez]) &&
                (aew += '<br>' + aev + ' [' + aez + ']')
            }
            aew +=
              '</td><td><b>Список ближайших целей:</b>' +
              aex +
              '</td></tr></table>'
            this.hideMainUi()
            Game.openClPage(
              aef.data.name,
              '',
              function(afa) {
                afa.innerHTML = aew
              },
              ''
            )
          }
        }
      } else {
        this.showMainUi()
        this.addNotice('Нет цели')
      }
    }
  }
  this.nextUiList = function(afb) {
    var afc,
      afd,
      afe = this.scene
    if (0 < afe.listBarUis.children.length) {
      afe.dialogListBar.visible = true
      afe.listBarTitle.visible = false
      afe.listQuestWindow.visible = false
      afe.btnUiNext.visible = true
      afe.listBarBtnBack.visible = true
      for (
        var aff = 0; aff < afe.listBarUis.children.length; aff++
      ) {
        if ((afd = afe.listBarUis.children[aff]).visible) {
          if (0 != afb) {
            for (
              var afg = 0; afg < afd.children.length; afg++
            ) {
              if (
                null !=
                (afc = afd.children[afg])._animText &&
                afc.text.length != afc._animText.length
              ) {
                return void(afc.text = afc._animText)
              }
            }
          }
          null != afe.listBarUis.children[aff + afb] ?
            ((afd.visible = false),
              (afe.listBarUis.children[aff + afb].visible =
                true),
              (afe.btnUiBack.visible = 0 < aff + afb),
              this.updateUiList(),
              Game.resizeToWindow()) :
            (this.clearUiList(), this.nextUiList(0))
          break
        }
      }
    } else {
      0 < afe.listQuestWindow.children.length ?
        ((afe.dialogListBar.visible = false),
          (afe.listBarTitle.visible = true),
          (afe.listQuestWindow.visible = true),
          (afe.btnUiBack.visible = false),
          (afe.btnUiNext.visible = false),
          (afe.listBarBtnBack.visible = false)) :
        this.showMainUi()
    }
    this.showEntityUiList()
  }
  this.updateUiList = function() {
    for (
      var afh, afi = this.scene, afj = 0; afj < afi.listBarUis.children.length; afj++
    ) {
      ;
      (winContainer = afi.listBarUis.children[afj]).visible &&
        null != (afh = winContainer.getChildByName('background')) &&
        (this.clearUiList(true),
          winContainer.removeChild(afh),
          (afh.visible = true),
          afi.containerBgListBar.addChild(afh))
    }
  }
  this.clearUiList = function(afk) {
    var afl = {
      children: true
    }
    if (!afk) {
      for (
        var afm = sj.listBarUis.removeChildren(), afn = 0; afn < afm.length; afn++
      ) {
        afm[afn].destroy(afl)
      }
    }
    afm = sj.containerBgListBar.removeChildren()
    var afo = {
      children: true
    }
    for (afn = 0; afn < afm.length; afn++) {
      afm[afn].destroy(
        'background' == afm[afn].name || afo
      )
    }
  }
  this.showEntityUiList = function(afp) {
    var afq,
      afr,
      afs,
      aft = this.scene,
      afu = aft.listBarUis
    if (null != afp) {
      for (
        var afv = 0; afv < afu.children.length; afv++
      ) {
        if ((afr = afu.children[afv]).visible) {
          if (
            ((afq = aft.findEntity(afp)),
              (afr = afr.getChildByName(afp)),
              null != afq && null != afr)
          ) {
            var afw = {
              children: true
            }
            for (
              var afx = afr.removeChildren(), afy = 0; afy < afx.length; afy++
            ) {
              afx[afy].destroy(afw)
            };
            (afs = afq.generateEntity(false)).scale.set(
              2 * am.DATA_DEFAULT_SIZE[afq.data.entity_id]
            )
            afs.position.set(0, 0.5 * afs.height)
            afr.addChild(afs)
          }
          break
        }
      }
    } else {
      for (
        afv = 0; afv < aft.entities.children.length; afv++
      ) {
        null != (afq = aft.entities.children[afv]).data &&
          this.showEntityUiList(afq.data.id)
      }
    }
  }
  this.clearAllUiList = function() {
    var afz = {
      children: true
    }
    for (
      var aga = sj.listQuestWindow.removeChildren(), agb = 0; agb < aga.length; agb++
    ) {
      aga[agb].destroy(afz)
    }
    this.clearUiList()
  }
  this.createUiList = function(agc) {
    var agd = this.scene.listBarUis,
      age = Game.resources.ui.textures,
      agf = new PIXI.Container(),
      agg = new PIXI.Container(),
      agh = agc.indexOf('@'); - 1 < agh &&
      0 <
      (agh = agc.slice(
        agh + 1,
        agc.indexOf(' ', agh)
      )).length &&
      ((agc = agc.replace('@' + agh + ' ', '')),
        (agg.name = agh),
        (agh = new PIXI.Sprite(age['dialogMask.png'])).position.set(
          611,
          -107
        ),
        agf.addChild(agh),
        agg.position.set(754, 30),
        (agg.mask = agh),
        agf.addChild(agg)); - 1 < (age = agc.indexOf('#')) &&
      ((agh = agc.slice(
          age + 1,
          agc.indexOf(' ', age)
        )),
        (agc = agc.replace('#' + agh + ' ', '')),
        ((agg = PIXI.Sprite.from(
          Game.versionCode + '/ui/dialogs/' + agh + '.png'
        )).name = 'background'),
        (agg.visible = false),
        agg.anchor.set(0.5),
        (agg.alpha = 0),
        agg.texture.baseTexture.on(
          'loaded',
          function() {
            this.scale.set(Game.calcMaxScale(this, 1))
          },
          agg
        ),
        agf.addChild(agg))
    0 < agd.children.length && (agf.visible = false);
    (age = new PIXI.Text('', {
      fontSize: 32,
      fill: 4008995,
      stroke: 8214856,
      strokeThickness: 1,
      fontWeight: 'bold',
      wordWrap: true,
      wordWrapWidth: 1346,
      align: 'left',
    }))._animText = agc
    age.position.set(-814, -60)
    agf.addChild(age)
    agd.addChild(agf)
    this.showUiList()
  }
  this.createQuestWindow = function(agi) {
    var agj = {
      fontSize: 16,
      fill: 16777215,
      fontWeight: 'bold',
    }
    for (
      var agk,
        agl,
        agm = this.scene,
        agn = agi[0],
        ago = new PIXI.Container(),
        agp = 0; agp < agn.options.length; agp++
    ) {
      agl = Game.createButton();
      (agk = new PIXI.Text(
        agn.options[agp],
        agj
      )).anchor.set(0.5)
      agl._window_id = 0
      agl._option_id = agp
      agl.on(
        'pointerover',
        function() {
          this.children[0].style.fill = 15027200
          this.children[0].style.fontSize = 18
        },
        agl
      )
      agl.on(
        'pointerout',
        function() {
          this.children[0].style.fill = 16777215
          this.children[0].style.fontSize = 16
        },
        agl
      )
      agl.on(
        'pointerup',
        function() {
          'level' == Game.scenes.activeName &&
            Game.scenes.active.levelUi.showMainUi()
          Game.threads.push({
            query: Game.packet.QUEST_WINDOW,
            window_id: this._window_id,
            option_id: this._option_id,
          })
        },
        agl
      )
      agl.addChild(agk)
      agl.position.set(0, 41 * agp - 10 * agn.options.length)
      ago.addChild(agl)
    }
    agm.listBarTitle.text = agn.name
    agm.listQuestWindow.addChild(ago)
    this.showUiList()
  }
}

function agq() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var agr = (this.bg = PIXI.Sprite.from('ui/backgrounds/load.png')),
      agr = (this.addChild(agr), new PIXI.Container()),
      agr =
      ((this.emitFlame = new PIXI.particles.Emitter(agr)),
        this.addChild(agr),
        (this.ambientLight = new PIXI.Sprite(PIXI.Texture.WHITE))),
      agr =
      ((agr.blendMode = PIXI.BLEND_MODES.MULTIPLY),
        this.addChild(agr),
        (this.backgroundTime = new PIXI.Sprite(PIXI.Texture.WHITE))),
      agr =
      ((agr.tint = 0),
        this.addChild(agr),
        (this.progressBar = new PIXI.Sprite(PIXI.Texture.WHITE))),
      agr =
      ((agr.height = 100),
        (agr.alpha = 0.5),
        (agr.tint = 0),
        this.addChild(agr),
        (this.progress = new PIXI.Sprite(PIXI.Texture.WHITE))),
      agr =
      ((agr.height = 3),
        (agr.tint = 16566398),
        this.addChild(agr),
        (this.quoteText = new PIXI.Text(
          '\u201E' +
          agq.quotes[
            Math.floor(new Date().getTime() / 21600000) %
            agq.quotes.length
          ] +
          '\u201C', {
            fill: 16777215,
            fontSize: 16,
            align: 'center',
            wordWrap: true,
            wordWrapWidth: Game.app.screen.width - 100,
            fontVariant: 'small-caps',
          }
        ))),
      agr =
      (agr.anchor.set(0.5),
        this.addChild(agr),
        (this.textProgress = new PIXI.Text('', {
          fontSize: 12,
          fill: 16777215,
          fontVariant: 'small-caps',
        }))),
      ags =
      (agr.anchor.set(1),
        this.addChild(agr),
        (this.loader = PIXI.Loader.shared))
    ags.onComplete.add(function() {
      this.countErrors = 0
      Game.sceneConfig = this.currentConfig
      Game.unloadLoader(ags)
      Game.goToScene(this.currentConfig.nextScene)
    }, this)
    ags.onError.add(function() {
      var agt = this
      this.countErrors < 3 &&
        (ags.reset(),
          setTimeout(function() {
            agt.start()
          }, 3000))
      this.countErrors++
    }, this)
    ags.onProgress.add(function() {
      var agu = (ags.progress * Game.app.screen.width) / 100
      agu > this.progress.width && (this.progress.width = agu)
      this.textProgress.text =
        'Загрузка... ' + Math.ceil(ags.progress) + '%'
    }, this)
  }
  this.start = function() {
    for (
      var agv,
        agw,
        agx = (this.currentConfig = Game.getSceneConfig()),
        agy =
        null != this.month ?
        null != (agy = Game.myStorage.get('month')) ?
        agy :
        5 :
        new Date().getMonth(),
        agz =
        ((this.month = agy),
          (this.bg.texture = PIXI.Texture.from(
            agy < 11 && 1 < agy ?
            'ui/backgrounds/load.png' :
            'ui/backgrounds/load_winter.png'
          )),
          null != agx.color ?
          ((this.ambientLight.tint = agx.color),
            (this.ambientLight.alpha = agx.brightness),
            (this.backgroundTime.alpha = 1 - agx.brightness)) :
          ((this.ambientLight.tint = 16777215),
            (this.ambientLight.alpha = 1),
            (this.backgroundTime.alpha = 0)),
          (this.progress.width = 0),
          (this.textProgress.text = 'Ожидание подключения...'),
          this.loader),
        aha = (this.countErrors = 0); aha < agx.list.length; aha += 2
    ) {
      agv = agx.list[aha]; - 1 < (agw = agx.list[aha + 1]).indexOf('://') ?
        agz.add(agv, agw) :
        Game.isCordova ?
        agz.add(agv, Game.versionCode + '/' + agw) :
        agz.add(
          agv,
          Game.serverStaticContent + Game.versionCode + '/' + agw
        )
    }
    agz.load()
    1 != Game.setMusic ||
      (null != Game.currentMusic && Game.currentMusic.isPlaying) ||
      Game.playMusic('menu')
    Game.resizeToWindow()
  }
  this.stop = function() {
    this.loader.reset()
  }
  this.resize = function(ahb, ahc) {
    var ahd = this.bg
    Game.calcBackground(ahd)
    this.progressBar.width = ahb
    this.progressBar.height = ahc
    this.progressBar.position.set(0, ahc - 100)
    this.progress.position.set(0, ahc - 100)
    this.textProgress.position.set(ahb - 10, ahc - 10)
    this.quoteText.position.set(ahb / 2, ahc - 50)
    this.ambientLight.width = ahb
    this.ambientLight.height = ahc
    this.backgroundTime.width = ahb
    this.backgroundTime.height = ahc
    var ahd = this.month,
      ahe = this.emitFlame,
      ahd =
      10 < ahd || ahd < 2 ? ['environment/particle.png'] :
      10 == ahd ? ['environment/leaf2.png', 'environment/leaf3.png'] :
      9 == ahd ? ['environment/leaf2.png', 'environment/leaf1.png'] :
      8 == ahd ? ['environment/leaf1.png', 'environment/leaf.png'] : ['environment/leaf.png']
    var ahf = {}
    ahf.x = 0
    ahf.y = 0
    var ahg = {}
    ahg.value = 0.1
    ahg.time = 0
    var ahh = {}
    ahh.value = 0.5
    ahh.time = 1
    var ahi = {
      list: [ahg, ahh],
    }
    var ahj = {
      alpha: ahi
    }
    var ahk = {}
    ahk.value = 0.25
    ahk.time = 0
    var ahl = {}
    ahl.value = 0.35
    ahl.time = 1
    var ahm = {
      list: [ahk, ahl],
    }
    var ahn = {}
    ahn.scale = ahm
    ahn.minMult = 1
    var aho = {}
    aho.value = 100
    aho.time = 0
    var ahp = {}
    ahp.value = 150
    ahp.time = 1
    var ahq = {
      list: [aho, ahp],
    }
    var ahr = {}
    ahr.speed = ahq
    ahr.minMult = 1
    var ahs = {
      textures: ahd
    }
    var aht = {}
    aht.minStart = 40
    aht.maxStart = 55
    aht.minSpeed = 30
    aht.maxSpeed = 45
    ahe.init({
        lifetime: {
          min: 0.017 * ahc,
          max: 0.017 * ahc,
        },
        frequency: 0.1,
        spawnChance: 1,
        particlesPerWave: 1,
        emitterLifetime: -1,
        maxParticles: 100,
        pos: ahf,
        addAtBack: false,
        behaviors: [{
            type: 'alpha',
            config: ahj,
          },
          {
            type: 'scale',
            config: ahn,
          },
          {
            type: 'moveSpeed',
            config: ahr,
          },
          {
            type: 'spawnShape',
            config: {
              type: 'rect',
              data: {
                x: -ahb,
                y: -10,
                w: 2 * ahb,
                h: 0,
              },
            },
          },
          {
            type: 'textureRandom',
            config: ahs,
          },
          {
            type: 'rotation',
            config: aht,
          },
        ],
      }),
      (ahe.autoUpdate = true),
      ahe.update(10)
  }
}

function ahu() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var ahv = {
      fontSize: 12,
      fill: 16777215,
      fontWeight: 'bold',
    }
    var ahw = {
      fontSize: 14,
      fill: 16777215,
      fontWeight: 'bold',
    }
    var ahx = Game.resources.ui.textures,
      ahy = (this.bg = new PIXI.Sprite(PIXI.Texture.WHITE)),
      ahy = (this.addChild(ahy), (this.ui = new PIXI.Container())),
      ahz =
      (this.addChild(ahy),
        (this.textInfo = new PIXI.Text('', ahv))),
      ahz =
      (ahz.anchor.set(0.5, 0),
        ahy.addChild(ahz),
        (this.timeoutGetOnlinePlayers = null),
        (this.textLicense = Game.createTextButton(
          'Пользовательское соглашение',
          ahw
        ))),
      ahz =
      (ahz.on('pointerup', function() {
          Game.openWeb('https://worldcats.ru/legal.html')
        }),
        ahy.addChild(ahz),
        (this.textPrivacy = Game.createTextButton('Конфиденциальность', {
          fontSize: 14,
          fill: 16777215,
          fontWeight: 'bold',
        }))),
      ahz =
      (ahz.on('pointerup', function() {
          Game.openWeb('https://worldcats.ru/privacypolicy.html')
        }),
        ahy.addChild(ahz),
        (this.btnLogout = Game.createButton(ahx, 'buttonLogout.png'))),
      ahz =
      (ahz.on(
          'pointerup',
          function() {
            Game.logout()
            this.stop()
            this.start()
          },
          this
        ),
        ahy.addChild(ahz),
        (this.btnHelp = Game.createButton(ahx, 'uiBtnHelp.png', false))),
      ahz =
      (ahz.on(
          'pointerup',
          function() {
            Game.openClPage(
              'Справка по игре',
              Game.serverStaticContent + 'help.html'
            )
          },
          this
        ),
        ahy.addChild(ahz),
        (this.textAuth = Game.createTextButton('Войти по логину и паролю', {
          fontVariant: 'small-caps',
          fontSize: 14,
          fill: 15092736,
          fontWeight: 'bold',
        }))),
      ahz =
      ((ahz.visible = false),
        ahz.on(
          'pointerup',
          function() {
            this.openAuthForm()
          },
          this
        ),
        (this.btnLogin = Game.createButton(ahx, 'button.png'))),
      ahx = (this.textLogin = new PIXI.Text('', {
        fontVariant: 'small-caps',
        fontSize: Game.btnFontSize,
        fill: 16777215,
        fontWeight: 'bold',
      }))
    ahx.anchor.set(0.5)
    ahz.addChild(ahx)
    ahz.on(
      'pointerup',
      function() {
        null != Game.token ?
          Game.goToScene('tribe') :
          (Game.auth(), Game.isCordova || (this.textAuth.visible = true))
      },
      this
    )
    ahy.addChild(ahz)
  }
  this.start = function() {
    var aia = new Date().getMonth()
    this.bg.texture = PIXI.Texture.from(
      aia < 11 && 1 < aia ?
      'ui/backgrounds/load.png' :
      'ui/backgrounds/load_winter.png'
    )
    this.textInfo.text = ''
    this.ui.visible = true
    null != Game.token ?
      ((this.textLogin.text = 'Войти в игру'),
        (this.btnLogout.visible = true),
        (this.textAuth.visible = false),
        (this.textInfo.text = 'Подключение к серверу...'),
        Game.getCountOnlinePlayers(true),
        (this.timeoutGetOnlinePlayers = setInterval(function() {
          Game.getCountOnlinePlayers()
        }, 30000))) :
      ((this.textLogin.text = 'Войти в аккаунт'),
        (this.btnLogout.visible = false))
    this.btnHelp.visible = !this.btnLogout.visible
    Game.isCordova ||
      ((this.ui.visible = false),
        setTimeout(function() {
          'login' == Game.scenes.activeName &&
            (Game.scenes.active.ui.visible = true)
        }, 2000),
        Game.showInteractPage(
          '<iframe id="iframeNews" src="https://play.worldcats.ru/updates.php?sub=' +
          Game.setSub +
          '" hidden="true">'
        ))
    Game.resizeToWindow()
  }
  this.openAuthForm = function() {
    var aib = document.createElement('div'),
      aic = document.createElement('form'),
      aid = document.createElement('input'),
      aie = document.createElement('input'),
      aif = document.createElement('input'),
      aig = document.createElement('span')
    aib.className = 'cl-bl'
    aig.textContent = 'Пожалуйста, подождите...'
    aig.hidden = true
    aib.appendChild(aig)
    aid.name = 'login'
    aid.placeholder = 'Введите имя пользователя или e-mail'
    aid.type = 'text'
    aic.appendChild(aid)
    aie.name = 'password'
    aie.placeholder = 'Введите пароль'
    aie.type = 'password'
    aic.appendChild(aie)
    aif.value = 'Войти'
    aif.type = 'submit'
    aic.appendChild(aif)
    aic.className = 'cl-form-auth'
    aic.addEventListener(
      'submit',
      function(aih) {
        var aii = new XMLHttpRequest()
        aih.preventDefault()
        aii.open('POST', 'http://localhost:3000/api/login', true)
        aii.setRequestHeader('Content-Type', 'application/json')
        aii.setRequestHeader('X-Custom-String', Game.getCustomString())
        aii.onload = aii.onerror = function() {
          if (
            ((aic.hidden = false),
              (aig.hidden = true),
              200 == this.status)
          ) {
            var aij
            try {
              aij = JSON.parse(this.responseText)
            } catch (aik) {
              aij = {}
            }
            null != aij.token && '' != aij.token ?
              (aic.reset(), Game.closeClPage()) :
              alert(
                'Введен неверный логин или пароль.',
                null,
                'Произошла ошибка',
                'Ок'
              )
          } else {
            alert('Не удалось войти в аккаунт.', null, 'Произошла ошибка', 'Ок')
          }
        }
        try {
          var ail = {
            login: aid.value,
            password: aie.value,
          }
          aii.send(ail)
        } catch (aim) {}
        aic.hidden = true
        aig.hidden = false
      },
      false
    )
    aib.appendChild(aic)
    Game.openClPage(
      'Авторизация (только для зарегистрированных)',
      '',
      function(ain) {
        ain.appendChild(aib)
      }
    )
  }
  this.onLoadNews = function() {
    this.ui.visible = true
    document.getElementById('iframeNews').hidden = false
  }
  this.stop = function() {
    clearInterval(this.timeoutGetOnlinePlayers)
    Game.hideInteractPage()
  }
  this.resize = function(aio, aip) {
    var aiq = 0,
      air = 0
    Game.isCordova ||
      (700 < aio ?
        (aiq = aio / 4) :
        (air = aip / 4))
    Game.calcBackground(this.bg)
    this.textInfo.position.set(0.5 * aio + aiq, 5)
    this.btnLogin.position.set(
      0.5 * aio + aiq,
      0.5 * aip - air
    )
    this.btnLogout.position.set(aio - 22, 22)
    this.textAuth.position.set(
      0.5 * aio + aiq,
      0.5 * aip + 55 - air
    )
    this.btnHelp.position.set(aio - 22, 22)
    this.textLicense.position.set(
      0.5 * aio + aiq - 88,
      aip - 2 * air - 24
    )
    this.textPrivacy.position.set(
      0.5 * aio + aiq + 119,
      aip - 2 * air - 24
    )
  }
}

function ais() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var ait = Game.resources.ui.textures,
      aiu =
      (this.addChild(new PIXI.display.Layer(PIXI.lights.diffuseGroup)),
        this.addChild(new PIXI.display.Layer(PIXI.lights.normalGroup)),
        this.addChild(new PIXI.display.Layer(PIXI.lights.lightGroup)),
        new PIXI.lights.AmbientLight(16777215, 1)),
      aiu =
      ((this.ambientLight = aiu),
        this.addChild(aiu),
        (this.camera = new Viewport.Viewport())),
      aiv =
      ((this.timeCamera = 0),
        this.addChild(aiu),
        (this.dirLight = new PIXI.lights.PointLight(16627731, 2))),
      aiv =
      (aiv.position.set(820, 240),
        (this.timeLight = 0),
        (this.timeSnowLight = 0),
        aiu.addChild(aiv),
        (this.bg = Game.createPair(
          'ui/backgrounds/menu.png',
          'ui/none_n.png'
        ))),
      aiv =
      (aiu.addChild(aiv),
        (this.theme = ais.THEME_DEFAULT),
        (this.cat = new PIXI.Container())),
      aiv =
      (aiv.position.set(858, 412),
        (aiv.interactive = true),
        (aiv.hitArea = new PIXI.Rectangle(-100, -100, 200, 145)),
        aiv.on('pointerover', function() {
          1 < this.children.length &&
            (this.children[0].alpha = this.children[1].alpha = 1)
        }),
        aiv.on('pointerout', function() {
          1 < this.children.length &&
            (this.children[0].alpha = this.children[1].alpha = 0.5)
        }),
        aiv.on('pointerup', function() {
          Game.goToScene('cat')
        }),
        aiu.addChild(aiv),
        new PIXI.ParticleContainer()),
      aiu =
      ((this.emitFlame = new PIXI.particles.Emitter(aiv)),
        (aiv.parentGroup = PIXI.lights.diffuseGroup),
        this.addChild(aiv),
        (this.textVersion = new PIXI.Text('', {
          fontVariant: 'small-caps',
          fontSize: 12,
          fill: 16777215,
          align: 'right',
          fontWeight: 'bold',
        }))),
      aiv =
      (aiu.anchor.set(1),
        (aiu.interactive = true),
        aiu.on(
          'pointerup',
          function() {
            this.ui.visible &&
              (this.countClicks++, 5 <= this.countClicks) &&
              Game.goToScene('hidden')
          },
          this
        ),
        (this.countClicks = 0),
        this.addChild(aiu),
        (this.ui = new PIXI.Container())),
      aiu =
      (this.addChild(aiv),
        (this.logo = new PIXI.Sprite(ait['logo.png']))),
      aiu =
      (aiu.anchor.set(0.5),
        aiv.addChild(aiu),
        (this.btnSet = Game.createButton(ait, 'button.png'))),
      aiw = new PIXI.Text('Настройки', {
        fontVariant: 'small-caps',
        fontSize: Game.btnFontSize,
        fill: 16777215,
        fontWeight: 'bold',
      }),
      aiw =
      (aiw.anchor.set(0.5),
        aiu.addChild(aiw),
        aiu.on(
          'pointerup',
          function() {
            this.openSettings()
          },
          this
        ),
        aiv.addChild(aiu),
        (this.btnInfo = Game.createButton(ait, 'buttonInfo.png'))),
      aiu =
      (aiw.on('pointerup', function() {
          Game.openClPage(
            'Справка по игре',
            Game.serverStaticContent + 'help.html'
          )
        }),
        aiv.addChild(aiw),
        (this.btnLeader = Game.createButton(ait, 'buttonAchiev.png'))),
      aiw =
      (aiu.on('pointerup', function() {
          Game.openLeader()
        }),
        aiv.addChild(aiu),
        (this.btnStar = Game.createButton(ait, 'buttonStar.png'))),
      aiu =
      (aiw.on('pointerup', function() {
          Game.openClPage(
            'Поддержать проект',
            Game.serverStaticContent + 'telegram.html'
          )
        }),
        aiv.addChild(aiw),
        (this.btnInfo_f = Game.createButton(ait, 'button.png'))),
      aiw = new PIXI.Text('Справка по игре', {
        fontVariant: 'small-caps',
        fontSize: Game.btnFontSize,
        fill: 16777215,
        fontWeight: 'bold',
      }),
      aiw =
      (aiw.anchor.set(0.5),
        aiu.addChild(aiw),
        aiu.on('pointerup', function() {
          Game.openClPage(
            'Справка по игре',
            Game.serverStaticContent + 'help.html'
          )
        }),
        aiv.addChild(aiu),
        (this.btnAchiev = Game.createButton(ait, 'button.png'))),
      aiu = new PIXI.Text('Мои достижения', {
        fontVariant: 'small-caps',
        fontSize: Game.btnFontSize,
        fill: 16777215,
        fontWeight: 'bold',
      }),
      aiu =
      (aiu.anchor.set(0.5),
        aiw.addChild(aiu),
        aiw.on('pointerup', function() {
          Game.openAchiev()
        }),
        aiv.addChild(aiw),
        (this.btnPlay = Game.createButton(ait, 'button.png'))),
      aiw = new PIXI.Text('Начать игру', {
        fontVariant: 'small-caps',
        fontSize: Game.btnFontSize,
        fill: 16777215,
        fontWeight: 'bold',
      })
    aiw.anchor.set(0.5)
    aiu.addChild(aiw)
    aiu.on('pointerup', function() {
      Game.connectToServer()
    })
    aiv.addChild(aiu)
  }
  this.start = function() {
    var aix,
      aiy,
      aiz,
      aja,
      ajb,
      ajc = '\xA9 WorldCats.Ru\n',
      ajc =
      ((ajc = (ajc += Game.version) + Game.versionPatch),
        0 < Game.versionName.length &&
        (ajc += ' (' + Game.versionName + ')'),
        (this.textVersion.text = ajc),
        (this.ui.visible = true),
        new Date()),
      ajd = ajc.getDate(),
      ajc = ajc.getMonth(),
      aje = Game.resources.ui.textures,
      ajf =
      11 <= ajc || ajc <= 1 ?
      ais.THEME_WINTER :
      ais.THEME_DEFAULT,
      ajg =
      (((ajf =
            (1 <= ajd && ajd <= 9 && 0 == ajc) ||
            (31 == ajd && 11 == ajc) ?
            ais.THEME_HOLIDAY :
            ajf) != ais.THEME_WINTER &&
          ajf != ais.THEME_HOLIDAY) ||
        ((this.logo.texture = aje['logoSnow.png']),
          (this.btnPlay.children[0].texture = aje['btnSnow.png']),
          (this.btnInfo.children[0].texture = aje['btnSnowInfo.png']),
          (this.btnLeader.children[0].texture = aje['btnSnowAchiev.png']),
          (this.btnAchiev.children[0].texture = aje['btnSnow.png']),
          (this.btnSet.children[0].texture = aje['btnSnow.png']),
          (this.btnInfo_f.children[0].texture = aje['btnSnow.png']),
          ajf == ais.THEME_HOLIDAY ?
          (this.bg.children[0].texture = PIXI.Texture.from(
            'ui/backgrounds/menu_ny.png'
          )) :
          ajf == ais.THEME_WINTER &&
          (this.bg.children[0].texture = PIXI.Texture.from(
            'ui/backgrounds/menu_winter.png'
          ))),
        1 == ajc &&
        14 == ajd &&
        (this.btnStar.children[0].texture = aje['buttonHeart.png']),
        (this.theme = ajf),
        this.cat),
      ajc = this.btnAchiev
    if (
      ((ajc.visible = false),
        null != Game.playername && null != Game.colors)
    ) {
      var ajh = {
        children: true
      }
      for (
        var aji = ajg.removeChildren(), ajj = 0; ajj < aji.length; ajj++
      ) {
        aji[ajj].destroy(ajh)
      }
      if (0 < Game.colors.length) {
        var ajk = {
          fontVariant: 'small-caps',
          fontFamily: 'Arial',
          align: 'center',
          fontSize: 14,
          fill: 15066597,
          wordWrap: true,
          wordWrapWidth: 200,
        };
        (ajd = new PIXI.Text(Game.playername, ajk)).position.set(
          -10,
          -80
        )
        ajd.anchor.set(0.5)
        ajg.addChild(ajd);
        (ajd = new PIXI.Text('Нажмите, чтобы изменить', {
          fontVariant: 'small-caps',
          fontFamily: 'Arial',
          fontSize: 12,
          fill: 15066597,
        })).position.set(-10, 25)
        ajd.anchor.set(0.5)
        ajg.addChild(ajd)
        0 <
          (aiz = Game.animList('sleepbag', 'none', null)).texture
          .length &&
          ((ajb = new PIXI.Sprite(aiz.texture[0])).anchor.set(0.5),
            ajb.scale.set(0.6),
            ajb.position.set(-10, -15),
            (ajb.parentGroup = PIXI.lights.diffuseGroup),
            (ajb.tint =
              ajf == ais.THEME_WINTER ||
              ajf == ais.THEME_HOLIDAY ?
              4359623 :
              16777215),
            ajg.addChild(ajb));
        (ajd = new PIXI.Text(Game.playername, ajk)).position.set(
            -10,
            -80
          ),
          ajd.anchor.set(0.5),
          ajg.addChild(ajd),
          (ajd = new PIXI.Text('Нажмите, чтобы изменить', {
            fontVariant: 'small-caps',
            fontFamily: 'Arial',
            fontSize: 12,
            fill: 15066597,
          })).position.set(-10, 25),
          ajd.anchor.set(0.5),
          ajg.addChild(ajd),
          0 <
          (aiz = Game.animList('sleepbag', 'none', null)).texture
          .length &&
          ((ajb = new PIXI.Sprite(aiz.texture[0])).anchor.set(
              0.5
            ),
            ajb.scale.set(0.6),
            ajb.position.set(-10, -15),
            (ajb.parentGroup = PIXI.lights.diffuseGroup),
            (ajb.tint =
              ajf == ais.THEME_WINTER ||
              ajf == ais.THEME_HOLIDAY ?
              4359623 :
              16777215),
            ajg.addChild(ajb))
        for (ajj = 0; ajj < Game.colors.length; ajj += 3) {
          0 < (aja = parseFloat(Game.colors[ajj + 2])) &&
            ((aiy = Game.colors[ajj]),
              (aix = parseInt(Game.colors[ajj + 1][1])),
              0 <
              (aiz = Game.animList(
                'cat',
                'sleep',
                0 < aiy ? aiy : null
              )).texture.length) &&
            (((ajb = new PIXI.AnimatedSprite(aiz.texture)).name =
                'id' + aiy),
              (ajb.animationSpeed = 0.05),
              (ajb.loop = true),
              ajb.anchor.set(0.5, 1),
              (ajb.tint = aix),
              (ajb.alpha = aja),
              ajb.scale.set(0.7),
              (ajb.parentGroup = PIXI.lights.diffuseGroup),
              ajg.addChild(ajb),
              ajb.play())
        }
        ajc.visible = true
      }
    }
    this.btnInfo_f.visible = !ajc.visible
    this.btnInfo.visible = ajc.visible
    this.btnLeader.visible = Game.isCordova
    this.dirLight.visible = this.theme == ais.THEME_HOLIDAY
    aje = this.camera
    var ajl = {}
    ajl.left = false
    ajl.right = false
    ajl.top = false
    ajl.bottom = false
    ajl.direction = 'all'
    ajl.underflow = 'center';
    (aje.worldWidth = this.bg.width),
    (aje.worldHeight = this.bg.height),
    aje
      .clamp(ajl)
      .clampZoom({
        minWidth: 0.01 * aje.worldWidth,
        minHeight: 0.01 * aje.worldHeight,
        maxWidth: 0.95 * aje.worldWidth,
        maxHeight: 0.95 * aje.worldHeight,
      })
      .moveCenter(0.525 * aje.worldWidth, 0.5 * aje.worldHeight),
      (this.offsetMenuY = 0),
      window.addEventListener('keyup', this.keyUp, false),
      Game.resizeToWindow()
  }
  this.stop = function() {
    window.removeEventListener('keyup', this.keyUp)
  }
  this.keyUp = function(ajm) {
    var ajn = Game.scenes.active 'Enter' === ajm.code &&
      ajn.ui.visible &&
      (ajm.preventDefault(), ajn.btnPlay.emit('pointerup'))
  }
  this.openSettings = function(ajo) {
    var ajp,
      ajq,
      ajr,
      ajs,
      ajt,
      aju,
      ajv,
      ajw = this,
      ajx = document.getElementById('boxSettings')
    null != ajo ?
      null != ajx &&
      ((ajx.textContent = ''),
        'sound' == ajo ?
        (((aju = document.createElement('label')).textContent =
            'Громкость звуков:'),
          ajx.appendChild(aju),
          ((ajv = document.createElement('input')).type = 'range'),
          (ajv.className = 'cl_custom'),
          (ajv.min = 0),
          (ajv.max = 10),
          (ajv.step = 1),
          (ajv.value = 10 * Game.setMaxVolumeSounds),
          ajv.addEventListener(
            'change',
            function() {
              Game.setMaxVolumeSounds = this.value / 10
              Game.myStorage.set(
                'setMaxVolumeSounds',
                Game.setMaxVolumeSounds
              )
              this.setAttribute('value', this.value)
            },
            false
          ),
          ajx.appendChild(ajv),
          ((aju = document.createElement('label')).textContent =
            'Громкость музыки:'),
          ajx.appendChild(aju),
          ((ajv = document.createElement('input')).type = 'range'),
          (ajv.className = 'cl_custom'),
          (ajv.min = 0),
          (ajv.max = 10),
          (ajv.step = 1),
          (ajv.value = (10 * (Game.setMaxVolumeMusic - 0.05)) / 0.95),
          ajv.addEventListener(
            'change',
            function() {
              Game.setMaxVolumeMusic = 0.05 + (0.95 * this.value) / 10
              null != Game.currentMusic &&
                (Game.currentMusic.volume = Game.setMaxVolumeMusic)
              Game.myStorage.set('setMaxVolumeMusic', Game.setMaxVolumeMusic)
              this.setAttribute('value', this.value)
            },
            false
          ),
          ajx.appendChild(ajv),
          ((aju = document.createElement('label')).textContent =
            'Включить фоновую музыку:'),
          ajx.appendChild(aju),
          ((ajv = document.createElement('input')).type = 'range'),
          (ajv.className = 'cl_custom'),
          (ajv.min = 0),
          (ajv.max = 1),
          (ajv.step = 1),
          (ajv.value = Game.setMusic),
          ajv.addEventListener(
            'change',
            function() {
              Game.setMusic = this.value
              0 == Game.setMusic &&
                null != Game.currentMusic &&
                Game.currentMusic.isPlaying &&
                Game.currentMusic.stop()
              localStorage.setItem('game_setMusic', Game.setMusic)
              this.setAttribute('value', this.value)
            },
            false
          ),
          ajx.appendChild(ajv),
          Game.isCordova ||
          (((aju = document.createElement('label')).textContent =
              'Громкость речи:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0),
            (ajv.max = 10),
            (ajv.step = 1),
            (ajv.value = 10 * Game.setMaxVolumeSpeak),
            ajv.addEventListener(
              'change',
              function() {
                Game.setMaxVolumeSpeak = this.value / 10
                localStorage.setItem('game_setMaxVolumeSpeak', this.value)
                this.setAttribute('value', this.value)
              },
              false
            ),
            ajx.appendChild(ajv),
            ((aju = document.createElement('label')).textContent =
              'Включить голосовой чат:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0),
            (ajv.max = 1),
            (ajv.step = 1),
            (ajv.value = Game.setAudioBar),
            ajv.addEventListener(
              'change',
              function() {
                Game.setAudioBar = this.value
                localStorage.setItem('game_setAudioBar', this.value)
                this.setAttribute('value', this.value)
              },
              false
            ),
            ajx.appendChild(ajv),
            ((aju = document.createElement('label')).textContent =
              'Приглушить всех кроме друзей:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0),
            (ajv.max = 1),
            (ajv.step = 1),
            (ajv.value = Game.setMuteNoFriend),
            ajv.addEventListener(
              'change',
              function() {
                Game.setMuteNoFriend = this.value
                localStorage.setItem('game_setMuteNoFriend', this.value)
                this.setAttribute('value', this.value)
              },
              false
            ),
            ajx.appendChild(ajv))) :
        'chat' == ajo ?
        (((aju = document.createElement('label')).textContent =
            'Уведомление в чате:'),
          ajx.appendChild(aju),
          ((ajv = document.createElement('input')).type = 'range'),
          (ajv.className = 'cl_custom'),
          (ajv.min = 0),
          (ajv.max = 1),
          (ajv.step = 1),
          (ajv.value = Game.setChatNotice),
          ajv.addEventListener(
            'change',
            function() {
              Game.setChatNotice = this.value
              Game.myStorage.set('inputSetChatNotice', this.value)
              this.setAttribute('value', this.value)
            },
            false
          ),
          ajx.appendChild(ajv),
          ((aju = document.createElement('label')).textContent =
            'Уведомление-пузырь:'),
          ajx.appendChild(aju),
          ((ajv = document.createElement('input')).type = 'range'),
          (ajv.className = 'cl_custom'),
          (ajv.min = 0),
          (ajv.max = 1),
          (ajv.step = 1),
          (ajv.value = Game.setChatEntity),
          ajv.addEventListener(
            'change',
            function() {
              Game.setChatEntity = this.value
              Game.myStorage.set('inputSetChatEntity', this.value)
              this.setAttribute('value', this.value)
            },
            false
          ),
          ajx.appendChild(ajv)) :
        'more' == ajo ?
        (((aju = document.createElement('label')).textContent =
            'Включить многопоточную загрузку:'),
          ajx.appendChild(aju),
          ((ajv = document.createElement('input')).type = 'range'),
          (ajv.className = 'cl_custom'),
          (ajv.min = 0),
          (ajv.max = 1),
          (ajv.step = 1),
          (ajv.value = Game.setMultLoad),
          ajv.addEventListener(
            'change',
            function() {
              localStorage.setItem('game_setMultLoad', this.value)
              alert(
                'Для применения изменений перезагрузите игру.',
                null,
                'Требуется перезагрузка',
                'Ок'
              )
              this.setAttribute('value', this.value)
            },
            false
          ),
          ajx.appendChild(ajv),
          ((aju = document.createElement('label')).textContent =
            'Отключить шейдеры:'),
          ajx.appendChild(aju),
          ((ajv = document.createElement('input')).type = 'range'),
          (ajv.className = 'cl_custom'),
          (ajv.min = 0),
          (ajv.max = 1),
          (ajv.step = 1),
          (ajv.value = Game.setShaders),
          ajv.addEventListener(
            'change',
            function() {
              Game.setShaders = this.value
              Game.myStorage.set('inputSetShaders', this.value)
              alert(
                'Для применения изменений перезагрузите игру.',
                null,
                'Требуется перезагрузка',
                'Ок'
              )
              this.setAttribute('value', this.value)
            },
            false
          ),
          ajx.appendChild(ajv),
          ((aju = document.createElement('label')).textContent =
            'Включить интерполяцию пикселей:'),
          ajx.appendChild(aju),
          ((ajv = document.createElement('input')).type = 'range'),
          (ajv.className = 'cl_custom'),
          (ajv.min = 0),
          (ajv.max = 1),
          (ajv.step = 1),
          (ajv.value = Game.setPixelInterpolation),
          ajv.addEventListener(
            'change',
            function() {
              Game.setPixelInterpolation = this.value
              Game.myStorage.set('inputSetPixelInterpolation', this.value)
              this.setAttribute('value', this.value)
            },
            false
          ),
          ajx.appendChild(ajv),
          Game.isCordova &&
          (((aju = document.createElement('label')).textContent =
              'Отключить сбор данных аналитики:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0),
            (ajv.max = 1),
            (ajv.step = 1),
            (ajv.value = Game.setNoData),
            ajv.addEventListener(
              'change',
              function() {
                Game.myStorage.set('inputSetNoData', this.value)
                this.setAttribute('value', this.value)
                alert(
                  'Для применения изменений перезагрузите игру.',
                  null,
                  'Требуется перезагрузка',
                  'Ок'
                )
              },
              false
            ),
            ajx.appendChild(ajv))) :
        ('game' == ajo ?
          (((aju = document.createElement('label')).textContent =
              'Активировать взаимодействие с порталом:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0),
            (ajv.max = 1),
            (ajv.step = 1),
            (ajv.value = Game.setUsePortal),
            ajv.addEventListener(
              'change',
              function() {
                Game.setUsePortal = this.value
                Game.myStorage.set('setUsePortal', this.value)
                this.setAttribute('value', this.value)
              },
              false
            )) :
          (((aju = document.createElement('label')).textContent =
              'Включить тени:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0),
            (ajv.max = 1),
            (ajv.step = 1),
            (ajv.value = Game.setShadows),
            ajv.addEventListener(
              'change',
              function() {
                Game.setShadows = this.value
                Game.myStorage.set('setShadows', Game.setShadows)
                this.setAttribute('value', this.value)
              },
              false
            ),
            ajx.appendChild(ajv),
            ((aju = document.createElement('label')).textContent =
              'Включить анимацию ландшафта:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0),
            (ajv.max = 1),
            (ajv.step = 1),
            (ajv.value = Game.setBoolAnimWind),
            ajv.addEventListener(
              'change',
              function() {
                Game.setBoolAnimWind = this.value
                localStorage.setItem(
                  'game_setBoolAnimWind',
                  Game.setBoolAnimWind
                )
                this.setAttribute('value', this.value)
              },
              false
            ),
            ajx.appendChild(ajv),
            ((aju = document.createElement('label')).textContent =
              'Отключить туман:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0),
            (ajv.max = 1),
            (ajv.step = 1),
            (ajv.value = Game.setFog),
            ajv.addEventListener(
              'change',
              function() {
                Game.setFog = this.value
                Game.myStorage.set('setFog', Game.setFog)
                this.setAttribute('value', this.value)
              },
              false
            ),
            ajx.appendChild(ajv),
            ((aju = document.createElement('label')).textContent =
              'Отключить молнии:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0),
            (ajv.max = 1),
            (ajv.step = 1),
            (ajv.value = Game.setMaxLight),
            ajv.addEventListener(
              'change',
              function() {
                Game.setMaxLight = this.value
                Game.myStorage.set('setMaxLight', Game.setMaxLight)
                this.setAttribute('value', this.value)
              },
              false
            ),
            ajx.appendChild(ajv),
            ((aju = document.createElement('label')).textContent =
              'Разрешение игры:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0.75),
            (ajv.max = 2),
            (ajv.step = 0.25),
            (ajv.value = Game.setMaxResolution),
            ajv.addEventListener(
              'change',
              function() {
                localStorage.setItem('game_setMaxResolution', this.value)
                alert(
                  'Для применения изменений перезагрузите игру.',
                  null,
                  'Требуется перезагрузка',
                  'Ок'
                )
                this.setAttribute('value', this.value)
              },
              false
            ),
            ajx.appendChild(ajv),
            ((aju = document.createElement('label')).textContent =
              'Включить ограничение кадров:'),
            ajx.appendChild(aju),
            ((ajv = document.createElement('input')).type = 'range'),
            (ajv.className = 'cl_custom'),
            (ajv.min = 0),
            (ajv.max = 1),
            (ajv.step = 1),
            (ajv.value = Game.setLimitFps),
            ajv.addEventListener(
              'change',
              function() {
                Game.setLimitFps = this.value
                Game.myStorage.set('setLimitFps', Game.setLimitFps)
                alert(
                  'Для применения изменений перезагрузите игру.',
                  null,
                  'Требуется перезагрузка',
                  'Ок'
                )
              },
              false
            )),
          ajx.appendChild(ajv)),
        ajx.appendChild(document.createElement('br'))) :
      (((ajp = document.createElement('ul')).className = 'cl-small-bl'),
        ((ajq = document.createElement('li')).textContent = 'Графика'),
        (ajq.className = 'disabled'),
        ajq.addEventListener(
          'click',
          function() {
            ajr.className =
              ajs.className =
              ajt.className =
              tabGame.className =
              ''
            ajq.className = 'disabled'
            ajw.openSettings('graphics')
          },
          false
        ),
        ajp.appendChild(ajq),
        ((tabGame = document.createElement('li')).textContent = 'Игра'),
        tabGame.addEventListener(
          'click',
          function() {
            ajq.className =
              ajr.className =
              ajs.className =
              ajt.className =
              ''
            tabGame.className = 'disabled'
            ajw.openSettings('game')
          },
          false
        ),
        ajp.appendChild(tabGame),
        ((ajr = document.createElement('li')).textContent = 'Звуки'),
        ajr.addEventListener(
          'click',
          function() {
            ajq.className =
              ajs.className =
              ajt.className =
              tabGame.className =
              ''
            ajr.className = 'disabled'
            ajw.openSettings('sound')
          },
          false
        ),
        ajp.appendChild(ajr),
        ((ajs = document.createElement('li')).textContent = 'Чат'),
        ajs.addEventListener(
          'click',
          function() {
            ajq.className =
              ajr.className =
              ajt.className =
              tabGame.className =
              ''
            ajs.className = 'disabled'
            ajw.openSettings('chat')
          },
          false
        ),
        ajp.appendChild(ajs),
        ((ajt = document.createElement('li')).textContent =
          'Дополнительно'),
        ajt.addEventListener(
          'click',
          function() {
            ajq.className =
              ajs.className =
              ajr.className =
              tabGame.className =
              ''
            ajt.className = 'disabled'
            ajw.openSettings('more')
          },
          false
        ),
        ajp.appendChild(ajt),
        ((ajx = document.createElement('div')).id = 'boxSettings'),
        (ajx.className = 'cl-bl'),
        Game.openClPage('Настройки игры', '', function(ajy) {
          ajy.appendChild(ajp)
          ajy.appendChild(ajx)
          ajw.openSettings('graphics')
        }))
  }
  this.update = function(ajz) {
    this.timeLight += 0.001 * ajz
    var aka,
      akb,
      akc = Math.sin(this.timeLight),
      akc =
      ((this.ambientLight.brightness = 0.8 + 0.2 * akc), this.camera)
    this.timeCamera += 0.0001 * ajz
    aka = Math.cos(this.timeCamera) * akc.worldWidth * 0.025
    akb = Math.sin(this.timeCamera) * akc.worldHeight * 0.025
    akc.animate({
      position: {
        x: 0.5 * akc.worldWidth + aka,
        y: 0.5 * akc.worldHeight + akb,
      },
    })
    this.theme == ais.THEME_HOLIDAY &&
      ((this.timeSnowLight += 0.002 * ajz),
        (this.dirLight.brightness = 1.2 - 0.8 * Math.sin(this.timeSnowLight)))
    this.cat.visible = this.ui.visible
  }
  this.resize = function(akd, ake) {
    var akf = 0,
      akg = 600 < akd ? 200 : 0.5 * akd,
      akh = {
        x: 0,
        y: 0,
      }
    0 < this.offsetMenuY && akd < 584 && (akf = 50)
    this.cat.visible = 600 < akd
    this.logo.position.set(akg, 0.5 * ake - 70)
    this.logo.scale.set(Game.calcMaxScale(this.logo, 0.5))
    this.btnPlay.position.set(akg, 0.5 * ake + 17)
    this.btnInfo_f.position.set(akg, 0.5 * ake + 60)
    this.btnAchiev.position.set(akg, 0.5 * ake + 60)
    this.btnSet.position.set(akg, 0.5 * ake + 103)
    this.textVersion.position.set(akd - 5, ake - 5)
    this.btnInfo.position.set(akd - 22, 22 + akf)
    this.btnInfo.visible ?
      this.btnLeader.position.set(akd - 66, 22 + akf) :
      this.btnLeader.position.set(akd - 22, 22 + akf)
    this.btnInfo.visible ?
      Game.isCordova ?
      this.btnStar.position.set(akd - 110, 22 + akf) :
      this.btnStar.position.set(akd - 66, 22 + akf) :
      this.btnStar.position.set(akd - 22, 22 + akf)
    this.theme == ais.THEME_HOLIDAY || this.theme == ais.THEME_WINTER ?
      (this.emitFlame.init({
          lifetime: {
            min: 0.017 * ake,
            max: 0.017 * ake,
          },
          frequency: 0.1,
          spawnChance: 1,
          particlesPerWave: 1,
          emitterLifetime: -1,
          maxParticles: 100,
          pos: akh,
          addAtBack: false,
          behaviors: [
            aki,
            {
              type: 'scale',
              config: akj,
            },
            akk,
            {
              type: 'spawnShape',
              config: {
                type: 'rect',
                data: {
                  x: -akd,
                  y: -10,
                  w: 2 * akd,
                  h: 0,
                },
              },
            },
            {
              type: 'textureRandom',
              config: akl,
            },
            akm,
          ],
        }),
        (this.emitFlame.autoUpdate = true)) :
      (this.emitFlame.autoUpdate = false)
    this.camera.resize()
    this.camera.setZoom(this.camera.findCover(this.bg.width, this.bg.height))
    var akn = {
      value: 0.1,
      time: 0,
    }
    var ako = {
      value: 0.5,
      time: 1,
    }
    var akp = {
      list: [akn, ako],
    }
    var akq = {
      alpha: akp
    }
    var aki = {
      type: 'alpha',
      config: akq,
    }
    var akr = {
      value: 0.25,
      time: 0,
    }
    var aks = {
      value: 0.35,
      time: 1,
    }
    var akt = {
      list: [akr, aks],
    }
    var akj = {
      scale: akt,
      minMult: 1,
    }
    var aku = {
      value: 100,
      time: 0,
    }
    var akv = {
      value: 150,
      time: 1,
    }
    var akw = {
      list: [aku, akv],
    }
    var akx = {
      speed: akw,
      minMult: 1,
    }
    var akk = {
      type: 'moveSpeed',
      config: akx,
    }
    var akl = {
      textures: ['environment/particle.png']
    }
    var aky = {
      minStart: 40,
      maxStart: 55,
      minSpeed: 30,
      maxSpeed: 45,
    }
    var akm = {
      type: 'rotation',
      config: aky,
    }
    0 < this.offsetMenuY && akd < 584 && (akf = 50),
      (this.cat.visible = 600 < akd),
      this.logo.position.set(akg, 0.5 * ake - 70),
      this.logo.scale.set(Game.calcMaxScale(this.logo, 0.5)),
      this.btnPlay.position.set(akg, 0.5 * ake + 17),
      this.btnInfo_f.position.set(akg, 0.5 * ake + 60),
      this.btnAchiev.position.set(akg, 0.5 * ake + 60),
      this.btnSet.position.set(akg, 0.5 * ake + 103),
      this.textVersion.position.set(akd - 5, ake - 5),
      this.btnInfo.position.set(akd - 22, 22 + akf),
      this.btnInfo.visible ?
      this.btnLeader.position.set(akd - 66, 22 + akf) :
      this.btnLeader.position.set(akd - 22, 22 + akf),
      this.btnInfo.visible ?
      Game.isCordova ?
      this.btnStar.position.set(akd - 110, 22 + akf) :
      this.btnStar.position.set(akd - 66, 22 + akf) :
      this.btnStar.position.set(akd - 22, 22 + akf),
      this.theme == ais.THEME_HOLIDAY ||
      this.theme == ais.THEME_WINTER ?
      (this.emitFlame.init({
          lifetime: {
            min: 0.017 * ake,
            max: 0.017 * ake,
          },
          frequency: 0.1,
          spawnChance: 1,
          particlesPerWave: 1,
          emitterLifetime: -1,
          maxParticles: 100,
          pos: akh,
          addAtBack: false,
          behaviors: [
            aki,
            {
              type: 'scale',
              config: akj,
            },
            akk,
            {
              type: 'spawnShape',
              config: {
                type: 'rect',
                data: {
                  x: -akd,
                  y: -10,
                  w: 2 * akd,
                  h: 0,
                },
              },
            },
            {
              type: 'textureRandom',
              config: akl,
            },
            akm,
          ],
        }),
        (this.emitFlame.autoUpdate = true)) :
      (this.emitFlame.autoUpdate = false),
      this.camera.resize(),
      this.camera.setZoom(this.camera.findCover(this.bg.width, this.bg.height))
  }
}

function akz() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    this.logo = PIXI.Sprite.from(Game.versionCode + '/ui/logo.png')
    this.logo.anchor.set(0.5)
    this.logo.scale.set(0.5)
    this.addChild(this.logo)
    this.time = 0
    this.pause = true
  }
  this.start = function() {
    for (
      var ala = PIXI.Loader.shared,
        alb = [
          'ui',
          'ui/ui.json',
          'sounds/click.mp3',
          'sounds/click.mp3',
          'environment/leaf.png',
          'environment/leaf.png',
          'environment/leaf1.png',
          'environment/leaf1.png',
          'environment/leaf2.png',
          'environment/leaf2.png',
          'environment/leaf3.png',
          'environment/leaf3.png',
          'ui/backgrounds/load.png',
          'ui/backgrounds/load.png',
          'ui/backgrounds/load_winter.png',
          'ui/backgrounds/load_winter.png',
          'ui/backgrounds/menu_settings.png',
          'ui/backgrounds/menu_settings.png',
          'environment/particle.png',
          'environment/particle.png',
          'ui/none_n.png',
          'ui/none_n.png',
        ],
        alc = 0; alc < alb.length - 1; alc += 2
    ) {
      ala.add(
        alb[alc],
        Game.versionCode + '/' + alb[alc + 1]
      )
    }
    ala.onComplete.add(function() {
      Game.unloadLoader(ala)
      this.pause = false
    }, this)
    ala.load()
    Game.resizeToWindow()
  }
  this.update = function(ald) {
    this.time < 2000 ?
      (this.time += ald) :
      0 < this.logo.alpha ?
      (this.logo.alpha -= 0.002 * ald) :
      this.pause || Game.goToScene('login')
  }
  this.resize = function(ale, alf) {
    this.logo.position.set(ale / 2, alf / 2)
  }
}

function alg() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var alh = Game.resources.ui.textures,
      ali =
      (this.addChild(new PIXI.display.Layer(PIXI.lights.diffuseGroup)),
        this.addChild(new PIXI.display.Layer(PIXI.lights.normalGroup)),
        this.addChild(new PIXI.display.Layer(PIXI.lights.lightGroup)),
        (this.ambientLight = new PIXI.lights.AmbientLight(16777215, 0.1)),
        this.addChild(this.ambientLight),
        (this.sky = PIXI.Sprite.from('ui/backgrounds/menu_custom.png'))),
      ali =
      ((ali.interactive = true),
        ali.on(
          'pointerup',
          function() {
            var alj,
              alk = {
                start: 0.65,
                end: 1,
              }
            this._scale += 5
            31 < this._scale && (this._scale = 1)
            this._scale / 31 == 1 &&
              ((this.ambientLight.brightness = 2),
                1 == Game.setMusic &&
                'day' != Game.currentMusicType &&
                Game.playMusic('rain', false),
                (alj = new PIXI.particles.Emitter(
                  this.containerParticles
                )).init(
                  PIXI.particles.upgradeConfig({
                      alpha: alk,
                      scale: alm,
                      color: {
                        start: '#ffffff',
                        end: '#ffffff',
                      },
                      speed: aln,
                      acceleration: alo,
                      maxSpeed: 0,
                      startRotation: alp,
                      noRotation: true,
                      rotationSpeed: alq,
                      lifetime: alr,
                      blendMode: 'normal',
                      frequency: 0.0008,
                      emitterLifetime: 0.5,
                      maxParticles: 70,
                      pos: {
                        x: Game.app.screen.width / 2,
                        y: Game.app.screen.height,
                      },
                      addAtBack: false,
                      spawnType: 'rect',
                      spawnRect: {
                        x: -Game.app.screen.width / 2,
                        y: 0,
                        w: Game.app.screen.width,
                        h: Game.app.screen.height,
                      },
                    },
                    [PIXI.Texture.from('environment/heart.png')]
                  )
                ),
                alj.playOnceAndDestroy())
            var alm = {
              start: 0.4,
              end: 0.9,
              minimumScaleMultiplier: 1,
            }
            var aln = {
              start: 350,
              end: 80,
              minimumSpeedMultiplier: 0.5,
            }
            var alo = {
              x: 0,
              y: 0,
            }
            var alp = {
              min: 260,
              max: 280,
            }
            var alq = {
              min: 0,
              max: 0,
            }
            var alr = {
              min: 5,
              max: 8,
            };
            (this._scale += 5),
            31 < this._scale && (this._scale = 1),
              this._scale / 31 == 1 &&
              ((this.ambientLight.brightness = 2),
                1 == Game.setMusic &&
                'day' != Game.currentMusicType &&
                Game.playMusic('rain', false),
                (alj = new PIXI.particles.Emitter(
                  this.containerParticles
                )).init(
                  PIXI.particles.upgradeConfig({
                      alpha: alk,
                      scale: alm,
                      color: {
                        start: '#ffffff',
                        end: '#ffffff',
                      },
                      speed: aln,
                      acceleration: alo,
                      maxSpeed: 0,
                      startRotation: alp,
                      noRotation: true,
                      rotationSpeed: alq,
                      lifetime: alr,
                      blendMode: 'normal',
                      frequency: 0.0008,
                      emitterLifetime: 0.5,
                      maxParticles: 70,
                      pos: {
                        x: Game.app.screen.width / 2,
                        y: Game.app.screen.height,
                      },
                      addAtBack: false,
                      spawnType: 'rect',
                      spawnRect: {
                        x: -Game.app.screen.width / 2,
                        y: 0,
                        w: Game.app.screen.width,
                        h: Game.app.screen.height,
                      },
                    },
                    [PIXI.Texture.from('environment/heart.png')]
                  )
                ),
                alj.playOnceAndDestroy())
          },
          this
        ),
        (ali.parentGroup = PIXI.lights.diffuseGroup),
        this.addChild(ali),
        (this.normalMap = PIXI.Sprite.from('ui/none_n.png'))),
      ali =
      ((ali.parentGroup = PIXI.lights.normalGroup),
        (ali.visible = Game.isWebGLSupported),
        this.addChild(ali),
        (this.mapLines = new PIXI.Graphics()))
    ali.parentGroup = PIXI.lights.diffuseGroup
    this.addChild(ali)
    this.points = new PIXI.Container()
    this.addChild(this.points)
    for (var als = 0; als < 8; als++) {
      var alt = new PIXI.Container(),
        alu = new PIXI.Sprite(
          Game.resources.items.textures['id' + als + '.png']
        )
      alu.parentGroup = PIXI.lights.diffuseGroup
      alu.anchor.set(0.5)
      alu.scale.set(0.5)
      alt.addChild(alu)
      alt.addChild(new PIXI.lights.PointLight(16777215, 0.4))
      this.points.addChild(alt)
    }
    var alv = {}
    alv.fontVariant = 'small-caps'
    alv.fontSize = Game.btnFontSize
    alv.fill = 16777215
    alv.align = 'center'
    alv.fontWeight = 'bold'
    var alw = {}
    alw.fontVariant = 'small-caps'
    alw.fontSize = Game.btnFontSize
    alw.fill = 16711680
    alw.align = 'center'
    alw.fontWeight = 'bold';
    (ali = this.textTitle = new PIXI.Text('', alv)),
    ali.anchor.set(0.5),
      this.addChild(ali),
      (ali = this.textTitleRed = new PIXI.Text('', alw)),
      ali.anchor.set(0.5),
      this.addChild(ali),
      (this.containerParticles = new PIXI.ParticleContainer()),
      this.addChild(this.containerParticles),
      (ali = this.btnBack =
        Game.createButton(alh, 'buttonBack.png'))
    ali.on(
      'pointerup',
      function() {
        Game.goToScene('menu')
      },
      this
    )
    this.addChild(ali)
    this.gspeed = 0.000001
    this._scale = 1
  }
  this.start = function() {
    Game.resizeToWindow()
  }
  this.update = function(alx) {
    this.gspeed < 0.0001 && (this.gspeed += 1e-9 * alx)
    var aly = Math.min(Game.app.screen.width, Game.app.screen.height),
      alz =
      ((aly = ((aly -= 87) / 2) * this._scale),
        this.textTitle),
      ama = this.textTitleRed,
      amb =
      (alz.scale.set(this._scale / 31),
        ama.scale.set(this._scale / 31),
        1 <= alz.scale.x ?
        ((alz.text = 'CATLIFE\n\nMade With\n'),
          (ama.text = '\n\n\n\u2665\u2665\u2665')) :
        ((alz.text = 'CATLIFE'), (ama.text = '')),
        0.1 < this.ambientLight.brightness ?
        (this.ambientLight.brightness -= 0.005 * alx) :
        (this.ambientLight.brightness = 0.1),
        this.mapLines)
    amb.clear()
    for (
      var amc = 0; amc < this.points.children.length; amc++
    ) {
      var amd,
        ame = this.points.children[amc],
        amf =
        (null == ame._angle && (ame._angle = 0),
          aly / 30.1)
      0 == amc ?
        ((amd = 47.9), (amf *= 0.387)) :
        1 == amc ?
        ((amd = 34.99), (amf *= 0.72)) :
        2 == amc ?
        ((amd = 29.765), (amf *= 1)) :
        3 == amc ?
        ((amd = 24.13), (amf *= 1.5)) :
        4 == amc ?
        ((amd = 13.06), (amf *= 5.2)) :
        5 == amc ?
        ((amd = 9.69), (amf *= 9.54)) :
        6 == amc ?
        ((amd = 6.81), (amf *= 19.18)) :
        ((amd = 5.4349), (amf *= 30.1))
      amb.lineStyle(1, 16777215, 0.1)
      amb.drawCircle(
        Game.app.screen.width / 2,
        Game.app.screen.height / 2,
        amf
      )
      ame._angle += alx * this.gspeed * amd
      6.28 < ame._angle && (ame._angle = 0)
      ame.position.set(
        Game.app.screen.width / 2 + Math.cos(ame._angle) * amf,
        Game.app.screen.height / 2 + Math.sin(ame._angle) * amf
      )
      ame.position.set(
        Game.app.screen.width / 2 + Math.cos(ame._angle) * amf,
        Game.app.screen.height / 2 + Math.sin(ame._angle) * amf
      )
    }
  }
  this.resize = function(amg, amh) {
    Game.calcBackground(this.sky)
    Game.isWebGLSupported && Game.calcBackground(this.normalMap)
    var ami = this.btnBack
    ami.position.set(ami.width / 2, ami.height / 2)
    this.textTitle.position.set(amg / 2, amh / 2)
    this.textTitleRed.position.set(amg / 2, amh / 2)
  }
}

function amj() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var amk = Game.resources.ui.textures,
      aml = (this.bgGame = new PIXI.Sprite(PIXI.Texture.WHITE)),
      aml =
      ((aml.tint = 15688),
        (aml.interactive = true),
        aml.on(
          'pointerup',
          function() {
            var amm = PIXI.sound.find('sounds/click.mp3')
            amm.volume = Game.setMaxVolumeSounds
            amm.play()
            this.sliderGame.position.x < Game.app.screen.width / 2 + 30 &&
              this.sliderGame.position.x > Game.app.screen.width / 2 - 30 ?
              1 < this.sliderGameClicks ?
              (Game.threads.push({
                  query: Game.packet.ENTITY_INTERACT,
                  interactId: Game.packet.INTERACT_ACTION_WIN,
                }),
                Game.connectToServer()) :
              this.sliderGameClicks++
              :
              this.stopGame()
          },
          this
        ),
        this.addChild(aml),
        (this.particles = new PIXI.ParticleContainer())),
      aml =
      (this.addChild(aml),
        (this.particle = new PIXI.particles.Emitter(aml)),
        (this.sliderGameBg = new PIXI.Sprite(amk['sliderGameBg.png']))),
      aml =
      (aml.anchor.set(0.5),
        aml.scale.set(0.5),
        this.addChild(aml),
        (this.sliderGame = new PIXI.Sprite(amk['sliderGame.png']))),
      aml =
      (aml.anchor.set(0.5),
        aml.scale.set(0.5),
        this.addChild(aml),
        (this.textStatGame = new PIXI.Text('', {
          fontVariant: 'small-caps',
          fontSize: 16,
          fill: 16777215,
          fontWeight: 'bold',
        }))),
      aml =
      (aml.anchor.set(0.5, 0),
        this.addChild(aml),
        (this.btnBack = Game.createButton(amk, 'buttonClose.png')))
    aml.on(
      'pointerup',
      function() {
        this.stopGame()
      },
      this
    )
    this.addChild(aml)
  }
  this.start = function() {
    var amn = (this.actionData = Game.sceneConfig)
    this.tickAlpha = 0
    this.tickSlider = 0
    this.sliderGameClicks = 0
    this.timeGame = amn.duration - 10000
    Game.resizeToWindow()
  }
  this.update = function(amo) {
    var amq = this.bgGame,
      amr = Game.app.screen.width,
      ams = Game.app.screen.height
    6.28 < this.tickAlpha ?
      (this.tickAlpha = 0) :
      (this.tickAlpha += 0.001 * amo)
    6.28 < this.tickSlider ?
      (this.tickSlider = 0) :
      (this.tickSlider += 0.0025 * amo)
    amq.alpha = 0.85 + 0.15 * Math.sin(this.tickAlpha)
    this.sliderGame.position.set(
      amr / 2 + 185 * Math.sin(this.tickSlider),
      ams - 35
    )
    0 < this.timeGame ?
      ((this.timeGame -= amo),
        (this.textStatGame.text =
          'Осталось: ' +
          this.sliderGameClicks +
          '/3 | Осталось времени: ' +
          Math.ceil(this.timeGame / 1000) +
          ' с')) :
      this.stopGame()
  }
  this.stopGame = function() {
    Game.threads.push({
      query: Game.packet.ENTITY_INTERACT,
      interactId: Game.packet.INTERACT_ACTION_STOP,
    })
    Game.connectToServer()
  }
  this.resize = function(amt, amu) {
    var amv = this.bgGame
    amv.width = amt
    amv.height = amu
    this.btnBack.position.set(amt - 22, 22)
    this.textStatGame.position.set(amt / 2, 10)
    amv = this.particle
    var amw = {}
    amw.start = 0.65
    amw.end = 1
    var amx = {}
    amx.start = 0.4
    amx.end = 0.5
    amx.minimumScaleMultiplier = 1
    var amy = {}
    amy.start = '#ffffff'
    amy.end = '#ffffff'
    var amz = {}
    amz.start = 350
    amz.end = 80
    amz.minimumSpeedMultiplier = 0.5
    var ana = {}
    ana.x = 0
    ana.y = 0
    var anb = {}
    anb.min = 260
    anb.max = 280
    var anc = {}
    anc.min = 0
    anc.max = 0
    var and = {}
    and.min = 5
    and.max = 8
    amv.init(
        PIXI.particles.upgradeConfig({
            alpha: amw,
            scale: amx,
            color: amy,
            speed: amz,
            acceleration: ana,
            maxSpeed: 0,
            startRotation: anb,
            noRotation: true,
            rotationSpeed: anc,
            lifetime: and,
            blendMode: 'normal',
            frequency: 0.1,
            emitterLifetime: -1,
            maxParticles: 100,
            pos: {
              x: 0,
              y: amu / 2,
            },
            addAtBack: false,
            spawnType: 'rect',
            spawnRect: {
              x: 0,
              y: 0,
              w: amt,
              h: amu,
            },
          },
          [PIXI.Texture.from('environment/bubble.png')]
        )
      ),
      (amv.autoUpdate = true),
      this.sliderGameBg.position.set(amt / 2, amu - 35)
  }
}

function ane() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var anf = {
      fontVariant: 'small-caps',
      fontSize: 16,
      fill: 16777215,
      fontWeight: 'bold',
    }
    var ang = Game.resources.ui.textures,
      anh = (this.bgGame = new PIXI.Sprite(PIXI.Texture.WHITE)),
      anh =
      ((anh.tint = 15688),
        (anh.interactive = true),
        anh.on(
          'pointerup',
          function() {
            var ani = this.sliderGame,
              ani = this.freePos(
                ani.position.x,
                0.5 * ani.width
              ),
              anj = PIXI.sound.find('sounds/click.mp3')
            anj.volume = Game.setMaxVolumeSounds
            anj.play()
            0 == ani ?
              this.restartGame() :
              null != ani &&
              (2 < this.sliderGameClicks + ani ?
                (Game.threads.push({
                    query: Game.packet.ENTITY_INTERACT,
                    interactId: Game.packet.INTERACT_ACTION_WIN,
                  }),
                  Game.connectToServer()) :
                ((this.sliderGameClicks += ani), this.restartGame()))
          },
          this
        ),
        this.addChild(anh),
        (this.particles = new PIXI.ParticleContainer())),
      anh =
      (this.addChild(anh),
        (this.particle = new PIXI.particles.Emitter(anh)),
        (this.sliderGame = new PIXI.Sprite(ang['sliderGame.png']))),
      anh =
      (anh.anchor.set(0.5),
        (anh.alpha = 0.5),
        (anh.width = 100),
        this.addChild(anh),
        (this.fishes = new PIXI.Container()),
        this.addChild(this.fishes),
        (this.trash = new PIXI.Container()),
        this.addChild(this.trash),
        (this.listFishes = [62, 63]),
        (this.listTrash = [0, 1, 99, 101]),
        (this.textStatGame = new PIXI.Text('', anf))),
      anh =
      (anh.anchor.set(0.5, 0),
        this.addChild(anh),
        (this.btnBack = Game.createButton(ang, 'buttonClose.png')))
    anh.on(
      'pointerup',
      function() {
        this.stopGame()
      },
      this
    )
    this.addChild(anh)
  }
  this.start = function() {
    var ank = (this.actionData = Game.sceneConfig)
    this.tickAlpha = 0
    this.tickSlider = 0
    this.sliderGameClicks = 0
    this.timeGame = ank.duration - 10000
    Game.resizeToWindow()
  }
  this.restartGame = function() {
    for (
      var anl = this.fishes.removeChildren(), anm = 0; anm < anl.length; anm++
    ) {
      anl[anm].destroy()
    }
    for (
      anl = this.trash.removeChildren(), anm = 0; anm < anl.length; anm++
    ) {
      anl[anm].destroy()
    }
  }
  this.update = function(ann) {
    var ano,
      anp,
      anq,
      anr,
      ans = this.bgGame,
      ant = Game.app.screen.width,
      anu = Game.app.screen.height
    if (
      (6.28 < this.tickAlpha ?
        (this.tickAlpha = 0) :
        (this.tickAlpha += 0.001 * ann),
        6.28 < this.tickSlider ?
        (this.tickSlider = 0) :
        (this.tickSlider += 0.0015 * ann),
        (ans.alpha = 0.85 + 0.15 * Math.sin(this.tickAlpha)),
        this.sliderGame.position.set(
          0.5 * ant + Math.sin(this.tickSlider) * ant * 0.5,
          0.5 * anu
        ),
        0 < this.timeGame ?
        ((this.timeGame -= ann),
          (this.textStatGame.text =
            'Осталось: ' +
            this.sliderGameClicks +
            '/3 | Осталось времени: ' +
            Math.ceil(0.001 * this.timeGame) +
            ' с')) :
        this.stopGame(),
        !(ant < 200 || anu < 200))
    ) {
      this.fishes.children.length < 2 &&
        ((anq = Game.utils.RandomInt(80, ant - 80)),
          (anr = Game.utils.RandomInt(80, anu - 80)),
          null == this.freePos(anq, 50)) &&
        ((ans = 0.5 < Math.random() ? anq + 60 : anq - 60),
          (anp = this.freePos(ans, 50)),
          this.addFish(anq, anr),
          (null != anp && 0 != anp) ||
          this.addTrash(ans, anr + Game.utils.RandomInt(-100, 100)))
      this.trash.children.length < this.maxTrash &&
        ((anq = Game.utils.RandomInt(50, ant - 50)),
          (anr = Game.utils.RandomInt(50, anu - 50)),
          null == this.freePos(anq, 50)) &&
        this.addTrash(anq, anr)
      for (
        var anv = 0; anv < this.fishes.children.length; anv++
      ) {
        ;
        (ano = this.fishes.children[anv]).scale.x < 0.8 &&
          ano.scale.set(ano.scale.x + 0.005 * ann)
      }
      for (anv = 0; anv < this.trash.children.length; anv++) {
        ;
        (ano = this.trash.children[anv]).scale.x < 0.8 &&
          ano.scale.set(ano.scale.x + 0.005 * ann)
      }
    }
  }
  this.freePos = function(anw, anx) {
    for (
      var any, anz = 0, aoa = 0; aoa < this.trash.children.length; aoa++
    ) {
      if (
        ((any = this.trash.children[aoa]),
          Math.abs(any.x - anw) < anx)
      ) {
        return 0
      }
    }
    for (aoa = 0; aoa < this.fishes.children.length; aoa++) {
      any = this.fishes.children[aoa]
      Math.abs(any.x - anw) < anx && anz++
    }
    return 0 < anz ? anz : null
  }
  this.addFish = function(aob, aoc) {
    var aod = this.listFishes,
      aoe = Game.resources.items.textures,
      aod = aod[Game.utils.RandomInt(0, aod.length - 1)],
      aod = new PIXI.Sprite(aoe['id' + aod + '.png'])
    aod.position.set(aob, aoc)
    aod.anchor.set(0.5)
    aod.scale.set(0)
    this.fishes.addChild(aod)
  }
  this.addTrash = function(aof, aog) {
    var aoh = this.listTrash,
      aoi = Game.resources.items.textures,
      aoh = aoh[Game.utils.RandomInt(0, aoh.length - 1)],
      aoh = new PIXI.Sprite(aoi['id' + aoh + '.png'])
    aoh.position.set(aof, aog)
    aoh.anchor.set(0.5)
    aoh.scale.set(0)
    this.trash.addChild(aoh)
  }
  this.stopGame = function() {
    Game.threads.push({
      query: Game.packet.ENTITY_INTERACT,
      interactId: Game.packet.INTERACT_ACTION_STOP,
    })
    Game.connectToServer()
  }
  this.resize = function(aoj, aok) {
    var aol = this.bgGame
    aol.width = aoj
    aol.height = aok
    this.btnBack.position.set(aoj - 22, 22)
    this.textStatGame.position.set(0.5 * aoj, 10)
    aol = this.particle
    var aom = {}
    aom.start = 0.65
    aom.end = 1
    var aon = {}
    aon.start = 0.4
    aon.end = 0.5
    aon.minimumScaleMultiplier = 1
    var aoo = {}
    aoo.start = '#ffffff'
    aoo.end = '#ffffff'
    var aop = {}
    aop.start = 350
    aop.end = 80
    aop.minimumSpeedMultiplier = 0.5
    var aoq = {}
    aoq.x = 0
    aoq.y = 0
    var aor = {}
    aor.min = 260
    aor.max = 280
    var aos = {}
    aos.min = 0
    aos.max = 0
    var aot = {}
    aot.min = 5
    aot.max = 8
    var aou = {}
    aou.x = 0
    aou.y = 0.5 * aok
    var aov = {}
    aov.x = 0
    aov.y = 0
    aov.w = aoj
    aov.h = aok
    var aow = {}
    aow.alpha = aom
    aow.scale = aon
    aow.color = aoo
    aow.speed = aop
    aow.acceleration = aoq
    aow.maxSpeed = 0
    aow.startRotation = aor
    aow.noRotation = true
    aow.rotationSpeed = aos
    aow.lifetime = aot
    aow.blendMode = 'normal'
    aow.frequency = 0.1
    aow.emitterLifetime = -1
    aow.maxParticles = 100
    aow.pos = aou
    aow.addAtBack = false
    aow.spawnType = 'rect'
    aow.spawnRect = aov
    aol.init(
        PIXI.particles.upgradeConfig(aow, [
          PIXI.Texture.from('environment/bubble.png'),
        ])
      ),
      (aol.autoUpdate = true),
      (this.sliderGame.height = aok),
      (this.maxTrash = Math.floor(0.005 * aoj)),
      this.restartGame()
  }
}

function aox() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var aoy = Game.resources.ui.textures,
      aoz = (this.bg = PIXI.Sprite.from(
        'ui/backgrounds/menu_settings.png'
      )),
      aoz =
      ((aoz.alpha = 0),
        this.addChild(aoz),
        (this.textTitle = new PIXI.Text('Выберите племя', {
          fontSize: 18,
          fill: 16777215,
          fontWeight: 'bold',
        }))),
      apa =
      (aoz.anchor.set(0.5),
        this.addChild(aoz),
        (this.tribes = new PIXI.Container()))
    this.addChild(apa)
    for (var apb = 1; apb <= 5; apb++) {
      var apc = new PIXI.Sprite(
          aoy['tribe/id' + apb + '.png']
        ),
        apd =
        (apc.anchor.set(0.5),
          apc.scale.set(0.8),
          apc.width + 5)
      apc.position.set(
        apd * (apb - 1) - (4 * apd) / 2,
        0
      )
      apc.interactive = true
      apc.buttonMode = true
      apc.name = apb
      apc.on(
        'pointerup',
        function() {
          Game.myStorage.set('tribeId', this.name)
          Game.scenes.active.start()
        },
        apc
      )
      apa.addChild(apc)
    }
    this.tribeSelected = false
    aoz = this.btnNext = Game.createButton(aoy, 'buttonNext.png')
    aoz.on(
      'pointerup',
      function() {
        Game.scenes.active.start()
      },
      this
    )
    this.addChild(aoz)
  }
  this.start = function() {
    var ape = Game.myStorage.get('tribeId')
    Game.isCordova ?
      (cordova.plugins.firebase.analytics.setEnabled(0 === Game.setNoData),
        Game.loginGooglePlay(true)) :
      Game.serverStaticContent && Game.openFull()
    null != ape || this.tribeSelected ?
      ((Game.sceneConfig = {
          nextScene: 'menu',
          list: [
            'entity/anura',
            'entity/anura/anura.json',
            'entity/apple',
            'entity/apple/apple.json',
            'entity/applegame',
            'entity/applegame/applegame.json',
            'entity/ardea',
            'entity/ardea/ardea.json',
            'entity/barrier',
            'entity/barrier/barrier.json',
            'entity/bee',
            'entity/bee/bee.json',
            'entity/bot_box',
            'entity/bot_box/bot_box.json',
            'entity/bot_branch',
            'entity/bot_branch/bot_branch.json',
            'entity/bot_claws',
            'entity/bot_claws/bot_claws.json',
            'entity/bot_dukh',
            'entity/bot_dukh/bot_dukh.json',
            'entity/bot_elder',
            'entity/bot_elder/bot_elder.json',
            'entity/bot_exit',
            'entity/bot_exit/bot_exit.json',
            'entity/bot_fighting',
            'entity/bot_fighting/bot_fighting.json',
            'entity/bot_ginger',
            'entity/bot_ginger/bot_ginger.json',
            'entity/bot_home',
            'entity/bot_home/bot_home.json',
            'entity/bot_homy',
            'entity/bot_homy/bot_homy.json',
            'entity/bot_lost_cat',
            'entity/bot_lost_cat/bot_lost_cat.json',
            'entity/bot_moth',
            'entity/bot_moth/bot_moth.json',
            'entity/bot_pumpkin',
            'entity/bot_pumpkin/bot_pumpkin.json',
            'entity/bot_star',
            'entity/bot_star/bot_star.json',
            'entity/bot_tribe',
            'entity/bot_tribe/bot_tribe.json',
            'entity/bot_twins',
            'entity/bot_twins/bot_twins.json',
            'entity/bot_wounded',
            'entity/bot_wounded/bot_wounded.json',
            'entity/bowl_food',
            'entity/bowl_food/bowl_food.json',
            'entity/bowl_water',
            'entity/bowl_water/bowl_water.json',
            'entity/bunch_leaves',
            'entity/bunch_leaves/bunch_leaves.json',
            'entity/bush',
            'entity/bush/bush.json',
            'entity/butterfly',
            'entity/butterfly/butterfly.json',
            'entity/cat',
            'entity/cat/cat.json',
            'entity/cat2',
            'entity/cat2/cat2.json',
            'entity/catfish',
            'entity/catfish/catfish.json',
            'entity/christmas_tree',
            'entity/christmas_tree/christmas_tree.json',
            'entity/corvus',
            'entity/corvus/corvus.json',
            'entity/eagle',
            'entity/eagle/eagle.json',
            'entity/elderly',
            'entity/elderly/elderly.json',
            'entity/fake_hedgehog',
            'entity/fake_hedgehog/fake_hedgehog.json',
            'entity/fern',
            'entity/fern/fern.json',
            'entity/fireflies',
            'entity/fireflies/fireflies.json',
            'entity/fish',
            'entity/fish/fish.json',
            'entity/fox',
            'entity/fox/fox.json',
            'entity/grass',
            'entity/grass/grass.json',
            'entity/guardian',
            'entity/guardian/guardian.json',
            'entity/hill',
            'entity/hill/hill.json',
            'entity/hillsnow',
            'entity/hillsnow/hillsnow.json',
            'entity/jasmine',
            'entity/jasmine/jasmine.json',
            'entity/kitty',
            'entity/kitty/kitty.json',
            'entity/marigold',
            'entity/marigold/marigold.json',
            'entity/meles',
            'entity/meles/meles.json',
            'entity/millipede',
            'entity/millipede/millipede.json',
            'entity/mole',
            'entity/mole/mole.json',
            'entity/mouse',
            'entity/mouse/mouse.json',
            'entity/mud',
            'entity/mud/mud.json',
            'entity/nettle',
            'entity/nettle/nettle.json',
            'entity/none',
            'entity/none/none.json',
            'entity/plant_achillea',
            'entity/plant_achillea/plant_achillea.json',
            'entity/plant_arctium',
            'entity/plant_arctium/plant_arctium.json',
            'entity/plant_bindweed',
            'entity/plant_bindweed/plant_bindweed.json',
            'entity/plant_calendula',
            'entity/plant_calendula/plant_calendula.json',
            'entity/plant_catmint',
            'entity/plant_catmint/plant_catmint.json',
            'entity/plant_elderberry',
            'entity/plant_elderberry/plant_elderberry.json',
            'entity/plant_equisetum',
            'entity/plant_equisetum/plant_equisetum.json',
            'entity/plant_malina',
            'entity/plant_malina/plant_malina.json',
            'entity/plant_sanguisorba',
            'entity/plant_sanguisorba/plant_sanguisorba.json',
            'entity/plant_tansy',
            'entity/plant_tansy/plant_tansy.json',
            'entity/plant_tulip',
            'entity/plant_tulip/plant_tulip.json',
            'entity/plant_tussilago',
            'entity/plant_tussilago/plant_tussilago.json',
            'entity/plant_yew',
            'entity/plant_yew/plant_yew.json',
            'entity/poppy',
            'entity/poppy/poppy.json',
            'entity/portal',
            'entity/portal/portal.json',
            'entity/puddle',
            'entity/puddle/puddle.json',
            'entity/pulmonaria',
            'entity/pulmonaria/pulmonaria.json',
            'entity/pumpkin',
            'entity/pumpkin/pumpkin.json',
            'entity/pyrethrum',
            'entity/pyrethrum/pyrethrum.json',
            'entity/rabbit',
            'entity/rabbit/rabbit.json',
            'entity/rat',
            'entity/rat/rat.json',
            'entity/roach',
            'entity/roach/roach.json',
            'entity/sleepbag',
            'entity/sleepbag/sleepbag.json',
            'entity/snail',
            'entity/snail/snail.json',
            'entity/snake',
            'entity/snake/snake.json',
            'entity/snow',
            'entity/snow/snow.json',
            'entity/snow2',
            'entity/snow2/snow2.json',
            'entity/spider',
            'entity/spider/spider.json',
            'entity/squirrel',
            'entity/squirrel/squirrel.json',
            'entity/stefan',
            'entity/stefan/stefan.json',
            'entity/stone',
            'entity/stone/stone.json',
            'entity/tree',
            'entity/tree/tree.json',
            'entity/tv',
            'entity/tv/tv.json',
            'entity/wasp',
            'entity/wasp/wasp.json',
            'entity/worm',
            'entity/worm/worm.json',
            'items',
            'items/items.json',
            'levels/preview',
            'levels/preview/preview.json',
            'environment/clouds.png',
            'environment/clouds.png',
            'environment/tuman.png',
            'environment/tuman.png',
            'environment/leaves.png',
            'environment/leaves.png',
            'environment/raindrop.png',
            'environment/raindrop.png',
            'environment/stars.png',
            'environment/stars.png',
            'environment/fog.png',
            'environment/fog.png',
            'environment/heart.png',
            'environment/heart.png',
            'environment/bubble.png',
            'environment/bubble.png',
            'environment/paw.png',
            'environment/paw.png',
            'environment/shadow.png',
            'environment/shadow.png',
            'environment/night.png',
            'environment/night.png',
            'environment/water.png',
            'environment/water.png',
            'ui/dialogs/car.png',
            'ui/dialogs/car.png',
            'ui/dialogs/dirt.png',
            'ui/dialogs/dirt.png',
            'ui/dialogs/home_m.png',
            'ui/dialogs/home_m.png',
            'ui/dialogs/home_f.png',
            'ui/dialogs/home_f.png',
            'ui/uiBgDamage.png',
            'ui/uiBgDamage.png',
            'ui/inventory.png',
            'ui/inventory.png',
            'ui/profile.png',
            'ui/profile.png',
            'ui/dialog.png',
            'ui/dialog.png',
            'ui/note.png',
            'ui/note.png',
            'ui/load.png',
            'ui/load.png',
            'ui/achievements/id0.png',
            'ui/achievements/id0.png',
            'ui/achievements/id1.png',
            'ui/achievements/id1.png',
            'ui/achievements/id2.png',
            'ui/achievements/id2.png',
            'ui/achievements/id3.png',
            'ui/achievements/id3.png',
            'ui/achievements/id4.png',
            'ui/achievements/id4.png',
            'ui/achievements/id5.png',
            'ui/achievements/id5.png',
            'ui/achievements/id6.png',
            'ui/achievements/id6.png',
            'ui/achievements/id7.png',
            'ui/achievements/id7.png',
            'ui/achievements/id8.png',
            'ui/achievements/id8.png',
            'ui/achievements/id9.png',
            'ui/achievements/id9.png',
            'ui/achievements/id10.png',
            'ui/achievements/id10.png',
            'ui/achievements/id11.png',
            'ui/achievements/id11.png',
            'ui/achievements/id12.png',
            'ui/achievements/id12.png',
            'ui/achievements/id13.png',
            'ui/achievements/id13.png',
            'ui/achievements/id14.png',
            'ui/achievements/id14.png',
            'ui/achievements/id15.png',
            'ui/achievements/id15.png',
            'ui/achievements/id16.png',
            'ui/achievements/id16.png',
            'ui/achievements/id17.png',
            'ui/achievements/id17.png',
            'ui/achievements/id18.png',
            'ui/achievements/id18.png',
            'ui/achievements/id19.png',
            'ui/achievements/id19.png',
            'ui/achievements/id20.png',
            'ui/achievements/id20.png',
            'ui/achievements/id21.png',
            'ui/achievements/id21.png',
            'ui/achievements/id22.png',
            'ui/achievements/id22.png',
            'ui/achievements/id23.png',
            'ui/achievements/id23.png',
            'ui/achievements/id24.png',
            'ui/achievements/id24.png',
            'ui/achievements/id25.png',
            'ui/achievements/id25.png',
            'ui/achievements/id26.png',
            'ui/achievements/id26.png',
            'ui/achievements/id27.png',
            'ui/achievements/id27.png',
            'ui/achievements/id28.png',
            'ui/achievements/id28.png',
            'ui/achievements/id29.png',
            'ui/achievements/id29.png',
            'ui/achievements/id30.png',
            'ui/achievements/id30.png',
            'ui/achievements/id31.png',
            'ui/achievements/id31.png',
            'ui/achievements/id32.png',
            'ui/achievements/id32.png',
            'ui/achievements/id33.png',
            'ui/achievements/id33.png',
            'ui/achievements/id34.png',
            'ui/achievements/id34.png',
            'ui/achievements/id35.png',
            'ui/achievements/id35.png',
            'ui/achievements/id36.png',
            'ui/achievements/id36.png',
            'ui/achievements/id37.png',
            'ui/achievements/id37.png',
            'ui/backgrounds/game_tree.png',
            'ui/backgrounds/game_tree.png',
            'ui/backgrounds/menu.png',
            'ui/backgrounds/menu.png',
            'ui/backgrounds/menu_custom.png',
            'ui/backgrounds/menu_custom.png',
            'ui/backgrounds/menu_ny.png',
            'ui/backgrounds/menu_ny.png',
            'ui/backgrounds/menu_winter.png',
            'ui/backgrounds/menu_winter.png',
            'sounds/blow.mp3',
            'sounds/blow.mp3',
            'sounds/alert.mp3',
            'sounds/alert.mp3',
            'sounds/birds.mp3',
            'sounds/birds.mp3',
            'sounds/crickets.mp3',
            'sounds/crickets.mp3',
            'sounds/tikopia.mp3',
            'sounds/tikopia.mp3',
            'sounds/rain.mp3',
            'sounds/rain.mp3',
            'sounds/wind.mp3',
            'sounds/wind.mp3',
            'sounds/hit.mp3',
            'sounds/hit.mp3',
            'sounds/car.mp3',
            'sounds/car.mp3',
            'sounds/mouse.mp3',
            'sounds/mouse.mp3',
            'sounds/snake.mp3',
            'sounds/snake.mp3',
            'sounds/splash.mp3',
            'sounds/splash.mp3',
            'sounds/thunder1.mp3',
            'sounds/thunder1.mp3',
            'sounds/thunder2.mp3',
            'sounds/thunder2.mp3',
            'sounds/thunder3.mp3',
            'sounds/thunder3.mp3',
            'sounds/thunder4.mp3',
            'sounds/thunder4.mp3',
            'sounds/thunder5.mp3',
            'sounds/thunder5.mp3',
            'sounds/thunder6.mp3',
            'sounds/thunder6.mp3',
            'sounds/water1.mp3',
            'sounds/water1.mp3',
            'sounds/water2.mp3',
            'sounds/water2.mp3',
            'sounds/water3.mp3',
            'sounds/water3.mp3',
            'sounds/water4.mp3',
            'sounds/water4.mp3',
            'sounds/grass1.mp3',
            'sounds/grass1.mp3',
            'sounds/grass2.mp3',
            'sounds/grass2.mp3',
            'sounds/grass3.mp3',
            'sounds/grass3.mp3',
            'sounds/grass4.mp3',
            'sounds/grass4.mp3',
            'sounds/step1.mp3',
            'sounds/step1.mp3',
            'sounds/step2.mp3',
            'sounds/step2.mp3',
            'sounds/step3.mp3',
            'sounds/step3.mp3',
            'sounds/step4.mp3',
            'sounds/step4.mp3',
            'sounds/levelup.mp3',
            'sounds/levelup.mp3',
            'sounds/time.mp3',
            'sounds/time.mp3',
            'sounds/xmas.mp3',
            'sounds/xmas.mp3',
            'sounds/corvus.mp3',
            'sounds/corvus.mp3',
            'sounds/eagle.mp3',
            'sounds/eagle.mp3',
            'sounds/waterfall.mp3',
            'sounds/waterfall.mp3',
            'sounds/magic.mp3',
            'sounds/magic.mp3',
            'sounds/help.mp3',
            'sounds/help.mp3',
          ],
        }),
        Game.goToScene('load')) :
      ((this.btnNext.visible = false),
        (this.tribes.alpha = 0),
        (this.tribeSelected = true),
        setTimeout(function() {
          'tribe' == Game.scenes.activeName &&
            (Game.scenes.active.btnNext.visible = true)
        }, 3000),
        Game.resizeToWindow())
  }
  this.update = function(apf) {
    var apg = this.tribes,
      aph = this.bg
    apg.alpha < 1 ?
      (apg.alpha += 0.001 * apf) :
      (apg.alpha = 1)
    aph.alpha < 0.5 ?
      (aph.alpha += 0.00025 * apf) :
      (aph.alpha = 0.5)
  }
  this.resize = function(apj, apk) {
    Game.calcBackground(this.bg)
    var apl = this.btnNext
    apl.position.set(
      apj - apl.width / 2,
      apk - apl.height / 2
    )
    this.textTitle.position.set(apj / 2, apl.height / 2)
    this.tribes.position.set(apj / 2, apk / 2)
  }
}

function apm() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var apn = Game.resources.ui.textures,
      apo = (this.bgGame = new PIXI.TilingSprite(
        PIXI.Texture.from('ui/backgrounds/game_tree.png')
      )),
      apo =
      ((apo.interactive = true),
        apo.on(
          'pointerup',
          function() {
            var apq = PIXI.sound.find('sounds/click.mp3')
            apq.volume = Game.setMaxVolumeSounds
            apq.play()
            this.findBrunch()
          },
          this
        ),
        this.addChild(apo),
        (this.entities = new PIXI.Container()),
        this.addChild(this.entities),
        (this.particles = new PIXI.Container())),
      apo =
      (this.addChild(apo),
        (this.particle = new PIXI.particles.Emitter(apo)),
        (this.sliderGame = new PIXI.Sprite(apn['sliderGame.png']))),
      apo =
      (apo.anchor.set(0.5),
        (apo.alpha = 0.5),
        this.addChild(apo),
        (this.gamePaw = new PIXI.Container())),
      apr = (this.fullPaw = new PIXI.TilingSprite(apn['paw1.png'])),
      aps = new PIXI.Sprite(apn['paw0.png']),
      aps =
      (aps.anchor.set(0.5, 0),
        apr.anchor.set(0.5, 0),
        apo.addChild(aps),
        apo.addChild(apr),
        (apr.width = 35),
        apr.position.set(0, 176),
        apr.tilePosition.set(-17.5, -1),
        this.addChild(apo),
        (this.textStatGame = new PIXI.Text('', {
          fontVariant: 'small-caps',
          fontSize: 16,
          fill: 16777215,
          fontWeight: 'bold',
        }))),
      apr =
      (aps.anchor.set(0.5, 0),
        this.addChild(aps),
        (this.btnBack = Game.createButton(apn, 'buttonClose.png')))
    apr.on(
      'pointerup',
      function() {
        this.stopGame()
      },
      this
    )
    this.addChild(apr)
  }
  this.start = function() {
    var apt = (this.actionData = Game.sceneConfig)
    this.timeGame = apt.duration - 10000
    this.spawnTime = 0
    this.speed = 1
    this.bgGame.tilePosition.y = 0
    this.sliderGame.height = 100
    this.sliderGame.visible = true
    this.gamePaw.visible = false
    this.gameOver = false
    Game.playMusic('game', false)
    Game.resizeToWindow()
  }
  this.update = function(apu) {
    for (
      var apv,
        apw = this.gamePaw,
        apx = 0.1 * apu * this.speed,
        apy = Game.app.screen.height,
        apz = 0; apz < this.entities.children.length; apz++
    ) {
      ;
      (apv = this.entities.children[apz]).position.y += apx
      apv.position.y > 2 * apy && apv.destroy()
    }
    this.bgGame.tilePosition.y += apx
    this.gameOver ?
      ((this.speed -= 0.01 * apu),
        (apw.position.y -= apx),
        0 < this.sliderGame.height - 0.1 * apu ?
        (this.sliderGame.height -= 0.1 * apu) :
        (this.sliderGame.visible = false),
        this.speed < -20 && this.stopGame()) :
      (0 < this.spawnTime ?
        (this.spawnTime -= apx) :
        ((this.spawnTime = 100 + Math.random() * apy * 0.25),
          this.addBranch()),
        0 < this.timeGame ?
        ((this.timeGame -= apu),
          (this.textStatGame.text =
            'Осталось времени: ' + Math.ceil(0.001 * this.timeGame) + ' с')) :
        (Game.threads.push({
            query: Game.packet.ENTITY_INTERACT,
            interactId: Game.packet.INTERACT_ACTION_WIN,
          }),
          Game.connectToServer()),
        apw.position.y > apy && this.stopGame(),
        (this.speed += 0.00004 * apu),
        (this.sliderGame.height -= 0.0005 * apu),
        (apw.position.y += apx))
  }
  this.findBrunch = function() {
    for (
      var aqa,
        aqb = 0.5 * Game.app.screen.height,
        aqc = 0.5 * this.sliderGame.height,
        aqd = 0; aqd < this.entities.children.length; aqd++
    ) {
      if (
        (aqa = this.entities.children[aqd]).position.y >
        aqb - aqc &&
        aqa.position.y < aqb + aqc
      ) {
        return void this.grabBrunch(aqa.position.x, aqa.position.y)
      }
    }
    this.stopGame()
  }
  this.grabBrunch = function(aqe, aqf) {
    var aqg = this.gamePaw
    aqg.position.set(aqe, aqf)
    aqg.rotation = aqe > Game.app.screen.width / 2 ? -0.79 : 0.79
    aqg.visible = true
  }
  this.addBranch = function() {
    var aqh = this.gamePaw,
      aqi = 0.5 < Math.random() ? 0 : 1,
      aqj = Game.resources.ui.textures,
      aqj = new PIXI.Sprite(aqj['over' + aqi + '.png']),
      aqi =
      50 +
      (Game.app.screen.width * aqi) / 2 +
      Math.random() * (Game.app.screen.width / 2 - 100)
    aqj.anchor.set(0.5)
    aqj.scale.set(0.5)
    aqj.position.set(aqi, -100)
    this.entities.addChild(aqj)
    aqh.visible || this.grabBrunch(aqi, -100)
  }
  this.stopGame = function() {
    this.gameOver &&
      (Game.threads.push({
          query: Game.packet.ENTITY_INTERACT,
          interactId: Game.packet.INTERACT_ACTION_STOP,
        }),
        Game.connectToServer())
    this.gameOver = true
    this.speed = 0
  }
  this.stop = function() {
    for (
      var aqk = this.entities.removeChildren(),
        aql = aqk.length - 1; 0 <= aql; aql--
    ) {
      aqk[aql].destroy()
    }
    Game.stopMusic()
  }
  this.resize = function(aqm, aqn) {
    var aqo = this.bgGame
    aqo.width = aqm
    aqo.height = aqn
    this.btnBack.position.set(aqm - 22, 22)
    aqo = this.sliderGame
    aqo.width = aqm
    aqo.position.set(aqm / 2, aqn / 2)
    this.fullPaw.height = aqn < aqm ? aqm : aqn
    this.textStatGame.position.set(aqm / 2, 10)
  }
}

function aqp() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var aqq = Game.resources.ui.textures,
      aqr = (this.bg = PIXI.Sprite.from(
        'ui/backgrounds/menu_settings.png'
      )),
      aqr =
      (this.addChild(aqr),
        (this.bgClass = new PIXI.Sprite(aqq['bgClass.png']))),
      aqr =
      ((aqr.width = 450),
        (aqr.height = 265),
        aqr.anchor.set(0.5),
        this.addChild(aqr),
        (this.textTitle = new PIXI.Text('Отключить сбор данных аналатики?', {
          fontSize: 18,
          fill: 16777215,
          fontWeight: 'bold',
        }))),
      aqr =
      (aqr.anchor.set(0.5),
        this.addChild(aqr),
        (this.textInfo = new PIXI.Text(
          'Сбор данных аналитики помогает нам улучшать игру. Этот параметр всегда можно изменить в настройках.', {
            fontSize: 16,
            fill: 16777215,
            align: 'center',
            wordWrap: true,
            wordWrapWidth: 400,
          }
        ))),
      aqr =
      (aqr.anchor.set(0.5),
        this.addChild(aqr),
        (this.btnNoCollectData = Game.createTextButton(
          'Да, отключить сбор данных', {
            fontSize: 14,
            fill: 16777215,
            fontWeight: 'bold',
          }
        ))),
      aqr =
      (aqr.on('pointerup', function() {
          Game.setNoData = 1
          Game.myStorage.set('inputSetNoData', Game.setNoData)
          Game.goToScene('tribe')
        }),
        this.addChild(aqr),
        (this.btnCollectData = Game.createButton(aqq, 'button.png'))),
      aqq = new PIXI.Text('Оставить', {
        fontVariant: 'small-caps',
        fontSize: Game.btnFontSize,
        fill: 16777215,
        fontWeight: 'bold',
      })
    aqq.anchor.set(0.5)
    aqr.addChild(aqq)
    aqr.on('pointerup', function() {
      Game.setNoData = 0
      Game.myStorage.set('inputSetNoData', Game.setNoData)
      Game.goToScene('tribe')
    })
    this.addChild(aqr)
  }
  this.start = function() {
    Game.isCordova && null == Game.myStorage.get('inputSetNoData') ?
      Game.resizeToWindow() :
      Game.goToScene('tribe')
  }
  this.update = function(aqs) {}
  this.resize = function(aqt, aqu) {
    Game.calcBackground(this.bg)
    this.bgClass.position.set(0.5 * aqt, 0.5 * aqu)
    this.textTitle.position.set(0.5 * aqt, 0.5 * aqu - 100)
    this.btnCollectData.position.set(0.5 * aqt, 0.5 * aqu + 50)
    this.btnNoCollectData.position.set(0.5 * aqt, 0.5 * aqu + 100)
    this.textInfo.position.set(0.5 * aqt, 0.5 * aqu - 25)
  }
}

function aqv() {
  PIXI.scenes.Scene.call(this)
  this.init = function() {
    var aqw = Game.resources.ui.textures,
      aqx = (this.bg = PIXI.Sprite.from('ui/backgrounds/load.png')),
      aqx = (this.addChild(aqx), new PIXI.Container()),
      aqx =
      ((this.emitFlame = new PIXI.particles.Emitter(aqx)),
        this.addChild(aqx),
        (this.bgClass = new PIXI.Sprite(aqw['bgClass.png']))),
      aqx =
      ((aqx.width = 450),
        (aqx.height = 265),
        aqx.anchor.set(0.5),
        (aqx.tint = 0),
        this.addChild(aqx),
        (this.textTitle = new PIXI.Text(
          'Пожалуйста, оставьте свою оценку об игре', {
            fontSize: 18,
            fill: 16777215,
            fontWeight: 'bold',
          }
        ))),
      aqx =
      (aqx.anchor.set(0.5),
        this.addChild(aqx),
        (this.textInfo = new PIXI.Text(
          'Мы будем искренне благодарны, если вы поделитесь с нами своими эмоциями и впечатлениями об игре, указав ее сильные и слабые стороны, а также предложите улучшения, которые могли бы сделать игру еще лучше.', {
            fontSize: 16,
            fill: 16777215,
            align: 'center',
            wordWrap: true,
            wordWrapWidth: 400,
          }
        ))),
      aqx =
      (aqx.anchor.set(0.5),
        this.addChild(aqx),
        (this.btnReview = Game.createButton(aqw, 'button.png'))),
      aqy = new PIXI.Text('Оценить', {
        fontVariant: 'small-caps',
        fontSize: Game.btnFontSize,
        fill: 16777215,
        fontWeight: 'bold',
      }),
      aqy =
      (aqy.anchor.set(0.5),
        aqx.addChild(aqy),
        aqx.on('pointerup', function() {
          window.open(
            'https://play.google.com/store/apps/details?id=com.catlifeonline.catlife',
            '_system'
          )
          Game.goToScene('menu')
        }),
        this.addChild(aqx),
        (this.btnNoReview = Game.createButton(aqw, 'button.png'))),
      aqx = new PIXI.Text('Позже', {
        fontVariant: 'small-caps',
        fontSize: Game.btnFontSize,
        fill: 16777215,
        fontWeight: 'bold',
      })
    aqx.anchor.set(0.5)
    aqy.addChild(aqx)
    aqy.on('pointerup', function() {
      Game.goToScene('menu')
    })
    this.addChild(aqy)
  }
  this.start = function() {
    var aqz = new Date().getMonth()
    this.month = aqz
    this.bg.texture = PIXI.Texture.from(
      aqz < 11 && 1 < aqz ?
      'ui/backgrounds/load.png' :
      'ui/backgrounds/load_winter.png'
    )
    Game.isCordova && null == Game.myStorage.get('inputSetReview') ?
      (Game.myStorage.set('inputSetReview', 'inputSetReview'),
        Game.resizeToWindow()) :
      Game.goToScene('menu')
  }
  this.update = function(ara) {}
  this.resize = function(arb, arc) {
    var ard = this.bg,
      ard = (Game.calcBackground(ard), this.month),
      are = this.emitFlame,
      ard =
      10 < ard || ard < 2 ? ['environment/particle.png'] :
      10 == ard ? ['environment/leaf2.png', 'environment/leaf3.png'] :
      9 == ard ? ['environment/leaf2.png', 'environment/leaf1.png'] :
      8 == ard ? ['environment/leaf1.png', 'environment/leaf.png'] : ['environment/leaf.png'],
      arf = {
        x: 0,
        y: 0,
      }
    are.init({
      lifetime: {
        min: 0.017 * arc,
        max: 0.017 * arc,
      },
      frequency: 0.1,
      spawnChance: 1,
      particlesPerWave: 1,
      emitterLifetime: -1,
      maxParticles: 100,
      pos: arf,
      addAtBack: false,
      behaviors: [{
          type: 'alpha',
          config: arg,
        },
        arh,
        {
          type: 'moveSpeed',
          config: ari,
        },
        {
          type: 'spawnShape',
          config: {
            type: 'rect',
            data: {
              x: -arb,
              y: -10,
              w: 2 * arb,
              h: 0,
            },
          },
        },
        arj,
        {
          type: 'rotation',
          config: ark,
        },
      ],
    })
    are.autoUpdate = true
    are.update(10)
    this.bgClass.position.set(0.5 * arb, 0.5 * arc)
    this.textTitle.position.set(0.5 * arb, 0.5 * arc - 100)
    this.btnReview.position.set(0.5 * arb, 0.5 * arc + 50)
    this.btnNoReview.position.set(0.5 * arb, 0.5 * arc + 100)
    this.textInfo.position.set(0.5 * arb, 0.5 * arc - 30)
    var arl = {
      value: 0.1,
      time: 0,
    }
    var arm = {
      value: 0.5,
      time: 1,
    }
    var arn = {
      list: [arl, arm],
    }
    var arg = {
      alpha: arn
    }
    var aro = {
      value: 0.25,
      time: 0,
    }
    var arp = {
      value: 0.35,
      time: 1,
    }
    var arq = {
      list: [aro, arp],
    }
    var arr = {
      scale: arq,
      minMult: 1,
    }
    var arh = {
      type: 'scale',
      config: arr,
    }
    var ars = {
      value: 100,
      time: 0,
    }
    var art = {
      value: 150,
      time: 1,
    }
    var aru = {
      list: [ars, art],
    }
    var ari = {
      speed: aru,
      minMult: 1,
    }
    var arv = {
      textures: ard
    }
    var arj = {
      type: 'textureRandom',
      config: arv,
    }
    var ark = {
      minStart: 40,
      maxStart: 55,
      minSpeed: 30,
      maxSpeed: 45,
    }
    are.init({
        lifetime: {
          min: 0.017 * arc,
          max: 0.017 * arc,
        },
        frequency: 0.1,
        spawnChance: 1,
        particlesPerWave: 1,
        emitterLifetime: -1,
        maxParticles: 100,
        pos: arf,
        addAtBack: false,
        behaviors: [{
            type: 'alpha',
            config: arg,
          },
          arh,
          {
            type: 'moveSpeed',
            config: ari,
          },
          {
            type: 'spawnShape',
            config: {
              type: 'rect',
              data: {
                x: -arb,
                y: -10,
                w: 2 * arb,
                h: 0,
              },
            },
          },
          arj,
          {
            type: 'rotation',
            config: ark,
          },
        ],
      }),
      (are.autoUpdate = true),
      are.update(10),
      this.bgClass.position.set(0.5 * arb, 0.5 * arc),
      this.textTitle.position.set(0.5 * arb, 0.5 * arc - 100),
      this.btnReview.position.set(0.5 * arb, 0.5 * arc + 50),
      this.btnNoReview.position.set(0.5 * arb, 0.5 * arc + 100),
      this.textInfo.position.set(0.5 * arb, 0.5 * arc - 30)
  }
}
var arw = {}
window.getBrowserFingerprint = function(arx) {
  var ary,
    arz,
    asa,
    asb,
    asc = (arx = arx || {}).hardwareOnly || false,
    asd = arx.enableWebgl || false,
    ase =
    'undefined' == typeof arx.enableScreen || arx.enableScreen,
    arx = arx.debug || false,
    asf = window.navigator.cookieEnabled,
    asg = window.navigator.deviceMemory,
    ash = window.navigator.doNotTrack,
    asi = window.navigator.hardwareConcurrency,
    asj = window.navigator.language,
    ask = window.navigator.languages,
    asl = window.navigator.maxTouchPoints,
    asm = window.navigator.platform,
    asn = window.navigator.userAgent,
    aso = window.navigator.vendor,
    ase =
    (ase &&
      ((ary = window.screen.width),
        (arz = window.screen.height),
        (asa = window.screen.colorDepth),
        (asb = window.screen.pixelDepth)),
      new Date().getTimezoneOffset()),
    asp = ''
  try {
    asp =
      'undefined' != typeof window.Intl ?
      Intl.DateTimeFormat().resolvedOptions().timeZone :
      ''
  } catch (asq) {}
  var asr = 'undefined' != typeof window.ontouchstart,
    ass = window.devicePixelRatio,
    ast = getCanvasID(arx),
    asu = asd ? getWebglID(arx) : undefined,
    asd = asd ? getWebglInfo(arx) : undefined,
    asc = asc ?
    JSON.stringify({
      canvas: ast,
      colorDepth: asa,
      deviceMemory: asg,
      devicePixelRatio: ass,
      hardwareConcurrency: asi,
      height: arz,
      maxTouchPoints: asl,
      pixelDepth: asb,
      platform: asm,
      touchSupport: asr,
      webgl: asu,
      webglInfo: asd,
      width: ary,
    }) :
    JSON.stringify({
      canvas: ast,
      colorDepth: asa,
      cookieEnabled: asf,
      deviceMemory: asg,
      devicePixelRatio: ass,
      doNotTrack: ash,
      hardwareConcurrency: asi,
      height: arz,
      language: asj,
      languages: ask,
      maxTouchPoints: asl,
      pixelDepth: asb,
      platform: asm,
      timezone: asp,
      timezoneOffset: ase,
      touchSupport: asr,
      userAgent: asn,
      vendor: aso,
      webgl: asu,
      webglInfo: asd,
      width: ary,
    }),
    ast = JSON.stringify(asc, null, 4)
  return (
    arx && console.log('fingerprint data', ast),
    murmurhash3_32_gc(ast)
  )
}
window.getCanvasID = function(asv) {
  try {
    var asw = document.createElement('canvas'),
      asx = asw.getContext('2d'),
      asy =
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`~1!2@3#4$5%6^7&8*9(0)-_=+[{]}|;:',<.>/?",
      asz =
      ((asx.textBaseline = 'top'),
        (asx.font = "14px 'Arial'"),
        (asx.textBaseline = 'alphabetic'),
        (asx.fillStyle = '#f60'),
        asx.fillRect(125, 1, 62, 20),
        (asx.fillStyle = '#069'),
        asx.fillText(asy, 2, 15),
        (asx.fillStyle = 'rgba(102, 204, 0, 0.7)'),
        asx.fillText(asy, 4, 17),
        asw.toDataURL())
    return (
      asv ?
      document.body.appendChild(asw) :
      asx.clearRect(0, 0, asw.width, asw.height),
      murmurhash3_32_gc(asz)
    )
  } catch (ata) {
    return null
  }
}
window.getWebglID = function(atb) {
  try {
    var atc = document.createElement('canvas'),
      atd = atc.getContext('webgl'),
      ate =
      ((atc.width = 256),
        (atc.height = 128),
        atd.createBuffer()),
      atf =
      (atd.bindBuffer(atd.ARRAY_BUFFER, ate),
        new Float32Array([-0.2, -0.9, 0, 0.4, -0.26, 0, 0, 0.7321, 0])),
      atg =
      (atd.bufferData(
          atd.ARRAY_BUFFER,
          atf,
          atd.STATIC_DRAW
        ),
        (ate.itemSize = 3),
        (ate.numItems = 3),
        atd.createProgram()),
      ath = atd.createShader(atd.VERTEX_SHADER),
      ati =
      (atd.shaderSource(
          ath,
          'attribute vec2 attrVertex;varying vec2 varyinTexCoordinate;uniform vec2 uniformOffset;void main(){varyinTexCoordinate=attrVertex+uniformOffset;gl_Position=vec4(attrVertex,0,1);}'
        ),
        atd.compileShader(ath),
        atd.createShader(atd.FRAGMENT_SHADER)),
      atj =
      (atd.shaderSource(
          ati,
          'precision mediump float;varying vec2 varyinTexCoordinate;void main() {gl_FragColor=vec4(varyinTexCoordinate,0,1);}'
        ),
        atd.compileShader(ati),
        atd.attachShader(atg, ath),
        atd.attachShader(atg, ati),
        atd.linkProgram(atg),
        atd.useProgram(atg),
        (atg.vertexPosAttrib = atd.getAttribLocation(
          atg,
          'attrVertex'
        )),
        (atg.offsetUniform = atd.getUniformLocation(
          atg,
          'uniformOffset'
        )),
        atd.enableVertexAttribArray(atg.vertexPosArray),
        atd.vertexAttribPointer(
          atg.vertexPosAttrib,
          ate.itemSize,
          atd.FLOAT,
          false,
          0,
          0
        ),
        atd.uniform2f(atg.offsetUniform, 1, 1),
        atd.drawArrays(atd.TRIANGLE_STRIP, 0, ate.numItems),
        new Uint8Array(atc.width * atc.height * 4)),
      atk =
      (atd.readPixels(
          0,
          0,
          atc.width,
          atc.height,
          atd.RGBA,
          atd.UNSIGNED_BYTE,
          atj
        ),
        JSON.stringify(atj).replace(/,?"[0-9]+":/g, ''))
    return (
      atb ?
      document.body.appendChild(atc) :
      atd.clear(
        atd.COLOR_BUFFER_BIT |
        atd.DEPTH_BUFFER_BIT |
        atd.STENCIL_BUFFER_BIT
      ),
      murmurhash3_32_gc(atk)
    )
  } catch (atl) {
    return null
  }
}
window.getWebglInfo = function() {
  try {
    var atm = document.createElement('canvas').getContext('webgl')
    return {
      VERSION: String(atm.getParameter(atm.VERSION)),
      SHADING_LANGUAGE_VERSION: String(
        atm.getParameter(atm.SHADING_LANGUAGE_VERSION)
      ),
      VENDOR: String(atm.getParameter(atm.VENDOR)),
      SUPORTED_EXTENSIONS: String(atm.getSupportedExtensions()),
    }
  } catch (atn) {
    return null
  }
}
window.murmurhash3_32_gc = function(ato) {
  for (
    var atp,
      atq,
      atr = 3 & ato.length,
      ats = ato.length - atr,
      att = 0; att < ats; att++
  ) {
    atu =
      (255 & ato.charCodeAt(att)) |
      ((255 & ato.charCodeAt(++att)) << 8) |
      ((255 & ato.charCodeAt(++att)) << 16) |
      ((255 & ato.charCodeAt(++att)) << 24)
      ++att
    atp =
      27492 +
      (65535 &
        (atq =
          (5 *
            (65535 &
              (atp =
                ((atp ^= atu =
                    ((65535 &
                        (atu =
                          ((atu =
                              ((65535 & atu) * 3432918353 +
                                ((((atu >>> 16) * 3432918353) & 65535) << 16)) &
                              4294967295) <<
                            15) |
                          (atu >>> 17))) *
                      461845907 +
                      ((((atu >>> 16) * 461845907) & 65535) << 16)) &
                    4294967295) <<
                  13) |
                (atp >>> 19))) +
            (((5 * (atp >>> 16)) & 65535) << 16)) &
          4294967295)) +
      (((58964 + (atq >>> 16)) & 65535) << 16)
  }
  var att = ats - 1,
    atu = 0
  switch (atr) {
    case 3:
      atu ^= (255 & ato.charCodeAt(att + 2)) << 16
      break
    case 2:
      atu ^= (255 & ato.charCodeAt(att + 1)) << 8
      break
    case 1:
      atu ^= 255 & ato.charCodeAt(att)
  }
  return (
    (atp =
      (2246822507 *
        (65535 &
          (atp =
            (atp =
              atp ^
              (atu =
                ((65535 &
                    (atu =
                      ((atu =
                          ((65535 & atu) * 3432918353 +
                            ((((atu >>> 16) * 3432918353) & 65535) << 16)) &
                          4294967295) <<
                        15) |
                      (atu >>> 17))) *
                  461845907 +
                  ((((atu >>> 16) * 461845907) & 65535) << 16)) &
                4294967295) ^
              ato.length) ^
            (atp >>> 16))) +
        (((2246822507 * (atp >>> 16)) & 65535) << 16)) &
      4294967295),
    (atp =
      (3266489909 * (65535 & (atp ^= atp >>> 13)) +
        (((3266489909 * (atp >>> 16)) & 65535) << 16)) &
      4294967295),
    (atp ^= atp >>> 16) >>> 0
  )
}
am.prototype = Object.create(PIXI.Container.prototype);
(am.prototype.constructor = am).DATA_DEFAULT_SIZE = arw
am.DATA_ANIM_SPEED = atv
am.DATA_ANIM_CAT_SPEED = atw
am.DATA_ACTION_ANIM = atx
fv.prototype = Object.create(PIXI.scenes.Scene.prototype)
fv.prototype.constructor = fv
ip.prototype = Object.create(PIXI.scenes.Scene.prototype)
ip.prototype.constructor = ip
agq.quotes = [
  'Подозрительный храп доносится из палатки предводителя. Интересно, что за зверь там живет?',
  'Желтый снег есть нельзя.',
  'Не стоит жевать все подряд.',
  'Кваканье лягушек \u2014 лучшая музыка.',
  'Иногда из воды можно выловить опасную рыбу. Будьте осторожны.',
  'Птицы могут улететь, ну надо же!',
  'Не забывайте следить за энергией во время охоты!',
  'В холодном камне живут души предков.',
  'Таинственный Скульптор оставил несколько статуй во дворе своего дома.',
  'В дубах можно услышать цоканье белок.',
  'Журчанье реки всегда успокаивает.',
  'Не забывай смотреть в небо, когда заходишь в горы, путник!',
  'Двуногие часто выкидывают мусор вдоль гремящих троп.',
  'Не верь лисицам!',
  'Держи нос по ветру и хвост трубой!',
  'Перед началом игры не забудь заглянуть в Заметки племени.',
  'Охота на крупную дичь требует больше сил.',
  'Всегда иди по запаху, чтобы не заблудиться в незнакомом месте.',
  'Барсуки хоть и сильные, но медлительные.',
  'Иногда можно выкопать вкусные вещи.',
  'На территории домашних полно интересных и незнакомых вещей.',
  'Кто подкинул испорченные тапки мне в лежанку?!',
  'Некоторые рыбы в реке очень больно кусаются.',
  'Будьте аккуратны, гуляя по городу \u2013 там водятся чудища, крысы и бродячие собаки.',
  'Иногда в голову прилетают интересные вещи. Например, жёлудь.',
  'Ходит слух, что если съесть странное блестящее яблоко, мир заиграет новыми красками.',
  'Твори добро при жизни, чтобы не очутиться в Беззвездном лесу.',
  'Эта длинная и странная рыба пытается съесть меня!',
  'Да где растёт эта кошачья мята?!',
  'Клан \u2013 не единственные котики, что проживают в горах.',
  'Убедительно просим вас не лизать сосульки при сильном морозе.',
]
agq.prototype = Object.create(PIXI.scenes.Scene.prototype)
agq.prototype.constructor = agq
ahu.prototype = Object.create(PIXI.scenes.Scene.prototype)
ahu.prototype.constructor = ahu
ais.THEME_DEFAULT = 0
ais.THEME_WINTER = 1
ais.THEME_HOLIDAY = 2
ais.prototype = Object.create(PIXI.scenes.Scene.prototype)
ais.prototype.constructor = ais
akz.prototype = Object.create(PIXI.scenes.Scene.prototype)
akz.prototype.constructor = akz
alg.prototype = Object.create(PIXI.scenes.Scene.prototype)
alg.prototype.constructor = alg
amj.prototype = Object.create(PIXI.scenes.Scene.prototype)
amj.prototype.constructor = amj
ane.prototype = Object.create(PIXI.scenes.Scene.prototype)
ane.prototype.constructor = ane
aox.prototype = Object.create(PIXI.scenes.Scene.prototype)
aox.prototype.constructor = aox
apm.prototype = Object.create(PIXI.scenes.Scene.prototype)
apm.prototype.constructor = apm
aqp.prototype = Object.create(PIXI.scenes.Scene.prototype)
aqp.prototype.constructor = aqp
aqv.prototype = Object.create(PIXI.scenes.Scene.prototype)
aqv.prototype.constructor = aqv
window.Game = {
  version: 'v5.1.2',
  versionPatch: '.00',
  versionCode: 'v336',
  versionName: "Summer Update '24",
  isWebGLSupported: false,
  imageCacheInitialized: false,
  isCordova: false,
  holidayTheme: 'default',
  safeCloseClicks: 0,
  resources: {},
  unloadLoader: function(aty) {
    for (var atz in aty.resources)
      Game.resources[atz] = aty.resources[atz]
    aty.reset()
  },
  serverStaticContent: '',
  levelPath: '',
  nextSceneName: null,
  months: [
    'янв',
    'фев',
    'мар',
    'апр',
    'мая',
    'июн',
    'июл',
    'авг',
    'сен',
    'окт',
    'нояб',
    'дек',
  ],
  serverHost: 'https://catlifeonline.com/',
  serverUrl: 'https://awakeriver.catlifeonline.com/',
  requiredHats: [0, 1, 2, 3, 4, 5, 6, 40],
  incompatibleHats: [
    [1, 87, 88, 89],
    [87, 88, 89, 59],
    [87, 88, 89, 60],
    [87, 88, 89, 61],
    [87, 88, 89, 62],
    [87, 88, 89, 63],
    [87, 88, 89, 64],
    [87, 88, 89, 82],
    [87, 88, 89, 84],
    [87, 88, 89, 85],
    [87, 88, 89, 76],
    [87, 88, 89, 74],
  ],
  supportEntityMask: aua,
  closedLocs: [
    '04f9a40461347e83dd44cac10d62cf67a4806f3f',
    '7faccd2d5388646f1a8dc8d3276675d64a49419e',
    '9cb45e69a3a8712f1ed4452c2f7cba6a09380258',
    '9f1346ff806c63bf9cf3f1c6422391feb42170ff',
    '9ee110da529ee76cccc45daa5784938890bb0f06',
    '12cac8a4ec51b66ef941117643b27b7baea5707a',
    '61a4e5ad6030b6c71fd9e94224a61ea116543034',
    '94dd3dec19e434b402c68d19a69ac6c3e9435927',
    '96a357efcfdb7917825165ca3ea4df7ee8b8dfb9',
    '345f61d57aec710e05e58e7341dee656a48880cc',
    '515f3ab015a942b9bf2bd231bb02a66903989b4c',
    '0561c6cdbcffbde61bc46c72a456ec54bfae8f62',
    '850ad2b49cbb0295aceb5e83b74d276eb9e5ce99',
    '2233eaeed675d75b109cd04a6a882558582e2e3e',
    '77846e0701f7ceb110c0497e98520abd25bc916e',
    '3443236b81fa457215bde04fcbbfc814175f290c',
    'b0cba44e9053facfd94f5582a9011dd759020b53',
    'df0a930c639dc9b3bdee54a789aabd7db125dd6b',
    'eb23135ed6a73ccbf9a67e3368fecb86e6217af8',
    'ef9ddae0978f111495d7c09a88f2d36bb8f55679',
    'ff532d3a8a03459d26a2f32cbec57948ae797d98',
    '52843bba0a53767306258123100b7daf656f18d1',
    'de8724c64eb03116e602eb16b51a506779b335b2',
    '37869232b08dea4ee81612863d4a2bd0cf0a818c',
    'dc17110d6d8b0b00fabf0aea95f4fe4a0c003eb7',
    'b0f0db223f58d5f112eade6a4d1dd31ba2f7fcab',
    '29c1913c-0cd7-48c5-ae99-e50403230500',
    '6f5e9996-1689-4775-b796-dfe44fc1518a',
    '2da060c7-ca9b-4413-b9f3-b05da0c2e823',
    '77b1236c-c7df-488f-a4fb-985bc955b954',
    '5d4203f0-3820-4f8e-9a26-4a436c6e4512',
    '0e1f18c5-b6dd-4394-bbaf-2a82e5bc4b25',
    '7988e002-83cc-4ce9-bfe9-b2799d1b540f',
    '5b11cbf3-d9c1-4522-9eab-fd9c30c66e8f',
    '56d496d5-69ec-4dd2-aaca-ca6c171d5e7c',
    '321c24a1-dd97-4875-93ee-31835bdc8d37',
    '72834578-509a-4873-8dd1-1b5277dc5ebd',
    '1e4e3d21-f655-4b47-afd2-61b06e43b33f',
    '35735d77-4e19-4652-8b16-78a0dc2f60c8',
    '5403fd92-a80b-4beb-8d23-3e7e4943e9db',
    '0b34641f-55cf-4fab-955c-d2c5af731f98',
    '0ea85f62-2e78-4961-b916-f492c91cc976',
    '4b45994d-7d59-41bf-9be5-3554959078c0',
    '7af6d6d0-c1ab-471d-8f65-c78cea720ab3',
    '7509e044-17de-4f47-8004-feb93e33febb',
    'af35cd69-c578-40db-b8b5-0968f65b6a81',
    'beb11ed4-c158-418c-8d40-343213fabc92',
    'c9ed52c4-3cd9-4cad-8405-dc06741c05b8',
    'cd985c23-71c0-470f-ae18-6703a2441405',
    'd103c047-26b7-409c-beb6-278d775b97f5',
    'd6279e87-28ce-45e6-a877-5eb5b87aee64',
    'ec39da1e-d33f-47b3-83a4-f17a29a83f5f',
    '187cf4af-5b5f-4720-bd8f-24fa9b8b60d0',
    'b5caca75-190e-4568-9c01-cd48e19986d2',
    'f8ee3a18-6a86-4f4b-867e-a3af42d5a12c',
    'ed6ec0fe-57e1-4786-b484-1e68a67d2e92',
    '2327b598-52af-4d8b-a4d7-b21f4b1e6cfe',
    '1d5bf90b-4b77-4729-ba39-3b17358f413e',
    '43869bea-a9ff-466d-9cee-ca0df6e345c4',
    '9851462a-64f3-4b6f-97a8-e4b004a082ed',
  ],
  lightedLocs: aub,
  emotes: [
    'catCheck',
    'catHmm',
    'catPls',
    'catWhy',
    'catConfuse',
    'catCrazy',
    'catCry',
    'catHeart',
    'catLol',
    'catLove',
    'catOh',
    'catSun',
    'catThink',
  ],
  app: null,
  platform: 'browser',
  chat: null,
  chatInput: null,
  chatBtnSend: null,
  pages: [],
  closeReason: null,
  stage: null,
  server: null,
  token: null,
  availableColors: [
    16447474, 16250871, 14661772, 8160138, 8288645, 12605486, 7158309, 13533524,
    12211501, 15655131, 13680053, 7891042, 3551280, 5787985, 10514255, 5653812,
    15459042, 13876412, 10584963, 10917503, 14143941, 1710630, 4406859, 6972531,
    7303011, 9931393, 3022868, 14271394, 12093807, 9530465, 7357240, 13225173,
    9738923, 4409428, 7103328, 14077128, 11906217, 14738411, 6975602, 3686209,
  ],
  eyeColors: [
    13236987, 9687037, 3121656, 4284404, 10990053, 6036765, 8410701, 16710650,
    16767077, 15972619, 15831815, 16150787, 16773787, 13030225, 10213134,
    3853377, 1808930, 9607852,
  ],
  sceneConfig: {},
  packets: [],
  threads: [],
  hideUi: false,
  firebaseInitialized: false,
  googlePlayAuthorized: false,
  cachedChatSprites: {},
  lastScroll: 0,
  lastPlaySound: 0,
  playerid: null,
  colors: null,
  username: null,
  playername: null,
  player_groups: [],
  currentMusic: null,
  nextMusicString: null,
  currentMusicType: null,
  isMusicLoad: false,
  observer: null,
  selectedChatChannel: 0,
  setMaxVolumeSounds: 0.5,
  setMaxVolumeMusic: 0.4,
  setMusic: 1,
  setLimitFps: 0,
  setMaxResolution: 1,
  setBoolAnimWind: 1,
  setMultLoad: 0,
  setShadows: 0,
  setFog: 0,
  setMaxLight: 0,
  setAudioBar: 1,
  setMaxVolumeSpeak: 0.2,
  setMuteNoFriend: 1,
  setChatNotice: 1,
  setChatEntity: 1,
  setSub: 0,
  setShaders: 0,
  setPixelInterpolation: 1,
  setNoData: 1,
  setUsePortal: 1,
  achievements: [],
  lastSeenLevel: [],
  btnFontSize: 16,
  currentPlaylist: {},
  mp3List: auc,
  myStorage: {
    remove: function(aud) {
      try {
        localStorage.removeItem('catlifegame_' + aud)
      } catch (aue) {
        return false
      }
      return true
    },
    set: function(auf, aug) {
      try {
        localStorage.setItem('catlifegame_' + auf, aug)
      } catch (auh) {
        return false
      }
      return true
    },
    get: function(aui, auj) {
      var auk
      try {
        auk = localStorage.getItem('catlifegame_' + aui)
      } catch (aul) {
        auk = null
      }
      if (
        (('null' != auk && '' != auk) || (auk = null),
          null != auj && auj)
      ) {
        try {
          auk = JSON.parse(auk)
        } catch (aum) {
          auk = null
        }
      }
      return auk
    },
  },
  auth: function() {
    Game.openWeb(
      'https://myaccount.catlifeonline.com/signin?url=https://myaccount.catlifeonline.com/play'
    )
  },
  telegramAuth: function() {
    Game.openWeb(
      'https://myaccount.catlifeonline.com/signin?url=https://myaccount.catlifeonline.com/telegram&catlife_token=' +
      Game.token
    )
  },
  openWeb: function(aun) {
    Game.isCordova ?
      ((Game.inAppBrowserRef = window.open(
          aun,
          '_blank',
          'hidenavigationbuttons=yes,hideurlbar=no,navigationbuttoncolor=#ffffff,toolbarcolor=#000000,closebuttoncolor=#ffffff,zoom=no,beforeload=yes'
        )),
        Game.inAppBrowserRef.addEventListener('message', Game.eventGetToken),
        Game.inAppBrowserRef.addEventListener(
          'beforeload',
          function(auo, aup) {
            Game.restrictAccess(auo.url) && aup(auo.url)
          }
        ),
        Game.inAppBrowserRef.addEventListener('loaderror', function() {
          Game.inAppBrowserRef.close()
        }),
        Game.inAppBrowserRef.addEventListener('exit', function() {
          Game.inAppBrowserRef = null
        })) :
      window.open(aun, '', 'width=800,height=450')
  },
  restrictAccess: function(auq) {
    return (
      (-1 === auq.indexOf('catlifeonline.com') &&
        -1 === auq.indexOf('worldcats.ru')) ||
      -1 !== auq.indexOf('/logout') ||
      -1 !== auq.indexOf('/legal.html') ||
      -1 !== auq.indexOf('/auth.php') ||
      -1 !== auq.indexOf('/privacypolicy.html') ||
      -1 !== auq.indexOf('myaccount.catlifeonline.com')
    )
  },
  goToScene: function(aur) {
    Game.scenes.activeName == aur && Game.scenes.stop()
    Game.scenes.start(aur)
  },
  playSound: function(aus, aut) {
    var auu = new Date().getTime();
    (null != aut &&
      0 < aut &&
      auu - Game.lastPlaySound < aut) ||
    (((aut = PIXI.sound.find('sounds/' + aus)).volume =
        Game.setMaxVolumeSounds),
      aut.play(),
      (Game.lastPlaySound = auu))
  },
  animList: function(auv, auw, aux) {
    var auy,
      auz = [],
      avb = []
    if (
      (null != aux && (auw += '/id' + aux),
        null != Game.resources['entity/' + auv])
    ) {
      for (
        var avc = Game.resources['entity/' + auv].textures,
          avd = auz.length - 1; avd < 10; avd++
      ) {
        null !=
          avc[
            (auy = auv + '/' + auw + '/' + avd) + '.png'
          ] &&
          (auz.push(avc[auy + '.png']),
            null != avc[auy + '_n.png']) &&
          avb.push(avc[auy + '_n.png'])
      }
    }
    var ave = {}
    return (
      (ave.texture = auz),
      (ave.normalTexture = avb),
      ave
    )
  },
  packet: avf,
  loadDom: function() {
    document.body.innerHTML +=
      '<div id="clGame">    <div id="clInteractPage" hidden="true"></div></div>'
    avg = Game.myStorage.get('version')
    Game.myStorage.set('version', Game.versionCode)
    null != window.requestFileSystem && null != window.ImgCache ?
      ((ImgCache.options.debug = true),
        (ImgCache.options.chromeQuota = 262144000),
        (ImgCache.options.localCacheFolder = 'catlife'),
        (ImgCache.options.usePersistentCache = true),
        Game.isCordova &&
        (ImgCache.options.cordovaFilesystemRoot = cordova.file.dataDirectory),
        ImgCache.init(
          function() {
            null != avg && avg != Game.versionCode ?
              ImgCache.clearCache(
                function() {
                  Game.imageCacheInitialized = true
                  Game.start()
                },
                function() {
                  Game.start()
                }
              ) :
              ((Game.imageCacheInitialized = true), Game.start())
          },
          function() {
            Game.start()
          }
        )) :
      Game.start()
    var avg,
      avh = ''
    avh += '<div id="clGame">';
    (document.body.innerHTML +=
      '<div id="clGame">    <div id="clInteractPage" hidden="true"></div></div>'),
    (avg = Game.myStorage.get('version')),
    Game.myStorage.set('version', Game.versionCode),
      null != window.requestFileSystem && null != window.ImgCache ?
      ((ImgCache.options.debug = true),
        (ImgCache.options.chromeQuota = 262144000),
        (ImgCache.options.localCacheFolder = 'catlife'),
        (ImgCache.options.usePersistentCache = true),
        Game.isCordova &&
        (ImgCache.options.cordovaFilesystemRoot =
          cordova.file.dataDirectory),
        ImgCache.init(
          function() {
            null != avg && avg != Game.versionCode ?
              ImgCache.clearCache(
                function() {
                  Game.imageCacheInitialized = true
                  Game.start()
                },
                function() {
                  Game.start()
                }
              ) :
              ((Game.imageCacheInitialized = true), Game.start())
          },
          function() {
            Game.start()
          }
        )) :
      Game.start()
  },
  start: function() {
    avi.add('preload', new akz())
    avi.add('login', new ahu())
    avi.add('load', new agq())
    avi.add('menu', new ais())
    avi.add('level', new ip())
    avi.add('cat', new fv())
    avi.add('hidden', new alg())
    avi.add('tribe', new aox())
    avi.add('swim', new amj())
    avi.add('swimtwo', new ane())
    avi.add('apple', new apm())
    avi.add('nodata', new aqp())
    avi.add('review', new aqv())
    Game.updateHolidayTheme()
    Game.goToScene('preload')
    window.addEventListener(
      'beforeunload',
      function() {
        !Game.isCordova && Game.pages.length < 1 && Game.app.destroy(true)
      },
      false
    )
    Game.scrollListener = null
    window.addEventListener('wheel', Game.onScrollWindow, false)
    window.addEventListener(
      'resize',
      function() {
        Game.resizeToWindow()
      },
      false
    )
    Game.resizeToWindow()
    Game.clInteractPageContent = document.getElementById('clInteractPage')
    Game.isCordova &&
      document.addEventListener(
        'backbutton',
        function(avj) {
          avj.preventDefault()
          'cat' == Game.scenes.activeName || 'hidden' == Game.scenes.activeName ?
            Game.goToScene('menu') :
            'level' == Game.scenes.activeName ?
            Game.safeServerClose() :
            ('menu' != Game.scenes.activeName &&
              'login' != Game.scenes.activeName) ||
            navigator.app.exitApp()
        },
        false
      )
    navigator.getUserMedia =
      navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia ||
      navigator.msGetUserMedia
    null != navigator.userAgent && -1 != navigator.userAgent.indexOf('Chrome') ?
      console.log(
        '%cCATLIFE%c ' +
        Game.version +
        Game.versionPatch +
        ' | https://play.worldcats.ru',
        'font-weight:bold;font-size:20px;color:#ffffff;background:#993300',
        'font-size:12px;color:#ffffff'
      ) :
      console.log(
        'CATLIFE ' +
        Game.version +
        Game.versionPatch +
        ' | https://play.worldcats.ru'
      )
    window.addEventListener('error', function(avk) {
      Game.isCordova &&
        0 === Game.setNoData &&
        'string' == typeof avk.error.message &&
        cordova.plugins.firebase.analytics.logEvent('error_message', {
          message: avk.error.message.substring(0, 100),
        })
    })
    Game.playername = Game.myStorage.get('playername')
    Game.username = Game.myStorage.get('username')
    var avi = Game.myStorage.get('sub_id'),
      avi =
      (null != avi && (Game.setSub = parseInt(avi)),
        Game.myStorage.get('selectedServer')),
      avi =
      (null != avi && (Game.selectedServer = avi),
        Game.myStorage.get('inputSetChatEntity')),
      avi =
      (null != avi && (Game.setChatEntity = parseInt(avi)),
        Game.myStorage.get('inputSetPixelInterpolation')),
      avi =
      (null != avi &&
        (Game.setPixelInterpolation = parseInt(avi)),
        Game.myStorage.get('inputSetNoData')),
      avi =
      (null != avi && (Game.setNoData = parseInt(avi)),
        Game.myStorage.get('inputSetChatNotice')),
      avi =
      (null != avi && (Game.setChatNotice = parseInt(avi)),
        Game.myStorage.get('colors'))
    null != avi && (Game.colors = JSON.parse(avi))
    try {
      null != (avl = localStorage.getItem('game_setMaxResolution')) &&
        (Game.setMaxResolution = parseFloat(avl))
    } catch (avm) {}
    try {
      null != (avn = localStorage.getItem('game_setMusic')) &&
        (Game.setMusic = parseInt(avn))
    } catch (avo) {}
    try {
      null != (avp = localStorage.getItem('game_setBoolAnimWind')) &&
        (Game.setBoolAnimWind = parseInt(avp))
    } catch (avq) {}
    try {
      null != (avr = localStorage.getItem('game_setMultLoad')) &&
        (Game.setMultLoad = parseInt(avr))
    } catch (avs) {}
    var avt,
      avu,
      avv,
      avi = Game.myStorage.get('setMaxVolumeMusic'),
      avl =
      (null != avi && (Game.setMaxVolumeMusic = parseFloat(avi)),
        Game.myStorage.get('setMaxVolumeSounds')),
      avn =
      (null != avl && (Game.setMaxVolumeSounds = parseFloat(avl)),
        Game.myStorage.get('setShadows')),
      avp =
      (null != avn && (Game.setShadows = parseInt(avn)),
        Game.myStorage.get('setFog')),
      avr =
      (null != avp && (Game.setFog = parseInt(avp)),
        Game.myStorage.get('setUsePortal')),
      avi =
      (null != avr && (Game.setUsePortal = parseInt(avr)),
        Game.myStorage.get('setMaxLight')),
      avl =
      (null != avi && (Game.setMaxLight = parseInt(avi)),
        Game.myStorage.get('setLimitFps'))
    null != avl && (Game.setLimitFps = parseInt(avl))
    try {
      null != (avt = localStorage.getItem('game_setAudioBar')) &&
        (Game.setAudioBar = parseInt(avt))
    } catch (avw) {}
    try {
      null != (avu = localStorage.getItem('game_setMaxVolumeSpeak')) &&
        (Game.setMaxVolumeSpeak = parseFloat(avu))
    } catch (avx) {}
    try {
      null != (avv = localStorage.getItem('game_setMuteNoFriend')) &&
        (Game.setMuteNoFriend = parseInt(avv))
    } catch (avy) {}
    var avz,
      avn = Game.myStorage.get('achievements')
    null != avn && (Game.achievements = JSON.parse(avn))
    Game.isCordova && ((Game.setAudioBar = 0), (Game.setMaxVolumeSpeak = 0))
    PIXI.Loader.shared.concurrency = 1 == Game.setMultLoad ? 2 : 1
    Game.clGame = document.getElementById('clGame')
    Game.app = new PIXI.Application({
      resolution: Game.setMaxResolution
    })
    1 == Game.setLimitFps && (Game.app.ticker.maxFPS = 30)
    Game.isWebGLSupported = PIXI.utils.isWebGLSupported()
    Game.isWebGLSupported ?
      ((avp = Game.app.renderer.context.extensions),
        null != (avr = Game.myStorage.get('inputSetShaders')) ?
        (Game.setShaders = avr) :
        ((Game.setShaders =
            2 == Game.app.renderer.context.webGLVersion ? 0 : 1),
          (Game.setShaders =
            null != avp.anisotropicFiltering ? 0 : Game.setShaders),
          (Game.setShaders =
            null != avp.floatTextureLinear ? 0 : Game.setShaders),
          (Game.setShaders =
            null != avp.s3tc_sRGB ? 0 : Game.setShaders),
          (Game.setShaders = null != avp.astc ? 0 : Game.setShaders),
          (Game.setShaders =
            null != avp.uint32ElementIndex ? 0 : Game.setShaders),
          (Game.setShaders = null != avp.etc ? 0 : Game.setShaders)),
        1 != Game.setShaders &&
        null != PIXI.display &&
        null != PIXI.display.Stage ?
        (Game.app.stage = new PIXI.display.Stage()) :
        (Game.isWebGLSupported = false)) :
      (Game.setShaders = 1)
    Game.stage = Game.app.stage
    Game.clGame.appendChild(Game.app.view)
    Game.app.renderer.plugins.interaction.cursorStyles.default =
      "url('cursor.png'),auto"
    Game.app.renderer.plugins.interaction.cursorStyles.pointer =
      "url('cursor.png'),auto"
    window.addEventListener('message', Game.eventGetToken)
    try {
      null != (avz = localStorage.getItem('gameToken1')) ?
        (Game.token = avz) :
        null != (avz = Game.getCookie('catlife_token')) &&
        ((Game.token = avz),
          Game.eventGetToken({
            data: {
              token: avz
            }
          }))
    } catch (awa) {}
    avi = Game.scenes = new PIXI.scenes.SceneManager(Game.app)
    avi.add('preload', new akz()),
      avi.add('login', new ahu()),
      avi.add('load', new agq()),
      avi.add('menu', new ais()),
      avi.add('level', new ip()),
      avi.add('cat', new fv()),
      avi.add('hidden', new alg()),
      avi.add('tribe', new aox()),
      avi.add('swim', new amj()),
      avi.add('swimtwo', new ane()),
      avi.add('apple', new apm()),
      avi.add('nodata', new aqp()),
      avi.add('review', new aqv()),
      Game.updateHolidayTheme(),
      Game.goToScene('preload'),
      window.addEventListener(
        'beforeunload',
        function() {
          !Game.isCordova && Game.pages.length < 1 && Game.app.destroy(true)
        },
        false
      ),
      (Game.scrollListener = null),
      window.addEventListener('wheel', Game.onScrollWindow, false),
      window.addEventListener(
        'resize',
        function() {
          Game.resizeToWindow()
        },
        false
      ),
      Game.resizeToWindow(),
      (Game.clInteractPageContent = document.getElementById('clInteractPage')),
      Game.isCordova &&
      document.addEventListener(
        'backbutton',
        function(avj) {
          avj.preventDefault()
          'cat' == Game.scenes.activeName ||
            'hidden' == Game.scenes.activeName ?
            Game.goToScene('menu') :
            'level' == Game.scenes.activeName ?
            Game.safeServerClose() :
            ('menu' != Game.scenes.activeName &&
              'login' != Game.scenes.activeName) ||
            navigator.app.exitApp()
        },
        false
      ),
      (navigator.getUserMedia =
        navigator.getUserMedia ||
        navigator.webkitGetUserMedia ||
        navigator.mozGetUserMedia ||
        navigator.msGetUserMedia),
      null != navigator.userAgent && -1 != navigator.userAgent.indexOf('Chrome') ?
      console.log(
        '%cCATLIFE%c ' +
        Game.version +
        Game.versionPatch +
        ' | https://play.worldcats.ru',
        'font-weight:bold;font-size:20px;color:#ffffff;background:#993300',
        'font-size:12px;color:#ffffff'
      ) :
      console.log(
        'CATLIFE ' +
        Game.version +
        Game.versionPatch +
        ' | https://play.worldcats.ru'
      )
  },
  updateHolidayTheme: function() {
    var awb = new Date(),
      awc = awb.getDate(),
      awb = awb.getMonth()
    Game.holidayTheme = 1 == awc && 3 == awb ? 'april' : 'default'
  },
  updateSubscribe: function(awd) {
    Game.myStorage.set('subscription', awd)
    Game.send({
      query: Game.packet.SUBSCRIBE_TOPIC,
      token: awd,
    })
  },
  browserSubscribe: function() {
    var awe
    Game.isCordova ?
      ((awe = cordova.plugins.firebase.messaging).onTokenRefresh(
          function() {
            awe.getToken().then(function(awf) {
              Game.updateSubscribe(awf)
            })
          }
        ),
        awe.getToken().then(function(awg) {
          Game.updateSubscribe(awg)
        }),
        (Game.firebaseInitialized = true)) :
      null != window.firebase &&
      null != window.Notification &&
      (Game.firebaseInitialized ||
        (firebase.initializeApp({
            apiKey: 'AIzaSyCYEmbXv9qkETgDjbRr4eqiU8UGv64TBmQ',
            authDomain: 'worldcat-df2a9.firebaseapp.com',
            projectId: 'worldcat-df2a9',
            storageBucket: 'worldcat-df2a9.appspot.com',
            messagingSenderId: '214042291268',
            appId: '1:214042291268:web:5bdbb60b76168dfa266011',
          }),
          (Game.firebaseInitialized = true)),
        (awe = firebase.messaging()).onTokenRefresh(function() {
          awe.getToken().then(function(awh) {
            Game.updateSubscribe(awh)
          })
        }),
        'denied' != Notification.permission) &&
      awe.requestPermission().then(function() {
        awe.getToken().then(function(awi) {
          Game.updateSubscribe(awi)
        })
      })
  },
  audio: {
    muted: true,
    time: 1000,
    stream: null,
    currentAudio: null,
    mediaRecorder: null,
    timeoutRecord: null,
    audioSrc: null,
    startRecord: function() {
      1 == Game.setAudioBar && navigator.getUserMedia ?
        navigator.getUserMedia(
          awj,
          function(awk) {
            awk.addEventListener(awl.nhFGp, function() {
              this.audioChunks = []
              Game.audio.timeoutRecord = awl.sjOET(
                setTimeout,
                function() {
                  null != Game.audio.mediaRecorder &&
                    Game.audio.mediaRecorder.stop()
                },
                Game.audio.time
              )
            })
            awk.addEventListener('dataavailable', function(awm) {
              null != this.audioChunks &&
                this.audioChunks.push(awm.data)
            })
            awk.addEventListener(awl.gcRmd, function() {
              var awn = new Blob(this.audioChunks),
                awo = ((this.audioChunks = []), new FileReader())
              awo.readAsDataURL(awn)
              awo.onloadend = function() {
                  null != Game.server && Game.server.emit('voice', this.result)
                }!Game.audio.muted &&
                'level' == Game.scenes.activeName &&
                Game.scenes.active.btnAudio.children[1].visible &&
                this.start()
            })
            awk.start()
            Game.audio.stream = awk
            awk = Game.audio.mediaRecorder = new MediaRecorder(
              awk
            )
            awk.addEventListener(awl.nhFGp, function() {
                this.audioChunks = []
                Game.audio.timeoutRecord = awl.sjOET(
                  setTimeout,
                  function() {
                    null != Game.audio.mediaRecorder &&
                      Game.audio.mediaRecorder.stop()
                  },
                  Game.audio.time
                )
              }),
              awk.addEventListener(
                'dataavailable',
                function(awm) {
                  null != this.audioChunks &&
                    this.audioChunks.push(awm.data)
                }
              ),
              awk.addEventListener(awl.gcRmd, function() {
                var awn = new Blob(this.audioChunks),
                  awo = ((this.audioChunks = []), new FileReader())
                awo.readAsDataURL(awn)
                awo.onloadend = function() {
                    null != Game.server &&
                      Game.server.emit('voice', this.result)
                  }!Game.audio.muted &&
                  'level' == Game.scenes.activeName &&
                  Game.scenes.active.btnAudio.children[1].visible &&
                  this.start()
              }),
              awk.start()
          },
          Game.audio.handleError
        ) :
        awl.UjSVI == Game.scenes.activeName &&
        (Game.scenes.active.btnAudio.children[1].text = 'Ошибка')
    },
    stopRecord: function() {
      clearTimeout(Game.audio.timeoutRecord)
      Game.audio.muted = true
      null != Game.audio.mediaRecorder &&
        (Game.audio.mediaRecorder.stop(), (Game.audio.mediaRecorder = null))
      null != Game.audio.stream &&
        (Game.audio.stream.getTracks().forEach(function(awp) {
            awp.stop()
          }),
          (Game.audio.stream = null))
    },
    handleError: function(awq) {
      'level' == Game.scenes.activeName &&
        (Game.scenes.active.btnAudio.children[1].text = 'Ошибка')
      console.log(awq)
    },
  },
  onScrollWindow: function(awr) {
    null != Game.scrollListener &&
      Game.scrollListener.onScrollWheel(awr, Game.scrollListener)
  },
  scrollToLastPoint: function() {
    var aws = document.getElementById('clScrollPage')
    null != aws &&
      ((aws.style.scrollBehavior = 'auto'),
        (aws.scrollTop = Game.lastScroll))
  },
  chatMessage: '',
  chatOffset: 0,
  chatPause: false,
  sendMessage: function() {
    Game.threads.push({
      query: Game.packet.CHAT_SEND,
      text: Game.chatMessage,
      channel: Game.selectedChatChannel,
    })
    Game.chatMessage = ''
    document.getElementById('textChatMessage').value = ''
  },
  clearChat: function() {
    var awt = document.getElementById('contentChat')
    awt && (awt.textContent = '')
    Game.chatPause = false
    Game.chatOffset = 0
  },
  updateChat: function() {
    Game.clearChat()
    Game.loadChat()
    Game.updateChatPrivacy()
  },
  openChat: function(awu) {
    null == awu && (awu = Game.selectedChatChannel)
    var awv =
      '<div class="cl-new-chat"' +
      (Game.selectedChatChannel === awu ?
        ' style="animation: cl-chat 150ms ease-out;"' :
        '') +
      '>\n    <ul class="cl-top-chat">\n        <li' +
      (awu == Game.packet.CHAT_LOCAL ?
        ' class="disabled"' :
        ' onclick="Game.openChat(' + Game.packet.CHAT_LOCAL + ');"') +
      '>Локальный</li>\n        <li' +
      (awu == Game.packet.CHAT_LOCAL_RP ?
        ' class="disabled"' :
        ' onclick="Game.openChat(' + Game.packet.CHAT_LOCAL_RP + ');"') +
      '>Ролевой</li>\n        <li' +
      (awu == Game.packet.CHAT_GLOBAL ?
        ' class="disabled"' :
        ' onclick="Game.openChat(' + Game.packet.CHAT_GLOBAL + ');"') +
      '>Общий</li>\n        <li' +
      (awu == Game.packet.CHAT_TRIBE ?
        ' class="disabled"' :
        ' onclick="Game.openChat(' + Game.packet.CHAT_TRIBE + ');"') +
      '>Племенной</li>\n        <li' +
      (awu == Game.packet.CHAT_PRIVATE ?
        ' class="disabled"' :
        ' onclick="Game.openChat(' + Game.packet.CHAT_PRIVATE + ');"') +
      '>Приватный</li>\n    </ul>\n    <div class="cl-btn-chat" onclick="Game.fullInteractPage(true); this.hidden = true;" style="background: center 10px / 23px no-repeat url(\'' +
      Game.versionCode +
      '/ui/expand.png\'); background-color: #992600; right: 40px;"></div>\n    <div class="cl-btn-chat" onclick="Game.scenes.active.levelUi.showMainUi();" style="background: center 10px / 23px no-repeat url(\'' +
      Game.versionCode +
      '/ui/close.png\'); background-color: #992600;"></div>\n    <div class="cl-text-chat">\n        <textarea placeholder="Введите сообщение" id="textChatMessage"></textarea>\n        <div onclick="Game.sendMessage();" class="cl-btn-chat" style="background: bottom center / 20px no-repeat url(\'' +
      Game.versionCode +
      '/ui/send.png\');"></div>\n        <span id="spanChatPrivacy"></span>\n    </div>\n    <div class="cl-load-bar" id="chatLoadBar">\n        <img src="' +
      Game.versionCode +
      '/ui/load.png">\n    </div>\n    <div class="cl-content-chat" id="contentChat"></div>\n</div>',
      awv =
      (Game.showInteractPage(awv),
        document.getElementById('textChatMessage'))
    awv.value = Game.chatMessage
    awv.addEventListener(
      'keyup',
      function(aww) {
        Game.chatMessage = aww.target.value
      },
      false
    )
    awv.addEventListener(
      'keydown',
      function(awx) {
        'Enter' != awx.key ||
          awx.shiftKey ||
          (awx.preventDefault(), Game.sendMessage())
      },
      false
    )
    Game.selectedChatChannel !== awu ||
      Game.chatMessage ||
      awv.focus()
    Game.selectedChatChannel = awu
    document
      .getElementById('contentChat')
      .addEventListener('scroll', function() {
        this.scrollTop + this.clientHeight > this.scrollHeight - 100 &&
          Game.loadChat()
      })
    Game.updateChat()
  },
  updateChatPrivacy: function() {
    var awy = Game.scenes.active.getOnlinePlayers(),
      awz = 'Ваше сообщение увидят: ',
      axa = document.getElementById('spanChatPrivacy')
    axa &&
      (Game.selectedChatChannel == Game.packet.CHAT_GLOBAL ?
        (awz += '<b>все игроки</b>') :
        Game.selectedChatChannel == Game.packet.CHAT_PRIVATE ?
        (awz += 'взаимные друзья в игре') :
        Game.selectedChatChannel == Game.packet.CHAT_TRIBE ?
        (awz += '<b>все соплеменники</b>') :
        0 < awy.length ?
        (awz += awy.join(', ')) :
        (awz = 'Ваше сообщение никто не увидит'),
        (axa.innerHTML = awz))
  },
  loadChat: function() {
    var axb,
      axc = document.getElementById('contentChat'),
      axd = document.getElementById('chatLoadBar') !Game.chatPause &&
      axc &&
      ((Game.chatPause = true),
        (axd.hidden = false),
        (axc.className = 'cl-content-chat load'),
        Game.selectedChatChannel == Game.packet.CHAT_GLOBAL ||
        Game.selectedChatChannel == Game.packet.CHAT_TRIBE ||
        Game.selectedChatChannel == Game.packet.CHAT_NOTE ?
        Game.sendApi(
          'get_chat?offset=' +
          Game.chatOffset +
          '&channel_id=' +
          Game.selectedChatChannel,
          function(axe) {
            axd.hidden = true
            axc.className = 'cl-content-chat'
            axe &&
              0 < axe.rows.length &&
              ((Game.chatPause = false),
                Game.addMessage(axe.rows, true))
          }
        ) :
        ((axb = Game.getChat()),
          (axc.className = 'cl-content-chat'),
          (axd.hidden = true),
          Game.addMessage(axb, true)))
  },
  getChat: function() {
    var axf = Game.myStorage.get('chat') || '[]'
    try {
      axf = JSON.parse(axf)
    } catch (axg) {
      axf = []
    }
    return axf
  },
  saveMessage: function(axh) {
    for (
      var axi,
        axj = 0,
        axk = {},
        axl = Game.getChat(),
        axm = 0; axm < axh.length; axm++
    ) {
      axl.unshift(axh[axm])
    }
    for (; axj < axl.length;) {
      axk[(axi = axl[axj]).channel_id] =
        axk[axi.channel_id] || 0
      axk[axi.channel_id]++
      50 < axk[axi.channel_id] ?
        axl.splice(axj, 1) :
        axj++
    }
    Game.myStorage.set('chat', JSON.stringify(axl))
  },
  addMessage: function(axn, axo) {
    for (
      var axp,
        axq,
        axr,
        axs,
        axt = '',
        axu = document.getElementById('contentChat'),
        axv = 0; axv < axn.length; axv++
    ) {
      if (
        ((axs = (axq = axn[axv]).channel_id),
          axo ||
          (axs != Game.packet.CHAT_LOCAL &&
            axs != Game.packet.CHAT_LOCAL_RP &&
            axs != Game.packet.CHAT_PRIVATE) ||
          Game.saveMessage(axn),
          axu && Game.selectedChatChannel == axs)
      ) {
        for (
          var axw = Game.utils.EscapeHtml(axq.text), axx = 0; axx < Game.emotes.length; axx++
        ) {
          axw = Game.utils.ReplaceAll(
            axw,
            Game.emotes[axx],
            '<img class="cl-emote" src="' +
            Game.versionCode +
            '/ui/emotes/' +
            Game.emotes[axx] +
            '.png">'
          )
        }
        0 < axq.player_id ?
          ((axs = Game.utils.GetUiCat(axq.months_lived)),
            Game.cachedChatSprites[axq.first_color + '_' + axs] ?
            (axp =
              Game.cachedChatSprites[
                axq.first_color + '_' + axs
              ]) :
            (((axr = PIXI.Sprite.from(
                Game.resources.ui.textures[axs]
              )).tint = axq.first_color),
              (axp =
                Game.app.renderer.plugins.extract.base64(axr)),
              axr.destroy(),
              (Game.cachedChatSprites[
                axq.first_color + '_' + axs
              ] = axp)),
            (axr = PIXI.utils.hex2string(
              Game.strings.tribe_colors[axq.tribe_id]
            ))) :
          (axp = Game.versionCode + '/ui/uiFlagIcon.png')
        axs =
          '<div class="cl-msg">\n    <div class="cl-chat-ava" style="background: ' +
          (axq.second_color ?
            PIXI.utils.hex2string(axq.second_color) :
            '#6F1B00') +
          ';">\n        <img src="' +
          axp +
          '">\n    </div>\n    <p>' +
          (0 < axq.player_id ?
            '<font onclick="Game.openPlayerInfo(' +
            axq.player_id +
            ');" style="color: ' +
            axr +
            '; font-weight: 500;">' +
            axq.name +
            ' [' +
            axq.player_id +
            ']</font>: ' :
            '') +
          axw +
          '</p>\n    <span>' +
          Game.fromNow(
            axq.created_at ? new Date(axq.created_at) : new Date()
          ) +
          '</span>\n</div>'
        axo
          ?
          (axt += axs) :
          (axt = axs + axt)
        Game.chatOffset++
      }
    }
    axt &&
      (axo ?
        (axu.innerHTML += axt) :
        (axu.innerHTML = axt + axu.innerHTML))
  },
  fullInteractPage: function(axy) {
    Game.clInteractPageContent.className = axy ? 'full' : ''
  },
  showInteractPage: function(axz) {
    var aya = document.getElementById('clScrollPage')
    null != aya && (Game.lastScroll = aya.scrollTop)
    Game.clInteractPageContent.innerHTML = axz
    Game.clInteractPageContent.hidden = false
  },
  hideInteractPage: function() {
    Game.clInteractPageContent.innerHTML = ''
    Game.clInteractPageContent.hidden = true
    Game.fullInteractPage(false)
  },
  showAdG: function() {},
  hideAdG: function() {},
  audioServer: function(ayb) {
    var ayc
    try {
      Game.audio.currentAudio = ayc = new Audio(ayb)
      ayc.volume = parseFloat(Game.setMaxVolumeSpeak)
    } catch (ayd) {
      return
    }
    ayc.play()
  },
  eventGetToken: function(aye) {
    aye = aye.data
    if ('string' == typeof aye) {
      try {
        aye = JSON.parse(aye)
      } catch (ayf) {}
    }
    if (
      (null != aye.cl_up_loaded1 &&
        'cl_up_loaded1' == aye.cl_up_loaded1 &&
        'login' == Game.scenes.activeName &&
        (Game.isCordova ?
          (Game.goToScene('tribe'),
            null != Game.inAppBrowserRef && Game.inAppBrowserRef.close()) :
          '' != Game.clInteractPageContent.innerHTML &&
          Game.scenes.active.onLoadNews()),
        null != aye.token)
    ) {
      try {
        localStorage.setItem('gameToken1', aye.token)
      } catch (ayg) {}
      Game.token = aye.token
      Game.goToScene('nodata')
      null != Game.inAppBrowserRef && Game.inAppBrowserRef.close()
    }
  },
  calcBackground: function(ayh, ayi, ayj) {
    var ayk,
      ayl,
      aym = 0,
      ayn = 0,
      ayo = Game.app.screen.width,
      ayp = Game.app.screen.height,
      ayq = ayo,
      ayr = ayp
    if (
      ((ayj = ayj || 1), ayh.constructor == PIXI.Container)
    ) {
      for (
        var ays = 0; ays < ayh.children.length; ays++
      ) {
        ;
        (ayk = ayh.children[ays]).constructor !=
          PIXI.Container && Game.calcBackground(ayk, ayi, ayj)
      }
    } else {
      ;
      (ayl = ayh.width / ayh.height) < ayo / ayp ?
        (ayr = ayo / ayl) :
        (ayq = ayp * ayl)
      ayr *= ayj
      ayh.width = ayq *= ayj
      ayh.height = ayr 'undefined' != typeof ayh.x &&
        ('undefined' != typeof ayh.anchor &&
          (null != ayi ?
            (ayh.anchor.set(ayi),
              (aym = ayo * ayi),
              (ayn = ayp * ayi)) :
            ayh.anchor.set(0)),
          ayh.position.set(
            aym + (ayo - ayq) / 2,
            ayn + (ayp - ayr) / 2
          ))
    }
  },
  calcMaxScale: function(ayt, ayu) {
    var ayv = Game.app.screen.width / ayt.texture.width,
      ayt = Game.app.screen.height / ayt.texture.height
    return (
      (ayu = ayu || 0.5),
      Math.min(
        ayv < ayu ? ayv : ayu,
        ayt < ayu ? ayt : ayu
      )
    )
  },
  resizeToWindow: function() {
    var ayw = window.innerWidth,
      ayx = window.innerHeight
    Game.app.renderer.resize(ayw, ayx)
    Game.scenes.active.resize(ayw, ayx)
  },
  createPair: function(ayy, ayz, aza) {
    var azb,
      ayy = PIXI.Sprite.from(ayy)
    return (
      (ayy.parentGroup = PIXI.lights.diffuseGroup),
      Game.isWebGLSupported &&
      (((azb = PIXI.Sprite.from('ui/none_n.png')).width =
          ayy.width),
        (azb.height = ayy.height),
        (azb.parentGroup = PIXI.lights.normalGroup)),
      null != aza && aza ?
      Game.isWebGLSupported ? [ayy, azb] : [ayy] :
      ((aza = new PIXI.Container()).addChild(ayy),
        Game.isWebGLSupported && aza.addChild(azb),
        aza)
    )
  },
  createButton: function(azc, azd, aze, azf) {
    var azg = new PIXI.Container()
    return (
      null != azc &&
      null != azd &&
      ((azc = new PIXI.Sprite(azc[azd])).anchor.set(0.5),
        null != (azf = 'button.png' == azd ? 0.69 : azf) ?
        azc.scale.set(azf) :
        azc.scale.set(0.5),
        azg.addChild(azc),
        (null != aze && !aze) ||
        (azg.on(
            'pointerout',
            function() {
              this.tint = 16777215
            },
            azc
          ),
          azg.on(
            'pointerover',
            function() {
              this.tint = 12632256
            },
            azc
          ))),
      (azg.interactive = true),
      (azg.buttonMode = true),
      azg.on('pointerup', function() {
        var azh = PIXI.sound.find('sounds/click.mp3')
        azh.volume = Game.setMaxVolumeSounds
        azh.play()
      }),
      azg
    )
  },
  createTextButton: function(azi, azj) {
    var azk,
      azl,
      azm = Game.createButton(),
      azn = new PIXI.Sprite(PIXI.Texture.WHITE),
      azi = new PIXI.Text(azi, azj)
    return (
      azi.anchor.set(0.5),
      (azk = azi.width),
      (azl = Math.max(azi.height, 48)),
      (azm.hitArea = new PIXI.Rectangle(
        0.5 * -azk,
        0.5 * -azl,
        azk,
        azl
      )),
      null != azj &&
      null != azj.fill &&
      (azn.tint = azj.fill),
      (azn.height = 1),
      (azn.width = azi.width),
      azn.anchor.set(0.5, 0),
      azn.position.set(0, 0.5 * azi.height),
      azm.addChild(azn),
      azm.addChild(azi),
      azm
    )
  },
  nextMusic: function(azo) {
    null != Game.currentMusic && Game.currentMusic.isPlaying ?
      0 < Game.currentMusic.volume - 0.002 * azo ?
      (Game.currentMusic.volume -= 0.002 * azo) :
      Game.currentMusic.stop() :
      (null != Game.nextMusicString &&
        (null != Game.currentMusic &&
          (Game.currentMusic.destroy(), (Game.currentMusic = null)),
          Game.isMusicLoad ||
          ((Game.isMusicLoad = true),
            PIXI.sound.Sound.from({
              url: Game.versionCode + '/music/' + Game.nextMusicString,
              preload: true,
              loaded: function(azp, azq) {
                azp ||
                  ((Game.isMusicLoad = false),
                    ((Game.currentMusic = azq).volume =
                      Game.setMaxVolumeMusic),
                    azq.play())
              },
            }),
            (Game.nextMusicString = null))),
        Game.app.ticker.remove(Game.nextMusic, Game))
  },
  playMusic: function(azr, azs) {
    var azt,
      azu = []
    if (0 == Object.keys(Game.currentPlaylist).length) {
      for (var azv in Game.mp3List) {
        var azw = Game.mp3List[azv]
        null != azw.type &&
          (Game.currentPlaylist[azv] = azw.type)
      }
    }
    for (azv in Game.currentPlaylist)
      Game.currentPlaylist[azv] == azr && azu.push(azv)
    0 == azu.length ?
      ((Game.currentPlaylist = {}), Game.playMusic(azr, azs)) :
      ((azt = azu[Game.utils.RandomInt(0, azu.length - 1)]),
        delete Game.currentPlaylist[azt],
        null == Game.currentMusic ||
        null == azs ||
        azs ||
        (Game.currentMusic.volume = 0),
        null == Game.nextMusicString &&
        Game.app.ticker.add(Game.nextMusic, Game),
        (Game.nextMusicString = azt),
        (Game.currentMusicType = azr))
  },
  stopMusic: function() {
    Game.nextMusicString = null
    Game.app.ticker.add(Game.nextMusic, Game)
  },
  resetLevel: function(azx) {
    for (
      var azy, azz = {}, baa = [], bab = 0; bab < azx.textures.length; bab++
    ) {
      if (
        ((azy = 'levels/' + (txt = azx.textures[bab].id)),
          baa.push(azy + '.png', Game.levelPath + azy + '.png'),
          baa.push(
            azy + '_m.png',
            Game.levelPath + azy + '_m.png'
          ),
          null != Game.supportEntityMask[txt])
      ) {
        for (
          var bac = 0; bac < Game.supportEntityMask[txt].length; bac++
        ) {
          baa.push(
            azy + '_' + bac + '.png',
            Game.levelPath + azy + '_' + bac + '.png'
          )
        }
      }
    }
    for (bab = 0; bab < baa.length; bab += 2) {
      azz[baa[bab]] = baa[bab + 1]
    }
    azx.resources = azz
    Game.sceneConfig = {}
    Game.sceneConfig.nextScene = 'level'
    Game.sceneConfig.list = baa
    Game.sceneConfig.levelData = azx 'level' == Game.scenes.activeName &&
      ((Game.sceneConfig.color = Game.scenes.active.ambientLight.color),
        (Game.sceneConfig.brightness =
          Game.scenes.active.ambientLight.brightness))
    Game.goToScene('load')
    Game.safeCloseClicks = 0
  },
  getCustomString: function() {
    var bad = {
      catlife: 'catlife'
    }
    var bae = bad
    return (
      Game.isCordova && (bae.device = device.uuid),
      (bae =
        'undefined' != typeof window.CryptoJS ?
        CryptoJS.AES.encrypt(
          JSON.stringify(bae),
          'bc442406ffef0308cdd444da547c0e17'
        ).toString() :
        '')
    )
  },
  connectToServer: function(baf, bah) {
    var bai = Game.scenes.active,
      baj = Game.myStorage.get('tribeId'),
      bak = {
        version: Game.version,
        token: Game.token,
        localSettings_setMuteNoFriend: Game.setMuteNoFriend,
        localSettings_setMaxVolumeSpeak: Game.setMaxVolumeSpeak,
      }
    if (
      ((bak.customString = Game.getCustomString()),
        'menu' == Game.scenes.activeName)
    ) {
      bai.textVersion.text = 'Подключение к серверу...'
      bai.ui.visible = false
    } else {
      if ('level' != Game.scenes.activeName) {
        return (
          Game.goToScene('menu'),
          void Game.connectToServer(baf, bah)
        )
      }
    }
    null != baf && (bak.playername = baf)
    null != bah && (bak.colors = bah)
    null != baj && (bak.tribeId = baj);
    (bai = Game.server =
      io(Game.serverUrl, {
        reconnection: false,
        query: bak,
      })).on('packet', function(bal) {
      try {
        bal = JSON.parse(bal)
      } catch (bam) {
        return
      }
      switch (bal.query) {
        case Game.packet.HELLO_ID:
          if (null != bal.player_id) {
            Game.playerid = bal.player_id
            Game.myStorage.set('playerid', Game.playerid)
            try {
              Game.browserSubscribe()
            } catch (ban) {}
          }
          break
        case Game.packet.UPDATE_LEVEL:
          Game.resetLevel(bal)
          break
        case Game.packet.CLOSE_REASON:
          Game.closeReason = bal.reasonId
          break
        default:
          Game.packets.push(bal)
      }
    })
    bai.on('audio', function(bao) {
      Game.audioServer(bao)
    })
    bai.on('error', function() {
      Game.closeServer()
    })
    bai.on('disconnect', function() {
      Game.closeServer()
    })
    bai.on('connect_error', function() {
      Game.closeServer()
    })
  },
  changeServer: function() {
    'https://catlifeonline.com:2087/' == Game.serverUrl ?
      (Game.serverUrl = 'https://worldcats.ru:2087/') :
      'https://worldcats.ru:2087/' == Game.serverUrl &&
      (Game.serverUrl = 'https://catlifeonline.com:2087/')
  },
  safeServerClose: function() {
    null == Game.nextSceneName &&
      (Game.nextSceneName = Game.isCordova ? 'review' : 'menu')
    2 < Game.safeCloseClicks ?
      ((Game.safeCloseClicks = 0), Game.closeServer()) :
      (Game.safeCloseClicks++, Game.send({
        query: 'close'
      }))
  },
  closeServer: function() {
    var bap = Game.scenes.active
    if (
      ((Game.server = null),
        (Game.packets = []),
        (Game.threads = []),
        'menu' == Game.scenes.activeName)
    ) {
      if (null != Game.closeReason) {
        switch (Game.closeReason) {
          case Game.packet.REASON_AUTH:
            return (
              (bap.textVersion.text = 'Ошибка авторизации.'),
              void setTimeout(function() {
                Game.logout()
                Game.goToScene('login')
              }, 5000)
            )
          case Game.packet.REASON_VERSION:
            Game.isCordova ?
              ((bap.textVersion.text =
                  'Устаревшая версия. Обновите приложение, установив новую версию.'),
                cordova.plugins.InAppUpdate.updateImmediate(
                  function() {},
                  function() {}
                )) :
              ((bap.textVersion.text =
                  'Устаревшая версия. Попробуйте обновить страницу или подключиться позже.'),
                setTimeout(function() {
                  Game.updateGame()
                }, 5000))
            break
          case Game.packet.REASON_EMAIL:
            ;
            (bap.textVersion.text =
              'Подтвердите e-mail, чтобы активировать ваш аккаунт.'),
            setTimeout(function() {
              Game.openWeb(
                'https://myaccount.catlifeonline.com/signin?catlife_token=' +
                Game.token
              )
            }, 5000)
            break
          case Game.packet.REASON_BAN:
            bap.textVersion.text =
              'Вы были заблокированы за нарушение правил сообщества.'
            break
          default:
            bap.textVersion.text =
              'Не удалось подключиться к серверу. Проверьте настройки аккаунта.'
        }
      } else {
        bap.textVersion.text =
          'Ошибка соединения. Попробуйте подключиться позже.'
        Game.isCordova &&
          setTimeout(function() {
            Game.openWeb(Game.serverHost)
          }, 5000)
      }
      Game.closeReason = null
      setTimeout(function() {
        Game.scenes.active.start()
      }, 5000)
    } else {
      'level' == Game.scenes.activeName &&
        (null != Game.nextSceneName ?
          (Game.goToScene(Game.nextSceneName), (Game.nextSceneName = null)) :
          (Game.scenes.active.levelUi.addNotice(
              'Повторное подключение к серверу...'
            ),
            setTimeout(function() {
              Game.connectToServer()
            }, 5000)))
    }
  },
  logout: function() {
    try {
      localStorage.removeItem('gameToken1')
    } catch (baq) {}
    Game.myStorage.remove('chat0')
    Game.myStorage.remove('chat1')
    Game.myStorage.remove('chat2')
    Game.myStorage.remove('chat3')
    Game.myStorage.remove('chat4')
    Game.myStorage.remove('chat5')
    Game.myStorage.remove('achievements')
    Game.myStorage.remove('playerid')
    Game.myStorage.remove('playername')
    Game.myStorage.remove('colors')
    Game.myStorage.remove('tribeId')
    Game.token = null
    Game.username = null
    Game.firebaseInitialized &&
      (Game.isCordova ?
        cordova.plugins.firebase.messaging :
        firebase.messaging()
      ).deleteToken()
    Game.achievements = []
    Game.openWeb('https://forums.worldcats.ru/logout')
  },
  knockPlayer: function(bas, bat, bau) {
    null != bau ?
      1 < bau.length && bau.length < 256 ?
      Game.send({
        query: 'textSuggestion',
        playerId: bat,
        text: bau,
      }) &&
      alert(
        'Сообщение будет рассмотрено в ближайшее время. Спасибо за ожидание.',
        null,
        'Отправлено',
        'Ок'
      ) :
      alert(
        'Недостаточно информации. Сообщение не отправлено.',
        null,
        'Требуется основание',
        'Ок'
      ) :
      Game.isCordova ?
      prompt(
        'Опишите проблему',
        function(bav) {
          1 == bav.buttonIndex &&
            Game.knockPlayer(bas, bat, bav.input1)
        },
        bas,
        ['Ок', 'Отмена']
      ) :
      null != (bau = prompt(bas, '')) &&
      Game.knockPlayer(bas, bat, bau)
  },
  createScrollContainer: function(baw, bax) {
    var bay = Game.resources.ui.textures,
      baz = PIXI.Sprite.from(bay['sliderGame.png']),
      bay = new PIXI.Container(),
      bba = new PIXI.Container(),
      bbb = new PIXI.Sprite(PIXI.Texture.WHITE)
    return (
      (bbb.width = baw),
      (bbb.height = bax),
      (bay.mask = bbb),
      (bay.interactive = true),
      (bay.onDragStart = function(bbc) {
        this._startDragY = bbc.data.global.y - bba.y
        this.on('pointermove', this.onDragMove, this)
      }),
      (bay.onDragEnd = function() {
        this.off('pointermove', this.onDragMove, this)
      }),
      (bay.onDragMove = function(bbd) {
        var bbe = bbb.height - bba.height
        bba.position.set(
          0,
          Math.min(
            0,
            Math.max(bbd.data.global.y - this._startDragY, bbe)
          )
        )
        baz.position.set(
          bbb.width,
          (bbb.height * bba.y) / bbe
        )
      }),
      (bay.onScrollWheel = function(bbf) {
        var bbg = bbb.height - bba.height,
          bbf = bba.y - 0.2 * bbf.deltaY
        bba.position.set(0, Math.min(0, Math.max(bbf, bbg)))
        baz.position.set(
          bbb.width,
          (bbb.height * bba.y) / bbg
        )
      }),
      bay.on('pointerdown', bay.onDragStart),
      bay.on('pointerup', bay.onDragEnd),
      bay.on('pointerupoutside', bay.onDragEnd),
      bay.on('pointerover', function() {
        Game.scrollListener = this
      }),
      bay.on('pointerout', function() {
        Game.scrollListener = null
      }),
      bay.addChild(bba),
      bay.addChild(bbb),
      bay.addChild(baz),
      baz.anchor.set(0.5),
      baz.position.set(baw, 0),
      (baz.tint = 8388608),
      (baz.width = 7),
      (baz.height = 49),
      bay
    )
  },
  createScrollText: function(bbh, bbi, bbj, bbk) {
    var bbl = Game.createScrollContainer(bbj, bbk)
    return (
      (bbh = bbh || ''),
      (bbj = bbj || 100),
      (bbk = bbk || 100),
      ((bbi = bbi || {}).wordWrap = true),
      (bbi.wordWrapWidth = bbj),
      (bbk = new PIXI.Text(bbh, bbi)),
      bbl.removeChildAt(0),
      bbl.addChildAt(bbk, 0),
      bbl
    )
  },
  sendApi: function(bbm, bbn) {
    var bbo = new XMLHttpRequest()
    bbo.open('GET', Game.serverUrl + 'api/' + bbm, true)
    Game.token &&
      bbo.setRequestHeader('Authorization', 'Bearer ' + Game.token)
    bbo.onload = bbo.onerror = function() {
      var bbp
      if (200 == this.status) {
        try {
          bbp = JSON.parse(this.responseText)
        } catch (bbq) {
          bbp = null
        }
      }
      bbn(null != bbp ? bbp : null)
    }
    try {
      bbo.send()
    } catch (bbr) {}
    return bbo
  },
  send: function(bbs) {
    if (null == Game.server || !Game.server.connected) {
      return false
    }
    try {
      Game.server.emit('packet', JSON.stringify(bbs))
    } catch (bbt) {
      return false
    }
    return true
  },
  openPlayerInfo: function(bbu) {
    var bbv,
      bbw,
      bbx = 0,
      bby = ''
    Game.openClPage(
      'Информация об игроке',
      Game.serverUrl + 'api/get_player_info?id=' + bbu,
      function(bbz, bca) {
        try {
          bca = JSON.parse(bca)
        } catch (bcb) {
          return 'Произошла ошибка при загрузке контента.'
        }
        if (0 < bca.content.length) {
          for (var bcc in ((bbv = bca.content[0]),
              (bby =
                (bby =
                  (bby =
                    bby +
                    '<h3>Информация</h3>' +
                    '<div class="cl-bl cl-text">') +
                  ('<b>Имя:</b> ' +
                    bbv.name +
                    ' [' +
                    bbv.player_id +
                    ']')) +
                ('<br><b>Должность:</b> ' +
                  Game.strings.ru.status[bbv.status])),
              (bbw = PIXI.utils.hex2string(bbv.tribeColor)),
              (bby +=
                '<br><b>Запах:</b> <span style="background:' +
                bbw +
                ';color:' +
                bbw +
                ';">_____</span>'),
              'level' == Game.scenes.activeName &&
              (bby +=
                '<br><b>Возраст:</b> ' +
                Game.utils.LunCalc(bbv.birthday, Game.scenes.active.time) +
                ' лун(ы)'),
              (bby =
                (bby =
                  (bby +=
                    '<br><b>Выбранный класс:</b> ' +
                    Game.strings.ru.selectedClass[bbv.selectedClass]) +
                  ('<br><b>Аккаунт на форуме:</b> ' +
                    bbv.username +
                    ' (<a target="_blank" href="https://forums.worldcats.ru/u/' +
                    bbv.username +
                    '/private">Переписки</a>)') +
                  '</div>') +
                '<h3>Навыки</h3>' +
                '<div class="cl-bl cl-text">'),
              bbv.skills))
            0 < bbx && (bby += '<br>'),
            (bby +=
              '<b>' +
              Game.strings.ru.skills[bcc] +
              ':</b> ' +
              bbv.skills[bcc]),
            bbx++
          bby += '</div>'
          bbz.innerHTML = bby
        } else {
          bbz.textContent = 'Информация об игроке не найдена.'
        }
      }
    )
  },
  openNote: function() {
    var bcd,
      bce = ''
    Game.openClPage('Заметки племени', '', function(bcf) {
      bcf.textContent = 'Загрузка...'
      Game.sendApi(
        'get_chat?offset=0&channel_id=' + Game.packet.CHAT_NOTE,
        function(bcg) {
          if (bcg && 0 < bcg.rows.length) {
            for (
              var bch = bcg.rows.length - 1; 0 <= bch; bch--
            ) {
              ;
              (bcd = bcg.rows[bch]).pinned ||
                ((bce += '<h3'),
                  0 < bcd.player_id &&
                  (bce +=
                    ' onclick="Game.openPlayerInfo(' +
                    bcd.player_id +
                    ');"'),
                  (bce +=
                    '>' +
                    Game.fromNow(bcd.created_at) +
                    ' ' +
                    bcd.name +
                    '</h3>'))
              bce += '<div tabindex="0" class="cl-bl'
              bce =
                (bce = bcd.is_pinned ?
                  (bce +=
                    ' spoiler" onclick="this.className=\'cl-bl spoiler active\';">') +
                  bcd.text :
                  (bce += '">') +
                  '<div class="cl-text">' +
                  Game.utils.EscapeHtml(bcd.text) +
                  '</div>') +
                '<div class="cl-text"><span style="font-size:12px;color:#bdbdbd;">ID: ' +
                bcd.id +
                '</span></div></div>'
            }
          } else {
            bce += 'Пусто.'
          }
          bcf.innerHTML = bce
        }
      )
    })
  },
  openFull: function() {
    Game.clGame.requestFullScreen ?
      Game.clGame.requestFullScreen() :
      Game.clGame.mozRequestFullScreen ?
      Game.clGame.mozRequestFullScreen() :
      Game.clGame.webkitRequestFullScreen &&
      Game.clGame.webkitRequestFullScreen()
    Game.resizeToWindow()
    setTimeout(function() {
      Game.resizeToWindow()
    }, 500)
  },
  updateGame: function() {
    var bci = Game.myStorage.get('reloadpage')
    null != bci && 'update' == bci ?
      (Game.myStorage.set('reloadpage', ''),
        alert(
          'Не удалось установить обновление. Попробуйте очистить кэш в настройках браузера.'
        )) :
      !Game.isCordova &&
      confirm(
        'Установить новое обновление? Потребуется обновить страницу.'
      ) &&
      (Game.myStorage.set('reloadpage', 'update'), location.reload())
  },
  getCountOnlinePlayers: function(bcj) {
    Game.sendApi('get_stat_server', function(bck) {
      var bcl 'login' == Game.scenes.activeName &&
        (((bcl = Game.scenes.active).textInfo.visible = true),
          null != bck ?
          null != bcj &&
          bcj &&
          (null != bck.versionGame &&
            Game.version != bck.versionGame &&
            Game.updateGame(),
            null != bck.version) &&
          Game.version + Game.versionPatch != bck.version ?
          (bcl.textInfo.text = 'Доступно новое обновление') :
          null != bck.content &&
          null != bck.content.countOnlinePlayers &&
          ((bcl.textInfo.text =
              'Игроков онлайн: ' + bck.content.countOnlinePlayers),
            (bcl.textInfo.visible =
              0 < bck.content.countOnlinePlayers)) :
          (bcl.textInfo.text = 'Ошибка подключения'))
    })
  },
  openClPage: function(bcm, bcn, bco, bcp) {
    var bcq, bcr, bcs, bct
    Game.closeClPage()
    bcp =
      null != bcp ?
      'none' != bcp && '' != bcp ?
      ' ' + bcp :
      '' :
      ' dark';
    (bcr = document.createElement('div')).id = 'page' + Game.pages.length
    bcr.className = 'cl-chat'
    Game.clGame.appendChild(bcr)
    Game.pages.push(bcr.id);
    (bct = document.createElement('div')).className = 'cl-chat-header'
    bct.textContent = bcm
    bcr.appendChild(bct);
    (bcm = document.createElement('img')).src =
      Game.versionCode + '/ui/arrowLeft.png'
    bcm.className = 'cl-chat-hide'
    bcm.addEventListener(
      'click',
      function() {
        var bcu = PIXI.sound.find('sounds/click.mp3')
        bcu.volume = Game.setMaxVolumeSounds
        bcu.play()
        'menu' == Game.scenes.activeName ?
          ((Game.scenes.active.ui.visible = true), Game.showAdG()) :
          'level' == Game.scenes.activeName &&
          Game.scenes.active.levelUi.showMainUi()
        Game.closeClPage()
      },
      false
    )
    bcr.appendChild(bcm);
    (bcs = document.createElement('div')).className =
      'cl-info-content' + bcp
    bcr.appendChild(bcs)
    'menu' == Game.scenes.activeName ?
      ((Game.scenes.active.ui.visible = false), Game.hideAdG()) :
      'level' == Game.scenes.activeName &&
      Game.scenes.active.levelUi.hideMainUi()
    null != bcn && '' != bcn ?
      (((bct = document.createElement('span')).textContent =
          'Пожалуйста, подождите...'),
        bcs.appendChild(bct),
        (bcq = new XMLHttpRequest()).open('GET', bcn, true),
        bcq.addEventListener(
          'load',
          function() {
            200 == bcq.status ?
              null != bco ?
              ((bcs.textContent = ''),
                bco(bcs, bcq.responseText)) :
              (bcs.innerHTML = bcq.responseText) :
              (bcs.textContent =
                'Произошла ошибка при загрузке контента.')
          },
          false
        ),
        bcq.addEventListener(
          'error',
          function() {
            bcs.textContent =
              'This content is not available in your country.'
          },
          false
        ),
        bcq.send()) :
      null != bco && bco(bcs, '')
  },
  closeClPage: function() {
    for (
      var bcv, bcw = Game.pages.length - 1; 0 <= bcw; bcw--
    ) {
      null != (bcv = document.getElementById(Game.pages[bcw])) &&
        bcv.parentNode.removeChild(bcv)
      Game.pages.splice(bcw, 1)
    }
  },
  updateProfile: function(bcx) {
    null != bcx.user_name &&
      ((Game.username = bcx.user_name),
        Game.myStorage.set('username', Game.username))
    null != bcx.name &&
      ((Game.playername = bcx.name),
        Game.myStorage.set('playername', Game.playername))
    null != bcx.colors &&
      ((Game.colors = bcx.colors),
        Game.myStorage.set('colors', JSON.stringify(Game.colors)))
    null != bcx.tribe && Game.myStorage.set('tribeId', bcx.tribe.id)
    Game.setSub =
      null != bcx.player_groups &&
      -1 < bcx.player_groups.indexOf(Game.packet.GROUP_SUBSCRIBER) ?
      1 :
      0
    Game.myStorage.set('sub_id', Game.setSub)
  },
  loginGooglePlay: function(bcy) {
    GooglePlayGames.login().then(
      function() {
        Game.googlePlayAuthorized = true
      },
      function() {
        Game.googlePlayAuthorized = false
        bcy ||
          alert(
            'Не удалось подключиться к Google Play Играм.',
            null,
            'Произошла ошибка',
            'Ок'
          )
      }
    )
  },
  updateRep: function(bcz) {
    var bda = {
      score: bcz,
      id: 'CgkI3Yzqn8gbEAIQAQ',
    }
    Game.googlePlayAuthorized && GooglePlayGames.updatePlayerScore(bda)
  },
  updateAchiev: function(bdb) {
    var bdc, bdd, bde
    if (0 < Game.achievements.length) {
      for (var bdf = 0; bdf < bdb.length; bdf++) {
        if (
          ((bdc = bdb[bdf]),
            Game.achievements.indexOf(bdc) < 0)
        ) {
          bde = bdc
          break
        }
      }
    }
    if (Game.achievements.length != bdb.length) {
      if (Game.googlePlayAuthorized) {
        for (bdf = 0; bdf < bdb.length; bdf++) {
          switch ((bdc = bdb[bdf])) {
            case Game.packet.ACHIEVEMENT_SKILL_HIT_10:
              bdd = 'CgkI3Yzqn8gbEAIQBg'
              break
            case Game.packet.ACHIEVEMENT_SKILL_HIT_50:
              bdd = 'CgkI3Yzqn8gbEAIQBw'
              break
            case Game.packet.ACHIEVEMENT_SKILL_HIT_200:
              bdd = 'CgkI3Yzqn8gbEAIQCA'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_10:
              bdd = 'CgkI3Yzqn8gbEAIQEg'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_50:
              bdd = 'CgkI3Yzqn8gbEAIQEw'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_200:
              bdd = 'CgkI3Yzqn8gbEAIQFA'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_10:
              bdd = 'CgkI3Yzqn8gbEAIQDw'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_50:
              bdd = 'CgkI3Yzqn8gbEAIQEA'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_200:
              bdd = 'CgkI3Yzqn8gbEAIQEQ'
              break
            case Game.packet.ACHIEVEMENT_SKILL_REP_25:
              bdd = 'CgkI3Yzqn8gbEAIQDA'
              break
            case Game.packet.ACHIEVEMENT_SKILL_REP_50:
              bdd = 'CgkI3Yzqn8gbEAIQDQ'
              break
            case Game.packet.ACHIEVEMENT_SKILL_REP_200:
              bdd = 'CgkI3Yzqn8gbEAIQDg'
              break
            case Game.packet.ACHIEVEMENT_SKILL_SWIM_10:
              bdd = 'CgkI3Yzqn8gbEAIQCQ'
              break
            case Game.packet.ACHIEVEMENT_SKILL_SWIM_50:
              bdd = 'CgkI3Yzqn8gbEAIQCg'
              break
            case Game.packet.ACHIEVEMENT_SKILL_SWIM_200:
              bdd = 'CgkI3Yzqn8gbEAIQCw'
              break
            case Game.packet.ACHIEVEMENT_SKILL_DIG_10:
              bdd = 'CgkI3Yzqn8gbEAIQAg'
              break
            case Game.packet.ACHIEVEMENT_SKILL_DIG_50:
              bdd = 'CgkI3Yzqn8gbEAIQBA'
              break
            case Game.packet.ACHIEVEMENT_SKILL_DIG_200:
              bdd = 'CgkI3Yzqn8gbEAIQBQ'
              break
            default:
              bdd = null
          }
          null != bdd &&
            GooglePlayGames.unlockAchievement({
              id: bdd
            })
        }
      }
      Game.myStorage.set('achievements', JSON.stringify(bdb))
    }
    return (Game.achievements = bdb), bde
  },
  openLeader: function() {
    var bdg = {
      id: 'CgkI3Yzqn8gbEAIQAQ'
    }
    Game.googlePlayAuthorized ?
      GooglePlayGames.showLeaderboard(bdg) :
      Game.isCordova && Game.loginGooglePlay()
  },
  openAchiev: function() {
    var bdh,
      bdi = ''
    if (Game.isCordova) {
      Game.googlePlayAuthorized ?
        GooglePlayGames.showAchievements() :
        Game.loginGooglePlay()
    } else {
      if (0 < Game.achievements.length) {
        bdi += '<table class="cl-table-achiev">'
        for (
          var bdj = 0; bdj < Game.achievements.length; bdj++
        ) {
          bdh = Game.achievements[bdj]
          bdi +=
            '<tr class="cl-bl"><td style="width: 90px;"><img src="' +
            Game.versionCode +
            '/ui/achievements/id' +
            bdh +
            '.png" style="height: 80px;"></td><td>' +
            Game.strings.ru.achievements[bdh] +
            '</td></tr>'
        }
        bdi += '</table>'
      } else {
        bdi += 'Здесь пока что пусто.'
      }
      Game.openClPage('Мои достижения', '', function(bdk) {
        bdk.innerHTML = bdi
      })
    }
  },
  fromNow: function(bdl) {
    var bdm, bdn
    return (
      (bdl = new Date(bdl)),
      (bdm = (bdn = new Date()).getTime() - bdl.getTime()),
      bdl.getDate() == bdn.getDate() &&
      bdl.getMonth() == bdn.getMonth() &&
      bdl.getFullYear() == bdn.getFullYear() ?
      (1 == bdl.getHours().toString().length ? '0' : '') +
      bdl.getHours() +
      ':' +
      (1 == bdl.getMinutes().toString().length ? '0' : '') +
      bdl.getMinutes() :
      bdl.getFullYear() == bdn.getFullYear() ?
      bdl.getDate() +
      ' ' +
      Game.months[bdl.getMonth()] +
      ' ' +
      (1 == bdl.getHours().toString().length ? '0' : '') +
      bdl.getHours() +
      ':' +
      (1 == bdl.getMinutes().toString().length ? '0' : '') +
      bdl.getMinutes() :
      Math.round(bdm / 31104000000) < 6 ?
      bdl.getDate() +
      ' ' +
      Game.months[bdl.getMonth()] +
      ' ' +
      bdl.getFullYear() +
      ' ' +
      (1 == bdl.getHours().toString().length ? '0' : '') +
      bdl.getHours() +
      ':' +
      (1 == bdl.getMinutes().toString().length ? '0' : '') +
      bdl.getMinutes() :
      'давно'
    )
  },
  getCookie: function(bdo) {
    return (
      (bdo = document.cookie.match(
        new RegExp(
          '(?:^|; )' +
          bdo.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') +
          '=([^;]*)'
        )
      )),
      bdo ? decodeURIComponent(bdo[1]) : undefined
    )
  },
  getSceneConfig: function() {
    return JSON.parse(JSON.stringify(Game.sceneConfig))
  },
  utils: {
    GetUiCat: function(bdp) {
      return 79 < bdp ?
        'uiCat3.png' :
        9 < bdp ?
        'uiCat2.png' :
        5 < bdp ?
        'uiCat1.png' :
        'uiCat0.png'
    },
    RandomId: function() {
      return (
        Math.random().toString(36).substring(2) +
        Math.random().toString(36).substring(2)
      )
    },
    CutStr: function(bdq, bdr) {
      return (
        (bdr = bdq.slice(0, bdr)),
        (bdr.length < bdq.length && (bdr += '...'), bdr)
      )
    },
    Distance: function(bds, bdt, bdu, bdv) {
      return Math.sqrt(
        Math.pow(bds - bdu, 2) + Math.pow(bdt - bdv, 2)
      )
    },
    LunCalc: function(bdw, bdx) {
      var bdy =
        Game.utils.GetFullYear(bdx) - Game.utils.GetFullYear(bdw)
      return 0 <
        (bdy =
          (bdy = (bdy *= 12) - Game.utils.GetMonth(bdw)) +
          Game.utils.GetMonth(bdx)) ?
        bdy :
        0
    },
    IsNight: function(bdz) {
      return (
        (bdz = Game.utils.GetHours(bdz)),
        19 < bdz || bdz < 4
      )
    },
    IsWinter: function(bea) {
      return (
        (bea = Game.utils.GetMonth(bea)),
        10 < bea || bea < 2
      )
    },
    GetFullYear(beb) {
      return new Date(beb).getUTCFullYear()
    },
    GetSeason: function(bec) {
      return (
        (bec = Game.utils.GetMonth(bec)),
        2 <= bec && bec <= 4 ?
        1 :
        5 <= bec && bec <= 7 ?
        2 :
        8 <= bec && bec <= 10 ?
        3 :
        0
      )
    },
    GetMonth: function(bed) {
      return new Date(bed).getUTCMonth()
    },
    GetDate: function(bef) {
      return new Date(bef).getUTCDate()
    },
    GetHours: function(beg) {
      return new Date(beg).getUTCHours()
    },
    GetMinutes: function(beh) {
      return new Date(beh).getUTCMinutes()
    },
    GetSeconds: function(bei) {
      return new Date(bei).getUTCSeconds()
    },
    RandomInt: function(bej, bek) {
      return (
        (bej = Math.ceil(bej)),
        (bek = Math.floor(bek)),
        Math.floor(Math.random() * (bek - bej + 1)) + bej
      )
    },
    ReplaceAll: function(bel, bem, ben) {
      return bel
        .toString()
        .replace(
          new RegExp(bem.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'),
          ben
        )
    },
    GetTimerString: function(beo) {
      var beo = Math.round(0.001 * beo),
        bep = Math.floor(beo / 60),
        beq = ''
      return (
        0 < bep && (beq += bep + ' м '),
        (beq += (beo -= 60 * bep) + ' с')
      )
    },
    Dec2Rgb: function(ber) {
      return [
        Math.floor(ber / 65536),
        Math.floor(ber / 256) % 256,
        ber % 256,
      ]
    },
    Rgb2Dec: function(bes, bet, beu) {
      return 65536 * bes + 256 * bet + beu
    },
    Hsl2Rgb: function(bev, bew, bex) {
      var bey, bez, bfa
      return (
        0 == bew ?
        (bey = bez = bfa = bex) :
        ((bew =
            2 * bex -
            (bex =
              bex < 0.5 ?
              bex * (1 + bew) :
              bex + bew - bex * bew)),
          (bey = Game.utils.Hue2Rgb(
            bew,
            bex,
            bev + 0.3333333333333333
          )),
          (bez = Game.utils.Hue2Rgb(bew, bex, bev)),
          (bfa = Game.utils.Hue2Rgb(
            bew,
            bex,
            bev - 0.3333333333333333
          ))),
        [
          Math.round(255 * bey),
          Math.round(255 * bez),
          Math.round(255 * bfa),
        ]
      )
    },
    Hue2Rgb: function(bfb, bfc, bfd) {
      return (
        bfd < 0 && (bfd += 1),
        1 < bfd && --bfd,
        bfd < 0.16666666666666666 ?
        bfb + 6 * (bfc - bfb) * bfd :
        bfd < 0.5 ?
        bfc :
        bfd < 0.6666666666666666 ?
        bfb +
        (bfc - bfb) * (0.6666666666666666 - bfd) * 6 :
        bfb
      )
    },
    Rgb2Hsl: function(bfe, bff, bfg) {
      var bfh, bfi, bfj, bfk, bfl, bfm
      if (
        ((bfe /= 255),
          (bff /= 255),
          (bfg /= 255),
          (bfj =
            bfk =
            bfi =
            ((bfl = Math.max(bfe, bff, bfg)) +
              (bfm = Math.min(bfe, bff, bfg))) /
            2),
          bfl == bfm)
      ) {
        bfi = bfj = 0
      } else {
        switch (
          ((bfh = bfl - bfm),
            (bfj =
              0.5 < bfk ?
              bfh / (2 - bfl - bfm) :
              bfh / (bfl + bfm)),
            bfl)
        ) {
          case bfe:
            bfi =
              (bff - bfg) / bfh +
              (bff < bfg ? 6 : 0)
            break
          case bff:
            bfi = (bfg - bfe) / bfh + 2
            break
          case bfg:
            bfi = (bfe - bff) / bfh + 4
        }
        bfi /= 6
      }
      return [bfi, bfj, bfk]
    },
    PickRgbRange: function(bfn, bfo) {
      return (
        (bfn = Game.utils.PickClosest(bfn, bfo)),
        Game.utils.PickRgb(bfn[0], bfn[1], bfn[2])
      )
    },
    PickRgb: function(bfp, bfq, bfr) {
      var bfs = 1 - bfr
      return [
        Math.round(bfp[0] * bfs + bfq[0] * bfr),
        Math.round(bfp[1] * bfs + bfq[1] * bfr),
        Math.round(bfp[2] * bfs + bfq[2] * bfr),
      ]
    },
    PickClosest: function(bft, bfu) {
      for (
        var bfv,
          bfw,
          bfx,
          bfy = 0,
          bfz = bft[0],
          bga = 0; bga < bft.length; bga++
      ) {
        bfu >= bft[bga][1] &&
          bfu > bfz[1] &&
          ((bfz = bft[bga]), (bfy = bga))
      }
      return bfz ==
        (bfx =
          bft.length - 1 == bfy ?
          bft[bfy] :
          bft[bfy + 1]) ? [bfx[0], bfx[0], 0] :
        ((bfv =
            (bfw = bfu - bfz[1]) + bfx[1] - bfu),
          [bfz[0], bfx[0], bfw / bfv])
    },
    EscapeHtml: function(bgb) {
      return bgb
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;')
    },
  },
}
Game.strings = bgc
Game.strings.ru.interactNames = {}
Game.strings.ru.interactNames[Game.packet.INTERACT_USE] = 'Использовать'
Game.strings.ru.interactNames[Game.packet.INTERACT_BITE] = 'Куснуть'
Game.strings.ru.interactNames[Game.packet.INTERACT_HIT] = 'Атаковать'
Game.strings.ru.interactNames[Game.packet.INTERACT_LICK] = 'Вылизать'
Game.strings.ru.interactNames[Game.packet.INTERACT_CATCH_UP] = 'Подобрать'
Game.strings.ru.interactNames[Game.packet.INTERACT_OFFER] = 'Дружба'
Game.strings.ru.interactNames[Game.packet.INTERACT_MIX] = 'Смешать'
Game.strings.ru.interactNames[Game.packet.INTERACT_DIG] = 'Закопать'
Game.strings.ru.interactNames[Game.packet.INTERACT_TALK] = 'Поговорить'
Game.strings.ru.interactNames[Game.packet.INTERACT_GRAB] = 'Схватить'
Game.strings.ru.interactNames[Game.packet.INTERACT_SHOW] = 'Посмотреть'
Game.strings.ru.interactNames[Game.packet.INTERACT_PORTAL] = 'Переместиться'
Game.strings.ru.interactNames[Game.packet.INTERACT_PLANT_BREAK] = 'Сорвать'
Game.strings.ru.interactNames[Game.packet.INTERACT_CHOOSE] = 'Выбрать'
Game.strings.ru.interactNames[Game.packet.INTERACT_SORT] = 'Перебрать'
Game.strings.ru.skills = {}
Game.strings.ru.skills[Game.packet.SKILL_HIT] = 'Боевые умения'
Game.strings.ru.skills[Game.packet.SKILL_NOSE_ITEM] = 'Поиск предметов'
Game.strings.ru.skills[Game.packet.SKILL_NOSE_ENEMY] = 'Поиск врагов'
Game.strings.ru.skills[Game.packet.SKILL_DIG] = 'Умение копать'
Game.strings.ru.skills[Game.packet.SKILL_SWIM] = 'Умение плавать'
Game.strings.ru.skills[Game.packet.SKILL_REP] = 'Верность племени'
Game.strings.ru.skills[Game.packet.SKILL_TALK] = 'Ролевая активность'
Game.strings.ru.skills[Game.packet.SKILL_SPEED] = 'Ловкость'
Game.strings.ru.skills[Game.packet.SKILL_SLEEP] = 'Выносливость'
Game.strings.ru.selectedClass = {}
Game.strings.ru.selectedClass[''] = '-'
Game.strings.ru.selectedClass[Game.packet.CLASS_FAST] = 'Ловкий'
Game.strings.ru.selectedClass[Game.packet.CLASS_SLIM] = 'Обычный'
Game.strings.ru.selectedClass[Game.packet.CLASS_STRONG] = 'Крепкий'
Game.strings.ru.achievements = {}
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_HIT_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_HIT]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_HIT_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_HIT]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_HIT_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_HIT]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_HIT_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_HIT]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ITEM]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ITEM]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ITEM]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ITEM]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ENEMY]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ENEMY]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ENEMY]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ENEMY]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_DIG_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_DIG]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_DIG_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_DIG]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_DIG_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_DIG]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_DIG_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_DIG]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_REP_25] =
  'Прокачка на 25: ' + Game.strings.ru.skills[Game.packet.SKILL_REP]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_REP_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_REP]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_REP_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_REP]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_REP_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_REP]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SWIM_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_SWIM]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SWIM_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_SWIM]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SWIM_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_SWIM]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SWIM_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_SWIM]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_TALK_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_TALK]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_TALK_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_TALK]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_TALK_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_TALK]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_TALK_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_TALK]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SPEED_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_SPEED]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SPEED_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_SPEED]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SPEED_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_SPEED]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SPEED_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_SPEED]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SLEEP_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_SLEEP]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SLEEP_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_SLEEP]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SLEEP_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_SLEEP]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SLEEP_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_SLEEP]
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_ACERLIGHT] =
  'Сюжетное задание: Кленосветик'
Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_BAG_UP] =
  'Племенное задание: Сбор добычи'
Game.strings.ru.colorCatDesigner = {}
Game.strings.ru.colorCatDesigner['Хвост'] = [59, 60, 61, 62, 63, 64, 82, 84, 85]
Game.strings.ru.colorCatDesigner['Туловище'] = [
  30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 68, 69, 70, 43, 44, 45, 46, 47, 48,
  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 83, 86,
]
Game.strings.ru.colorCatDesigner['Голова'] = [
  7, 67, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
]
Game.strings.ru.colorCatDesigner['Уши'] = [15, 16]
Game.strings.ru.colorCatDesigner['Разное'] = [
  8, 9, 10, 11, 12, 13, 14, 41, 42, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
  90, 91,
]
window.getCookie = function(bgd) {
  return (
    (bgd = document.cookie.match(
      new RegExp(
        '(?:^|; )' +
        bgd.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') +
        '=([^;]*)'
      )
    )),
    bgd ? decodeURIComponent(bgd[1]) : undefined
  )
}
window.addEventListener(
  'load',
  function() {
    try {
      var bge = window.getCookie('catlife_token') !localStorage.getItem('gameToken1') &&
        bge &&
        localStorage.setItem('gameToken1', bge)
    } catch {}
    Game.serverHost = 'https://' + location.host
    Game.serverStaticContent =
      'https://static-content.catlifeonline.com/updates/'
    Game.loadDom()
  },
  false
)
arw.corvus = 0.9
arw.heart = 1.5
arw.item = 0.7
arw.applegame = 0.65
arw.bowl_food = 0.8
arw.bowl_water = 0.9
arw.bag = 0.7
arw.fish = 0.8
arw.portal = 0.4
arw.bot_star = 1.1
arw.bot_elder = 0.6
arw.bot_exit = 0.6
arw.bot_home = 0.6
arw.bot_twins = 0.6
arw.bot_moth = 0.7
arw.bot_tribe = 0.6
arw.rabbit = 0.6
arw.squirrel = 0.65
arw.stone = 0.35
arw.butterfly = 0.3
arw.sleepbag = 0.54
arw.plant_catmint = 0.5
arw.plant_calendula = 1.2
arw.plant_elderberry = 0.65
arw.fern = 0.7
arw.jasmine = 0.7
arw.marigold = 0.7
arw.nettle = 0.7
arw.poppy = 0.7
arw.pulmonaria = 0.7
arw.pyrethrum = 0.7
arw.cat = 0.65
arw.tree = 0.8
arw.christmas_tree = 0.8
arw.snake = 0.7
arw.fireflies = 0.8
arw.hill = 0.6
arw.snail = 0.45
arw.roach = 0.3
arw.rat = 0.4
arw.catfish = 0.5
arw.mole = 0.5
arw.guardian = 0.7
arw.plant_malina = 0.8
arw.plant_tulip = 0.8
arw.plant_tansy = 0.5
arw.kitty = 0.5
arw.stefan = 0.6
arw.pumpkin = 0.5
arw.anura = 0.5
arw.fox = 0.7
arw.meles = 0.6
arw.bot_pumpkin = 0.7
arw.grass = 0.7
arw.plant_achillea = 0.7
arw.plant_arctium = 0.5
arw.plant_tussilago = 0.5
arw.plant_yew = 0.7
arw.plant_bindweed = 0.5
arw.plant_sanguisorba = 0.7
arw.bot_wounded = 0.7
arw.bot_fighting = 1.2
arw.bot_lost_cat = 1.1
arw.apple = 0.6
arw.fake_hedgehog = 0.6
arw.snow = 0.6
arw.bot_dukh = 0.55
arw.bot_homy = 0.65
arw.bot_branch = 0.6
arw.bot_box = 0.6
arw.snow2 = 0.8
var atv = {}
atv.butterfly = 4
atv.tv = 4
atv.squirrel = 1.4
atv.worm = 1.45
atv.corvus = 1.5
atv.rabbit = 1.1
atv.puddle = 0.5
atv.ardea = 1.5
atv.anura = 1.4
atv.mouse = 1.45
atv.cat = 1.1
atv.catfish = 1.3
atv.wasp = 5
atv.bee = 5
atv.millipede = 2
atv.bot_lost_cat = 0.4
var atw = {}
atw.sleep = 0.5
var atx = {}
atx.search = 'none'
atx.mix = 'none'
atx.dig = 'move'
atx.to_level = 'none'
atx.explore = 'none'
atx.inventory_use = 'none'
atx.inventory_remove = 'none'
atx.lick = 'none'
atx.follow = 'none'
atx.dig_underground = 'move'
atx.lick_out = 'none'
var aua = {}
aua .615 a929cefc90e47f9744f60e1673f86d46e5fa7 = [400, 630]
aua .186 b42f9d903bffc0a49199562d29dc8b8b74a86 = [720]
aua.ac52051a72c2d68b04d891a68906a53892fbcce8 = [720]
aua .6040380 bbc2e7734a17461f3b94dfa573cae259d = [720]
aua .5 b921af9affe3b83c1d3c55aae8f4e6378de0c43 = [720]
aua .37869232 b08dea4ee81612863d4a2bd0cf0a818c = [506, 720]
aua .3443236 b81fa457215bde04fcbbfc814175f290c = [616, 720]
aua .657 dff5cc3c03380b0889e00ac8b7d2632d49421 = [720]
aua .5044 b246a4f1805b794599f7130fbcc29d45bc03 = [720]
aua .111 f0b621a9bf9a2537a5a8b5e6cc4a4493cf26e = [720, 362]
aua .256303 ca5e0939e75fcf7e6e9888e857a26bdd4c = [720]
aua .7 faccd2d5388646f1a8dc8d3276675d64a49419e = [495]
aua .345 f61d57aec710e05e58e7341dee656a48880cc = [615, 500]
aua['29c1913c-0cd7-48c5-ae99-e50403230500'] = [720, 334]
aua['736b2597-003d-443b-9868-137c92d60a2d'] = [540, 720]
aua['f0161eb1-d483-49b4-92b1-4a4c12e1b31f'] = [525, 422]
aua['3c12a953-bed2-44a4-9280-7a97dfd955ec'] = [720]
aua['00bc0165-c669-4084-93e9-293e0e0e4b1f'] = [320]
aua['0aba4e04-7aa0-4470-a0c2-350f2b51fec0'] = [636]
aua['e4cb7dfb-5d48-4772-b3c9-630efa8c5230'] = [125, 384, 665]
aua['dfbf0ffb-f08e-4ade-88c5-f90284c8335b'] = [720]
aua['20f22fa2-9217-4dde-8d77-4ff19253e7ec'] = [663, 286, 429]
aua['2da060c7-ca9b-4413-b9f3-b05da0c2e823'] = [720]
aua['5af2cf0f-c7f9-45a1-b6cc-8fbe29279210'] = [720]
aua['afca7b45-dc7c-43e1-bd70-1fb9464b5435'] = [362, 580]
aua['b34de5e6-2b63-4963-9e54-11185b01d2ba'] = [360, 465]
aua['ad13a8a9-afd0-48cf-a1ec-2924e1b4f6a7'] = [483, 584]
aua['a039a4ff-7a03-4054-b370-c258c549aced'] = [720, 420]
aua['4cdba2d6-a6fd-4b98-9aea-f12903bbeb78'] = [720]
aua['5ea7e783-7857-495d-af45-42422237a4a6'] = [720]
aua['5d4203f0-3820-4f8e-9a26-4a436c6e4512'] = [527, 564]
aua['9309d27e-aee3-4996-85f0-53b76ec67381'] = [585]
aua['794c061d-1c6a-4e00-87fc-44aa45327dc7'] = [350]
aua['56d496d5-69ec-4dd2-aaca-ca6c171d5e7c'] = [550]
aua['7988e002-83cc-4ce9-bfe9-b2799d1b540f'] = [720]
aua['62cd2010-ddbd-4bf6-9e56-177c62d43922'] = [720]
aua['8e9f8176-9f3d-403b-b5d4-4e909038ab98'] = [475]
aua['5b11cbf3-d9c1-4522-9eab-fd9c30c66e8f'] = [720, 550]
aua['8b304df6-437d-49c9-aa21-5a565175687b'] = [500]
aua['d4959c56-e062-4939-b974-2e1808e76c88'] = [625]
aua['321c24a1-dd97-4875-93ee-31835bdc8d37'] = [455, 400]
aua['72834578-509a-4873-8dd1-1b5277dc5ebd'] = [720]
aua['1e4e3d21-f655-4b47-afd2-61b06e43b33f'] = [470, 540]
aua['510f2f2b-0bda-4ac3-a682-02101faac786'] = [500, 720]
aua['35735d77-4e19-4652-8b16-78a0dc2f60c8'] = [720]
aua['dbb9bac3-df9b-48d8-ad6a-12a00243d1ff'] = [720]
aua['84928bbd-b901-467e-a82d-87a514ef36bd'] = [360]
aua['f074e219-4fb4-4621-9237-c549259c13d7'] = [720]
aua['3f5feaa8-57b9-4992-8b1c-6ec25d1297c0'] = [650, 480, 540]
aua['711af067-4d7e-49cf-ac86-cc6b7dcdb415'] = [720]
aua['49a4425d-87ed-45e9-b832-af9ff4956e0e'] = [720]
aua['41065978-bcca-4a98-900f-d78d67c29946'] = [415]
aua['b4edb0da-dc38-4650-9d97-14f06669cb66'] = [535, 720]
aua['5403fd92-a80b-4beb-8d23-3e7e4943e9db'] = [720]
aua['582d7470-b70a-4583-b8cc-5ba85e843736'] = [720]
aua['5b6365a8-7381-42ff-8c25-dfbc8c540924'] = [610, 465]
aua['8c03b4d2-ef67-4242-b7e2-695a4a1d3094'] = [720]
aua['b848daf0-2a20-4bf5-80a0-56053482a856'] = [720, 650]
aua['59e8fce5-600d-492c-bc18-c8d2b7b4f7f8'] = [550, 425, 720]
aua['e5ca146a-5f1f-4145-8796-0113fc6a137d'] = [650]
aua['5fe95ce3-0f8f-48c7-82d7-7d8590ee9278'] = [520]
aua['8089b64a-2aa7-4edf-ad01-6cb6d201fa69'] = [660, 440]
aua['db28f6dd-305f-4356-9ca2-cd8b0503a9f7'] = [720, 430]
aua['04ff3678-a472-447e-ba1e-52054d23e7f4'] = [720, 415]
aua['0b34641f-55cf-4fab-955c-d2c5af731f98'] = [720]
aua['cd985c23-71c0-470f-ae18-6703a2441405'] = [720]
aua['7509e044-17de-4f47-8004-feb93e33febb'] = [720]
aua['8f3447a5-c509-46af-aaec-1873d16942e6'] = [720]
aua['99d60ab1-a113-4a45-8f3a-cfd10628c114'] = [600, 720]
aua['9cc38ac8-1548-4db7-8147-00533ce61d17'] = [510]
aua['0ada2a0a-8ea2-4489-a33b-af15973de658'] = [720]
aua['0ea85f62-2e78-4961-b916-f492c91cc976'] = [615, 510]
aua['2ed2758d-48bf-4ca3-b7db-f42beb8e3100'] = [635, 720]
aua['4b45994d-7d59-41bf-9be5-3554959078c0'] = [720]
aua['6f2da8b0-9608-49ee-a78f-8233511a5d57'] = [720, 300]
aua['90c1b8fb-116e-4351-8dd7-4a81327329d9'] = [460, 720]
aua['19380687-2547-4a0d-b1dc-b8b371368335'] = [720]
aua['19634111-f572-4d5e-a0a2-c83984ca61de'] = [720, 525]
aua['beb11ed4-c158-418c-8d40-343213fabc92'] = [720, 480]
aua['ce3c88cf-f2c9-4d27-9b47-1f6923d4cd08'] = [460, 720]
aua['e2c77095-e194-4756-b7d2-be3ca6f277df'] = [720]
aua['e21c842f-7700-40bc-b7db-ab95a50360bb'] = [720]
aua['f3669046-f60d-4597-b441-72579d469074'] = [720]
aua['ffce7483-9313-4d91-9aac-512f2002ccbc'] = [405]
aua['c0d235ed-8198-48ec-9f84-6cf9debec327'] = [390]
aua['99216e3e-5cff-4f74-b093-5151e30bda0d'] = [720]
aua['38738642-e3b7-452f-b372-6cda042738d8'] = [590]
aua['7581238a-17bd-474a-972d-8ef6901d1540'] = [514, 720]
aua['b5caca75-190e-4568-9c01-cd48e19986d2'] = [720]
aua['187cf4af-5b5f-4720-bd8f-24fa9b8b60d0'] = [720]
aua['20e5c0c4-5ebe-4dcb-8452-97535e620d45'] = [720, 300]
aua['127a76ba-a8dd-4e16-985f-1eb3d24c82e6'] = [720]
aua['a8db012f-ecb2-482d-8f32-7884be12ef47'] = [720]
aua['cf662eba-31de-428e-a2ea-db64d53fdf42'] = [720]
aua['d733496e-02e7-4d3b-9894-51cef03b73ed'] = [720]
aua['d1739a7d-1c69-412e-bc2d-620e5b02b844'] = [720]
aua['4c4d2752-57ef-4402-843f-695cd4fcc5d9'] = [720]
aua['32796886-e551-427d-b608-721cb1f1aed5'] = [404, 720]
aua['e979fb07-2d3d-411f-9c29-6be0d7a02b55'] = [305, 720]
aua['fe532ab3-32a0-4226-818a-52c0a9d7a1e0'] = [720, 280]
aua['459d8b3c-a15d-4a53-8ad4-86c211d84c73'] = [720, 720]
aua['09e9aec6-6c69-47ca-905f-292a34fea3d2'] = [600, 720]
aua['55cb866c-f7e7-4eee-b4b2-01e8db88401c'] = [720, 350]
aua['88a2696f-f939-4b29-9b57-2fb5fee5ba23'] = [720]
aua['ed6ec0fe-57e1-4786-b484-1e68a67d2e92'] = [720]
aua['294a9f1d-9c95-462f-8d1c-584ab2659126'] = [720]
aua['70f166a5-701e-4ce3-9357-ee3a7d535039'] = [720]
aua['24b71e70-4e16-41ab-8317-7ac7cdc1246b'] = [720, 720]
aua['327a7350-9e32-4e32-ad32-6ad0d1d30477'] = [720, 720]
aua['61913818-5c09-4373-947e-624940970c36'] = [720, 720]
aua['053892a7-9bda-486c-9fd8-5e28de915719'] = [720]
aua['bb2581be-f9b3-47b0-9145-273985db1d51'] = [720]
aua['e30057a4-c074-4aff-9fb0-15b8be286c3c'] = [720]
aua['3dde2a3d-b74a-4790-bf82-10d5adc60970'] = [720]
aua['82a1ef2b-6c7e-4699-a359-5fba0c13084b'] = [720]
aua['2327b598-52af-4d8b-a4d7-b21f4b1e6cfe'] = [720]
aua['b6ccc8b7-cb29-4f39-b871-646724b3ed39'] = [720]
aua['c92e6db2-c3ae-438c-a527-49953a9fd3e8'] = [720]
aua['d2c56272-00cd-455f-a4ec-c757f5ccc75a'] = [720]
aua['58fcc162-ba49-4b72-9444-86e4139915b3'] = [720]
aua['98814ee1-45f0-4442-b1b8-31296891b8f2'] = [720, 490, 300]
aua['43869bea-a9ff-466d-9cee-ca0df6e345c4'] = [660, 370]
var aub = {}
aub .7 faccd2d5388646f1a8dc8d3276675d64a49419e = 11391999
aub .345 f61d57aec710e05e58e7341dee656a48880cc = 11391999
aub .37869232 b08dea4ee81612863d4a2bd0cf0a818c = 16767104
aub.dc17110d6d8b0b00fabf0aea95f4fe4a0c003eb7 = 16767104
aub.de8724c64eb03116e602eb16b51a506779b335b2 = 16767104
aub.c74ac6259be3c84cf6991c2957d897cf3c84212b = 16767104
aub['e0b2e161-2f2c-4973-86fa-1e0bf101efb2'] = 16767104
aub['321c24a1-dd97-4875-93ee-31835bdc8d37'] = 16767104
aub['72834578-509a-4873-8dd1-1b5277dc5ebd'] = 16767104
aub['1e4e3d21-f655-4b47-afd2-61b06e43b33f'] = 16767104
aub['0b34641f-55cf-4fab-955c-d2c5af731f98'] = 16767104
aub['7af6d6d0-c1ab-471d-8f65-c78cea720ab3'] = 16767104
aub['9cc38ac8-1548-4db7-8147-00533ce61d17'] = 16767104
aub['bb2581be-f9b3-47b0-9145-273985db1d51'] = 16767104
aub['e30057a4-c074-4aff-9fb0-15b8be286c3c'] = 16767104
aub['2327b598-52af-4d8b-a4d7-b21f4b1e6cfe'] = 16767104
aub['1d5bf90b-4b77-4729-ba39-3b17358f413e'] = 16767104
aub['9851462a-64f3-4b6f-97a8-e4b004a082ed'] = 15792880
var bgf = {}
bgf.cc = 'Level Up - DataJunk'
bgf.link = 'https://freesound.org/people/DataJunk/sounds/423266/'
var bgg = {}
bgg.type = 'menu'
bgg.cc = 'Harbor - Kai Engel'
bgg.link =
  'https://freemusicarchive.org/music/Kai_Engel/The_Run/Kai_Engel_-_The_Run_-_03_Harbor/'
var bgh = {}
bgh.type = 'day'
bgh.cc = 'Divertissement by Kevin MacLeod'
bgh.link =
  'https://freemusicarchive.org/music/Kevin_MacLeod/Classical_Sampler/Divertissement/'
var bgi = {}
bgi.type = 'night'
bgi.cc = 'Erik Satie: Gymnopedie No 1 by Kevin MacLeod'
bgi.link =
  'https://freemusicarchive.org/music/Kevin_MacLeod/Classical_Sampler/Gymnopedie_No_1/'
var bgj = {}
bgj.type = 'day'
bgj.cc = 'J. S. Bach: Prelude in C - BWV 846 by Kevin MacLeod'
bgj.link =
  'https://freemusicarchive.org/music/Kevin_MacLeod/Classical_Sampler/Prelude_in_C_-_BWV_846/'
var bgk = {}
bgk.type = 'rain'
bgk.cc = 'Relent by Kevin MacLeod'
bgk.link =
  'https://freemusicarchive.org/music/Kevin_MacLeod/Classical_Sampler/Relent/'
var bgl = {}
bgl.type = 'night'
bgl.cc = 'Blue Feather by Kevin MacLeod'
bgl.link =
  'https://freemusicarchive.org/music/Kevin_MacLeod/Classical_Sampler/Blue_Feather/'
var bgm = {}
bgm.type = 'rain'
bgm.cc = 'September by Kai Engel'
bgm.link =
  'https://freemusicarchive.org/music/Kai_Engel/Chapter_Four__Fall/Kai_Engel_-_Chapter_Four_-_Fall_-_02_September/'
var bgn = {}
bgn.type = 'day'
bgn.cc = 'When You Leave by Sergey Cheremisinov'
bgn.link =
  'https://freemusicarchive.org/music/Sergey_Cheremisinov/Charms/Sergey_Cheremisinov_-_Charms_-_04_When_You_Leave/'
var bgo = {}
bgo.type = 'day'
bgo.cc = 'Smoldering by Kai Engel'
bgo.link =
  'https://freemusicarchive.org/music/Kai_Engel/Chapter_Four__Fall/Kai_Engel_-_Chapter_Four_-_Fall_-_09_Smoldering/'
var bgp = {}
bgp.type = 'night'
bgp.cc = 'Fog by Sergey Cheremisinov'
bgp.link =
  'https://freemusicarchive.org/music/Sergey_Cheremisinov/Charms/Sergey_Cheremisinov_-_Charms_-_05_Fog/'
var bgq = {}
bgq.type = 'game'
bgq.cc = ''
bgq.link = ''
var bgr = {}
bgr.cc = 'Tikopia - Kevin MacLeod'
bgr.link =
  'https://freemusicarchive.org/music/Kevin_MacLeod/Global_Sampler/Tikopia/'
var auc = {}
auc['time.mp3'] = bgf
auc['harbor.mp3'] = bgg
auc['divertissement.mp3'] = bgh
auc['gymnopedie.mp3'] = bgi
auc['preludeinc.mp3'] = bgj
auc['relent.mp3'] = bgk
auc['bluefeather.mp3'] = bgl
auc['september.mp3'] = bgm
auc['whenyouleave.mp3'] = bgn
auc['smoldering.mp3'] = bgo
auc['fog.mp3'] = bgp
auc['radiomartini.mp3'] = bgq
auc['tikopia.mp3'] = bgr
var avf = {}
avf.WIDTH = 1280
avf.HEIGHT = 720
avf.MAX_DISTANCE = 3
avf.ENTITY_DISTANCE = 4
avf.SET_TIME = 0
avf.UPDATE_LEVEL = 1
avf.SET_WEATHER = 2
avf.ENTITY_ADD = 3
avf.ENTITY_REMOVE = 4
avf.ENTITY_UPDATE = 5
avf.ENTITY_ACTION = 6
avf.ENTITY_MOVE = 7
avf.CHAT_SEND = 8
avf.INVENTORY_SET = 9
avf.INVENTORY_ADD = 10
avf.INVENTORY_REMOVE = 11
avf.INVENTORY_USE = 12
avf.LOGIN = 13
avf.HELLO_ID = 14
avf.QUEST_WINDOW = 15
avf.ENTITY_INTERACT = 16
avf.SET_COLORS = 17
avf.SET_LEVEL = 18
avf.INIT_WINDOW = 19
avf.UPDATE_FIGHTS = 20
avf.UPDATE_MAP = 21
avf.PLAY_AMBIENT_SOUND = 22
avf.UPDATE_ACHIEVEMENTS = 23
avf.CLOSE_REASON = 24
avf.UPDATE_EVENTS = 25
avf.CHAT_GLOBAL_SEND = 26
avf.LOAD_CHUNKS = 27
avf.SET_CLASS = 28
avf.GET_CHUNK = 29
avf.GET_ENTITY = 30
avf.REMOVE_FRIEND = 31
avf.SUBSCRIBE_TOPIC = 32
avf.UPDATE_TITLE = 33
avf.WEATHER_SUN = 0
avf.WEATHER_RAIN = 1
avf.INTERACT_USE = 0
avf.INTERACT_BITE = 1
avf.INTERACT_HIT = 3
avf.INTERACT_LICK = 4
avf.INTERACT_CATCH_UP = 5
avf.INTERACT_OFFER = 6
avf.INTERACT_MIX = 7
avf.INTERACT_DIG = 8
avf.INTERACT_TALK = 9
avf.INTERACT_REMOVE_ITEM_INVENTORY = 10
avf.INTERACT_USE_ITEM_INVENTORY = 11
avf.INTERACT_GRAB = 12
avf.INTERACT_SHOW = 13
avf.INTERACT_ACTION_STOP = 14
avf.INTERACT_ACTION_WIN = 15
avf.INTERACT_ACTION_RUN = 16
avf.INTERACT_PORTAL = 17
avf.INTERACT_PLANT_BREAK = 18
avf.INTERACT_CHOOSE = 19
avf.INTERACT_SORT = 20
avf.ACTION_NONE = 'none'
avf.ACTION_SEARCH = 'search'
avf.ACTION_MIX = 'mix'
avf.ACTION_DRINK = 'drink'
avf.ACTION_DIG = 'dig'
avf.ACTION_SLEEP = 'sleep'
avf.ACTION_TO_LEVEL = 'to_level'
avf.ACTION_EXPLORE = 'explore'
avf.ACTION_INVENTORY_USE = 'inventory_use'
avf.ACTION_INVENTORY_REMOVE = 'inventory_remove'
avf.ACTION_LICK = 'lick'
avf.ACTION_FOLLOW = 'follow'
avf.ACTION_SWIM = 'swim'
avf.ACTION_HIDE = 'hiding'
avf.ACTION_OUTCAST = 'outcast'
avf.ACTION_CLIMB = 'climb'
avf.ACTION_CAR = 'car'
avf.ACTION_DIRT = 'dirt'
avf.TRIBE_ALONE = 0
avf.TRIBE_THUNDERSTORM = 1
avf.TRIBE_WIND = 2
avf.TRIBE_SHADOW = 3
avf.TRIBE_RIVER = 4
avf.TRIBE_WATERFALL = 5
avf.TRIBE_HOME = 6
avf.TRIBE_STAR = 7
avf.TRIBE_GLOOM = 8
avf.CHAT_LOCAL = 0
avf.CHAT_LOCAL_RP = 1
avf.CHAT_GLOBAL = 2
avf.CHAT_PRIVATE = 3
avf.CHAT_TRIBE = 4
avf.CHAT_NOTE = 5
avf.CHAT_BOT = 6
avf.CHAT_HELP = 7
avf.LEVEL_NOOWNER = 0
avf.LEVEL_THUNDERSTORM = 1
avf.LEVEL_WIND = 2
avf.LEVEL_SHADOW = 3
avf.LEVEL_RIVER = 4
avf.LEVEL_FALLINGWATER = 5
avf.CAUSE_HUNGER = 0
avf.GROUND_SAND = 'sand'
avf.GROUND_GRASS = 'grass'
avf.GROUND_WATER = 'water'
avf.GROUND_DIRT = 'dirt'
avf.GROUND_STONE = 'stone'
avf.GROUND_GRAVEL = 'gravel'
avf.GROUND_WOOD = 'wood'
avf.SKILL_HIT = 'hit'
avf.SKILL_NOSE_ITEM = 'nose_item'
avf.SKILL_NOSE_ENEMY = 'nose_enemy'
avf.SKILL_DIG = 'dig'
avf.SKILL_REP = 'reputation'
avf.SKILL_SWIM = 'swim'
avf.SKILL_TALK = 'talk'
avf.SKILL_SPEED = 'speed'
avf.SKILL_SLEEP = 'sleep'
avf.CLASS_FAST = 'fast'
avf.CLASS_SLIM = 'slim'
avf.CLASS_STRONG = 'strong'
avf.ACHIEVEMENT_SKILL_HIT_50 = 0
avf.ACHIEVEMENT_SKILL_HIT_200 = 1
avf.ACHIEVEMENT_SKILL_NOSE_ITEM_50 = 2
avf.ACHIEVEMENT_SKILL_NOSE_ITEM_200 = 3
avf.ACHIEVEMENT_SKILL_NOSE_ENEMY_50 = 4
avf.ACHIEVEMENT_SKILL_NOSE_ENEMY_200 = 5
avf.ACHIEVEMENT_SKILL_DIG_50 = 6
avf.ACHIEVEMENT_SKILL_DIG_200 = 7
avf.ACHIEVEMENT_SKILL_REP_50 = 8
avf.ACHIEVEMENT_SKILL_REP_200 = 9
avf.ACHIEVEMENT_SKILL_SWIM_50 = 10
avf.ACHIEVEMENT_SKILL_SWIM_200 = 11
avf.ACHIEVEMENT_SKILL_HIT_10 = 12
avf.ACHIEVEMENT_SKILL_NOSE_ITEM_10 = 13
avf.ACHIEVEMENT_SKILL_NOSE_ENEMY_10 = 14
avf.ACHIEVEMENT_SKILL_DIG_10 = 15
avf.ACHIEVEMENT_SKILL_REP_25 = 16
avf.ACHIEVEMENT_SKILL_SWIM_10 = 17
avf.ACHIEVEMENT_SKILL_HIT_999 = 18
avf.ACHIEVEMENT_SKILL_NOSE_ITEM_999 = 19
avf.ACHIEVEMENT_SKILL_NOSE_ENEMY_999 = 20
avf.ACHIEVEMENT_SKILL_DIG_999 = 21
avf.ACHIEVEMENT_SKILL_REP_999 = 22
avf.ACHIEVEMENT_SKILL_SWIM_999 = 23
avf.ACHIEVEMENT_SKILL_TALK_10 = 24
avf.ACHIEVEMENT_SKILL_TALK_50 = 25
avf.ACHIEVEMENT_SKILL_TALK_200 = 26
avf.ACHIEVEMENT_SKILL_TALK_999 = 27
avf.ACHIEVEMENT_SKILL_SPEED_10 = 28
avf.ACHIEVEMENT_SKILL_SPEED_50 = 29
avf.ACHIEVEMENT_SKILL_SPEED_200 = 30
avf.ACHIEVEMENT_SKILL_SPEED_999 = 31
avf.ACHIEVEMENT_SKILL_SLEEP_10 = 32
avf.ACHIEVEMENT_SKILL_SLEEP_50 = 33
avf.ACHIEVEMENT_SKILL_SLEEP_200 = 34
avf.ACHIEVEMENT_SKILL_SLEEP_999 = 35
avf.ACHIEVEMENT_ACERLIGHT = 36
avf.ACHIEVEMENT_BAG_UP = 37
avf.REASON_AUTH = 0
avf.REASON_VERSION = 1
avf.REASON_EMAIL = 2
avf.REASON_BAN = 3
avf.GROUP_PLAYER = 0
avf.GROUP_ADMIN = 1
avf.GROUP_MODER = 2
avf.GROUP_SUBSCRIBER = 3
avf.GROUP_PAINTER = 4
avf.GROUP_NPC = 5
avf.GROUP_WINTER = 6
avf.GROUP_WINTER2 = 7
var bgs = {}
bgs.el_s_cat = [
  'Туловище',
  'Обычный хвост',
  'Голова',
  'Уши',
  'Ушные раковины',
  'Глаза',
  'Нос',
  'Пятно на глазу',
  'Перевязка на лапе',
  'Раны',
  'Листочек',
  'Кость в ухе',
  'Ошейник',
  'Когти',
  'Щёки',
  'Кончики ушей',
  'Пятна за ушами',
  'Полосы',
  'Маска (маленькая)',
  'Маска (средняя)',
  'Маска (крупная)',
  'Мордочка',
  'Подбородок',
  'Щёки',
  'Черепаховые пятна',
  'Малый калико 1',
  'Малый калико 2',
  'Крупный калико 1',
  'Крупный калико 2',
  'Область под глазами',
  'Тигровые полосы',
  'Рваные полосы',
  'Мраморные полосы',
  'Пятнистые полосы',
  'Дымка на спине',
  'Леопардовые пятна',
  'Пятнышки',
  'Пятно на груди',
  'Шея',
  'Шея и грива',
  'Подушечки лап',
  'Хохолок',
  'Кисточки',
  'Малый калико 2',
  'Крупный калико 1',
  'Крупный калико 2',
  'Дымка на лапах',
  'Пальцы на ближней передней лапе',
  'Пальцы на дальней передней лапе',
  'Пальцы на ближней задней лапе',
  'Пальцы на дальней задней лапе',
  'Носочек на ближней передней лапе',
  'Носочек на дальней передней лапе',
  'Носочек на ближней задней лапе',
  'Носочек на дальней задней лапе',
  'Чулок на ближней передней лапе',
  'Чулок на дальней передней лапе',
  'Чулок на ближней задней лапе',
  'Чулок на дальней задней лапе',
  'Полосы',
  'Дымка на хвосте',
  'Кончик хвоста',
  'Калико 1',
  'Калико 2',
  'Черепаховые пятна',
  'Черепаховые пятна на лапах',
  'Низ живота',
  'Пятно на глазу',
  'Живот',
  'Черепаховые пятна',
  'Малый калико 1',
  'Листья',
  'Вьюнок',
  'Овёс',
  'Грязь',
  'Бант',
  'Водоросли',
  'Ветка',
  'Сухая трава',
  'Перья 1',
  'Перья 2',
  'Шлейка',
  'Верх',
  'Мелкий калико',
  'Низ',
  'Тигровые полосы',
  'Плечо',
  'Куцый хвост',
  'Пышный хвост',
  'Хлыстообразный хвост',
  'Снег',
  'Корона Духа Зимы',
]
bgs.status = [
  'отсутствует',
  'Целитель',
  'Старейшина',
  'Глашатай',
  'Предводитель',
  'Ученик',
  'Ловчий',
  'Воин',
  'Ученик***',
  'Ученик**',
  'Ученик*',
  'Котенок***',
  'Котенок**',
  'Котенок*',
  'Сказитель',
  'Стражник',
]
bgs.months = [
  'января',
  'февраля',
  'марта',
  'апреля',
  'мая',
  'июня',
  'июля',
  'августа',
  'сентября',
  'октября',
  'ноября',
  'декабря',
]
bgs.seasons = [
  'Сезон Голых Деревьев',
  'Сезон Юных Листьев',
  'Сезон Зеленых Листьев',
  'Сезон Листопада',
]
bgs.items_description = [
  'На этой старой обглоданной косточки не осталось ни кусочка мяса. А жаль.',
  'Это камень. Он похож на\u2026 камень.',
  'Красный бочок этого яблока так и хочется надкусить! Осторожно, внутри попадаются червяки.',
  'Странная неестественно яркое приспособление двуногих. Интересно, есть ли там что-то внутри?',
  'Очень сладкая вещь двуногих. ',
  'Выглядит как обычная палка, но кто знает, что будет, если ткнуть ее в паутину?',
  'Очень сладкая вещь двуногих, но меньше и круглая.',
  'Красные круглые ягодки на тонкой ветви. Это рябина! С ней можно немного поиграть, пока никто не видит\u2026',
  'С этой рябиной кто-то уже поиграл. Остались только ягоды.',
  'Цветок этот очень похож на солнышко, интересно, что будет, если его попробовать\u2026 Фу! Горько! ',
  'Небольшая нитка паутинки, вероятно, создавая ее, паук не очень постарался.',
  'Трудолюбивый и недвижимый паучок.',
  'Небольшое и красивое растение, которое можно увидеть у Двуногих.',
  'Миска, до краев заполненная катышками. Хрустяще и довольно вкусно.',
  'По воде можно ударить лапой, тогда миска смешно покачивается, но Двуногие после такого ругаются.',
  'Сейчас миска пуста, но, если громко помяукать, она наполнится катышками!',
  'Видимо, не стоило в прошлый раз расплескивать всю воду. Теперь придется пить из лужи\u2026',
  'Красный огонек, что растет на полях. Если посидеть рядом во время ветра, можно услышать стук семян в коробочке.',
  'От вкуса этих семечек тут же тянет спать, главное не переборщить с количеством.',
  'Верхняя часть мака, листики на ней довольно красивые.',
  'Смешная игрушка, жаль только, что шуршащая обертка быстро слетает, если немного потыкать ее когтем.',
  'Нижняя часть мака, кое-где можно заметить даже кусочки земли.',
  'Мышка! Можно съесть, можно съесть и можно съесть! ',
  'Сорванный цветок жасмина, нижняя часть которого затвердела и стала напоминать кору.',
  'Отсортированные листики жасмина. Там можно увидеть и вкрапление белых цветочков.',
  'Большой и тяжелый цветок пиретрума. Придется потрудиться, чтобы принести его к себе.',
  'Целебные листики пиретрума: награда за сложность транспортировки.',
  'Ноготки. Смешное название! Остается подумать, почему цветок не называет коготки.',
  'Желтые цветочки, к которым прилип кусок паутины, фи.',
  'К сожалению, меда из медуницы не достать. ',
  'Листик медуницы\u2026 Тоже без меда.',
  'Ай! Жжется! Нужно брать осторожнее.',
  'Кудрявый папоротник, очень мягкий и приятный на ощупь.',
  'Листики папоротника, из которых при должном старании можно сделать подстилку.',
  'Игрушечная мышка! Нельзя съесть, нельзя съесть, но можно поиграть!',
  'Семечки медуницы, они довольно вкусные и сладкие.',
  'Тонкий гибкий стебелек, который легко переломить зубами.',
  'Маленькие яркие цветочки, могут стать отличным украшением палатки, подстилки или шерстки.',
  'Издалека корень напоминает странного жука или сороконожку.',
  'Противная тушка змеи. Никогда больше не зашипит!',
  'От одной только мысли об этой крупной тушке начинается слюноотделение.',
  '\u2026Так вот, что будет, если ткнуть палку в паутину.',
  'Большой кусок паутины, плотно сплетенной вместе.',
  'В этом комке паутины можно заметить маленького трудолюбивого паучка! ',
  'Привлекающая взор своей яркой окраской цветная бабочка. ',
  'Белая бабочка, нужно быть осторожнее, чтобы не повредить крылышки.',
  'Мягкая и теплая подстилка, на которой та-ак приятно спать.',
  'Кусок сухого мха. Идеально подойдет для создания подстилки.',
  'Зелёные листья овальной формы с тёмно-зелёными жилками вдоль.',
  'Пышный куст с зелёными листьями и мелкими чёрными ягодами.',
  'Маленькие чёрные ягоды с выдавленным соком.',
  'Издалека формой цветка это растение напоминает клевер, однако оно пахнет тиной и водой.',
  'Маленькие желтые листочки, измазанные в цветочном соке.',
  'Крупные, вытянутые листья зелёного цвета с еле заметными тёмно-зелёными жилками.',
  'Кажется, вы уже видели эти цветы раньше, они росли недалеко от ручья.',
  'По легенде, сам Котья Мурмурец именно благодаря ей обрел сказочную силу. Кислая, подобно лимону.',
  'Маленькие опушенные зелёные листочки с резными краями.',
  'Растение с высоким ветвистым стеблем, на концах которого расположены светло-фиолетовые цветки.',
  'Старая безжизненная рыба\u2026 как долго она уже лежит на суше? Кто ее выловил? Неизвестно.',
  'Пропитанный водой кусок мха. Отлично подходит для утоления жажды.',
  'Маленький жучок с тонкими лапами. И как только он умудряется ходить по поверхности воды?',
  'Хрустящий домик со смешной улиткой внутри.',
  'Красноперая рыбка с темными полосками на боках.',
  'Блестящий серебром в лучах солнечного света карп.',
  'Закрытая беззубка из ближайшей реки. Интересно, есть ли что-нибудь у нее внутри?',
  'Тонкий и грязный червячок.',
  'Противная на вид и очень сочная гусеница. Хакуна матата.',
  'Скрученная, будто нарочно, в кольцо ракушка. Пахнет илом и водорослями.',
  'Странно пахнущий гриб. Поговаривают, Двуногие оценивают эти штуки очень дорого. Странные они.',
  'Семечко, из которого на свет пробился небольшой росток.',
  'Небольшой пучок травы, который можно подкинуть в чью-нибудь подстилку.',
  'Ветка, повернутая вправо.',
  'Ветка, повернутая влево.',
  'Серая дурнопахнущая крыса.',
  'Воинственная коричневая крыса с заметным хохолком. ',
  'Когда-то крыса была белой, но сейчас шкурка испачкана в пыли.',
  'Крыса с очень темной шерстью и злобой во взгляде.',
  'Большие лапки, приспособленные для копания земли, и маленькие глазки, которых практически не видно.',
  'Сладкие ягоды сочной малины.',
  'Длинная светлая веточка малины, на которой виднеются яркие ягоды.',
  'Не так вкусно, как ягодки, но прибавляет сил и отваги! (или просто вяжет в пасти).',
  'Спорили как-то лось с вороной, что такое \xABфижма\xBB. А это и не фижма вовсе, это просто-напросто Пижма!',
  'Некоторые Двуногие выращивают тюльпаны в садах, а за некоторые из луковиц можно купить целый дом!',
  'Пепедышка. Говорят, ее изготавливают из рыбы по старинному рецепту особые речные воины.',
  'Светлый клык большого животного\u2026 клык есть, животного нет. Стоит быть осторожнее!',
  'Мягкое перо, выпавшее то ли из гнезда, то ли из крыла птицы.',
  'Небольшой мешок из листьев для удобного переноса предметов.',
  'Потертая пуговица, упавшая с одежды Двуногих.',
  'Выпавший из раскрытой беззубки сверкающий камешек.',
  'Сухой листок.',
  'Сухой листок.',
  'Сухой листок.',
  'Гнилой сухой листок.',
  'Тонкий кусочек картона, на котором едва-едва можно поместиться.',
  'Свернутая в тугой рулон газета гласит: Ты замечательный!',
  'Очень вкусная сосиска. Можно попытаться осторожно стащить ее со стола.',
  'Из нескольких кусков картона получается\u2026 получается\u2026 большая картонная лежанка. Не так мягко, как на травяной, но зато бока не мерзнут.',
  'В свете закатного солнца это яблоко кажется золотым.',
  'Созданная из веток и перьев подстилка. Спать на ней можно ровно в одной позе, иначе палки тычут в ребра.',
  'Яркий мусор двуногих. Упаковка из-под чипсов забавно шуршит.',
  'Через туго сплетенные ветви едва ли можно разглядеть хоть что-то!',
  'Два носка. Они выглядят очень счастливой парой.',
  'Один носок\u2026 грустит.',
  'Иногда чужие мысли лучше не слышать. Вдруг окажется, что белки готовят мировой заговор?',
  'Спелый бок этой тыквы отливает золотом.',
  'Пучок безжизненной сухой травы напоминает о листопаде.',
  'Такое сладкое зернышко. Любая дичь захочет его съесть! ',
  'Твердый снаружи и твердый внутри.',
  'Тапки хозяина. Главное \u2014 вовремя увернуться!',
  'Месть иногда не только сладкая и холодная, но даже вонючая.',
  'Колючий снаружи\u2026 Стоит быть осторожнее, чтобы не уколоться!',
  'Широченные, уже подъеденные жуками листья.',
  'Вы решили сперва вытянуть корень лопуха из земли, а уже потом задаться вопросом, зачем вам это нужно. Теперь тут всё в черноземе.',
  'Один, два, три, четыре, пять, шесть... Сбился.',
  'А кто вообще листья считал?',
  'Наконец-то. Однолистник.',
  'Тонкие прутья с кучей мягких игл.',
  'Как тебя хлебать? Как тебя хлебать?',
  'Двуногий любит помахать ей перед Вашим носом.',
  'Липкие и пахнущие илом водоросли. Они липнут к шерсти, брр.',
  'Длинная ветвь двуногих с пушистым, но жёстким хвостом. Зачем им эти странные ветки?',
  'Длинная, плоская змея двуногих. Удивительно мягкая... Вы с позором замечаете, что хотите это украсть.',
  'Странный, жёсткий предмет двуногих с кучей редких зубов. Кажется, Вы на него уже наступали.',
  'Благословение звездных предков! Что за дивный запах?',
  'Что-то давно почерневшее и дурно пахнущее.',
  'Вы наклонились, чтобы обнюхать это, и поцарапали щеку об зубчатый край. Это того не стоило.',
  'Допутешествовалась.',
  'Вам придется долго ощипывать эту тушку галки, прежде чем её съесть.',
  'Так и манит прилечь на бочок, плутовка!',
  'Маленький белоснежный шарик из снега. Какой крохотный! ',
  'Чуть талый и липкий, но все ещё морозный. Растекся и, кажется, загрустил.',
  'Темное и плотное маховое перо галки.',
  'И что Вам с этим делать? У вас лапки! ',
  'Перо титана, одоленного в равном бою.',
  'Крупный, прочный орех, который Вы старательно выкалупывали из шипастой оболочки.',
  'Не тот орёл, кто высоко летает, а тот, кто падаль не клюёт.',
  'Склизкий гриб, который Вы нашли на коре дерева. Это пахнет не съедобно...',
  'Крупная, увесистая шишка, уже без семян. Вам хочется забрать её и показать остальным. ',
  'Вы вспоминаете историю про кошку, которая однажды до беспамятства влюбилась в один из таких. Откуда только берутся такие глупые сказки?',
  'Небольшая, вытянутая шишка с мягкими чешуйками. Ещё пахнет хвоей! ',
  'Грани этого камня сверкают и золотятся, когда через них проходит солнечный свет.',
  'Полый, давно заброшенный пчелами, и выцветевший на солнце улей. А ведь когда-то там был сладкий мед...',
  'Побежденный житель глубин.',
  'Говорят, помогает от блох. Воняет так, что начинаешь в это верить.',
  'Один из тапков хозяина. Собери их все.',
  'Отличная игрушка для котят.',
  'Кусок разорванной газеты.',
  'Ха, ёжик.',
  'Мама говорила, это есть нельзя.',
  'Очень горько, но очень полезно.',
  'Пахнет чем-то странным, не понимаю, съедобное ли оно...',
  'Похоже.. на рыбу, но ею не является. Жаль.',
  'Фигурка странной формы, источающая приторно-сладкий запах.',
  'Оно было внутри несъедобной мыши. И само оказалось несъедобным... Жаль.',
  'Ну и вонь! Уберём подальше...',
  'Острая косточка, нужно быть аккуратнее.',
  'Липкие шарики, прилипают к шерсти, но хорошо смываются водой.',
  'Кучка грустных камней. Кто их обидел?',
  'Кучка расстрёпанных перьев. Жизнь потрепала.',
  'Красивое, но рыбов не показывает.',
  'Оранжевый шарик, который можно весело катать по земле.',
  'Сладко! Это стоило ужаленного хвоста.',
  'Выглядит.. странно. Может, её можно грызть, как кость?',
  'Какая-то кучка чего-то вкусного на вид...',
  'Отличная палка, чтобы поточить когти.',
  'Оранжевый шарик без твёрдой шкурки! Очень неприятно пахнет, хочется чихнуть...',
  'Глупые Двуногие машут ей перед носом... Так и хочется поймать.',
  'Уютное и тёплое место для сна.',
  'Холодная и скользкая сосулька. Лизнуть?..',
  'Пустая обертка, с которой интересно играть.',
  'Маленькая рыбка, которой не суждено спастись.',
  'Листики с веточки тиса.',
  'Вьюночек, которому суждено быть завязанным.',
  'Как много ножек у многоножек?',
  'Толстая рыба с маленькими плавниками. Интересно, у неё была семья?',
  'Свежий, большой лист мать-и-мачехи.',
  'Сорванная веточка красного тиса.',
  'Бережно сорванный щавель.',
  'Дикая оса, очень нервная и агрессивная. Раньше.',
  'Странная по виду рыба. Есть подозрения, что она не очень вкусная.',
  'Рыба с красными плавниками.. надеюсь, она вкусная.',
  'Ранее живая пчёлка. Хрупкая.',
  'Ещё одно чудище, но не страшнее предыдущего.',
  'Аккуратно очищенный стебель мать-и-мачехи.',
  'Умело сделанная кашица из щавеля.',
  'Маленькая рыбка, которой не суждено спастись.',
  'Тщательно пережёванный тысячелистник.',
  'Счищенные с веточки ягоды тиса.',
  'Добытая большим трудом морковь.',
  'Холодная вещь Двуногих.',
  'Острый кусочек льда.',
  'След маленькой лапки.',
  'Надеюсь, в этом шарфе ему уютно.',
  'Снеговик... Снегокот!',
  'Похожий на настоящего снежный заяц.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Нежное послание.',
  'Веточка, похожая на чью-то лапу.',
]
var bgc = {}
bgc.ru = bgs
bgc.tribe_colors = [
  14930376, 16746012, 14670991, 7456395, 46296, 5726616, 16218022, 12517371,
  9509154,
];
(window.getBrowserFingerprint = function(arx) {
  var ary,
    arz,
    asa,
    asb,
    asc = (arx = arx || {}).hardwareOnly || false,
    asd = arx.enableWebgl || false,
    ase =
    'undefined' == typeof arx.enableScreen || arx.enableScreen,
    arx = arx.debug || false,
    asf = window.navigator.cookieEnabled,
    asg = window.navigator.deviceMemory,
    ash = window.navigator.doNotTrack,
    asi = window.navigator.hardwareConcurrency,
    asj = window.navigator.language,
    ask = window.navigator.languages,
    asl = window.navigator.maxTouchPoints,
    asm = window.navigator.platform,
    asn = window.navigator.userAgent,
    aso = window.navigator.vendor,
    ase =
    (ase &&
      ((ary = window.screen.width),
        (arz = window.screen.height),
        (asa = window.screen.colorDepth),
        (asb = window.screen.pixelDepth)),
      new Date().getTimezoneOffset()),
    asp = ''
  try {
    asp =
      'undefined' != typeof window.Intl ?
      Intl.DateTimeFormat().resolvedOptions().timeZone :
      ''
  } catch (asq) {}
  var asr = 'undefined' != typeof window.ontouchstart,
    ass = window.devicePixelRatio,
    ast = getCanvasID(arx),
    asu = asd ? getWebglID(arx) : undefined,
    asd = asd ? getWebglInfo(arx) : undefined,
    asc = asc ?
    JSON.stringify({
      canvas: ast,
      colorDepth: asa,
      deviceMemory: asg,
      devicePixelRatio: ass,
      hardwareConcurrency: asi,
      height: arz,
      maxTouchPoints: asl,
      pixelDepth: asb,
      platform: asm,
      touchSupport: asr,
      webgl: asu,
      webglInfo: asd,
      width: ary,
    }) :
    JSON.stringify({
      canvas: ast,
      colorDepth: asa,
      cookieEnabled: asf,
      deviceMemory: asg,
      devicePixelRatio: ass,
      doNotTrack: ash,
      hardwareConcurrency: asi,
      height: arz,
      language: asj,
      languages: ask,
      maxTouchPoints: asl,
      pixelDepth: asb,
      platform: asm,
      timezone: asp,
      timezoneOffset: ase,
      touchSupport: asr,
      userAgent: asn,
      vendor: aso,
      webgl: asu,
      webglInfo: asd,
      width: ary,
    }),
    ast = JSON.stringify(asc, null, 4)
  return (
    arx && console.log('fingerprint data', ast),
    murmurhash3_32_gc(ast)
  )
}),
(window.getCanvasID = function(asv) {
  try {
    var asw = document.createElement('canvas'),
      asx = asw.getContext('2d'),
      asy =
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`~1!2@3#4$5%6^7&8*9(0)-_=+[{]}|;:',<.>/?",
      asz =
      ((asx.textBaseline = 'top'),
        (asx.font = "14px 'Arial'"),
        (asx.textBaseline = 'alphabetic'),
        (asx.fillStyle = '#f60'),
        asx.fillRect(125, 1, 62, 20),
        (asx.fillStyle = '#069'),
        asx.fillText(asy, 2, 15),
        (asx.fillStyle = 'rgba(102, 204, 0, 0.7)'),
        asx.fillText(asy, 4, 17),
        asw.toDataURL())
    return (
      asv ?
      document.body.appendChild(asw) :
      asx.clearRect(0, 0, asw.width, asw.height),
      murmurhash3_32_gc(asz)
    )
  } catch (ata) {
    return null
  }
}),
(window.getWebglID = function(atb) {
  try {
    var atc = document.createElement('canvas'),
      atd = atc.getContext('webgl'),
      ate =
      ((atc.width = 256),
        (atc.height = 128),
        atd.createBuffer()),
      atf =
      (atd.bindBuffer(atd.ARRAY_BUFFER, ate),
        new Float32Array([-0.2, -0.9, 0, 0.4, -0.26, 0, 0, 0.7321, 0])),
      atg =
      (atd.bufferData(
          atd.ARRAY_BUFFER,
          atf,
          atd.STATIC_DRAW
        ),
        (ate.itemSize = 3),
        (ate.numItems = 3),
        atd.createProgram()),
      ath = atd.createShader(atd.VERTEX_SHADER),
      ati =
      (atd.shaderSource(
          ath,
          'attribute vec2 attrVertex;varying vec2 varyinTexCoordinate;uniform vec2 uniformOffset;void main(){varyinTexCoordinate=attrVertex+uniformOffset;gl_Position=vec4(attrVertex,0,1);}'
        ),
        atd.compileShader(ath),
        atd.createShader(atd.FRAGMENT_SHADER)),
      atj =
      (atd.shaderSource(
          ati,
          'precision mediump float;varying vec2 varyinTexCoordinate;void main() {gl_FragColor=vec4(varyinTexCoordinate,0,1);}'
        ),
        atd.compileShader(ati),
        atd.attachShader(atg, ath),
        atd.attachShader(atg, ati),
        atd.linkProgram(atg),
        atd.useProgram(atg),
        (atg.vertexPosAttrib = atd.getAttribLocation(
          atg,
          'attrVertex'
        )),
        (atg.offsetUniform = atd.getUniformLocation(
          atg,
          'uniformOffset'
        )),
        atd.enableVertexAttribArray(atg.vertexPosArray),
        atd.vertexAttribPointer(
          atg.vertexPosAttrib,
          ate.itemSize,
          atd.FLOAT,
          false,
          0,
          0
        ),
        atd.uniform2f(atg.offsetUniform, 1, 1),
        atd.drawArrays(atd.TRIANGLE_STRIP, 0, ate.numItems),
        new Uint8Array(atc.width * atc.height * 4)),
      atk =
      (atd.readPixels(
          0,
          0,
          atc.width,
          atc.height,
          atd.RGBA,
          atd.UNSIGNED_BYTE,
          atj
        ),
        JSON.stringify(atj).replace(/,?"[0-9]+":/g, ''))
    return (
      atb ?
      document.body.appendChild(atc) :
      atd.clear(
        atd.COLOR_BUFFER_BIT |
        atd.DEPTH_BUFFER_BIT |
        atd.STENCIL_BUFFER_BIT
      ),
      murmurhash3_32_gc(atk)
    )
  } catch (atl) {
    return null
  }
}),
(window.getWebglInfo = function() {
  try {
    var atm = document.createElement('canvas').getContext('webgl')
    return {
      VERSION: String(atm.getParameter(atm.VERSION)),
      SHADING_LANGUAGE_VERSION: String(
        atm.getParameter(atm.SHADING_LANGUAGE_VERSION)
      ),
      VENDOR: String(atm.getParameter(atm.VENDOR)),
      SUPORTED_EXTENSIONS: String(atm.getSupportedExtensions()),
    }
  } catch (atn) {
    return null
  }
}),
(window.murmurhash3_32_gc = function(ato) {
  for (
    var atp,
      atq,
      atr = 3 & ato.length,
      ats = ato.length - atr,
      att = 0; att < ats; att++
  ) {
    atu =
      (255 & ato.charCodeAt(att)) |
      ((255 & ato.charCodeAt(++att)) << 8) |
      ((255 & ato.charCodeAt(++att)) << 16) |
      ((255 & ato.charCodeAt(++att)) << 24)
      ++att
    atp =
      27492 +
      (65535 &
        (atq =
          (5 *
            (65535 &
              (atp =
                ((atp ^= atu =
                    ((65535 &
                        (atu =
                          ((atu =
                              ((65535 & atu) * 3432918353 +
                                ((((atu >>> 16) * 3432918353) & 65535) <<
                                  16)) &
                              4294967295) <<
                            15) |
                          (atu >>> 17))) *
                      461845907 +
                      ((((atu >>> 16) * 461845907) & 65535) << 16)) &
                    4294967295) <<
                  13) |
                (atp >>> 19))) +
            (((5 * (atp >>> 16)) & 65535) << 16)) &
          4294967295)) +
      (((58964 + (atq >>> 16)) & 65535) << 16)
  }
  var att = ats - 1,
    atu = 0
  switch (atr) {
    case 3:
      atu ^= (255 & ato.charCodeAt(att + 2)) << 16
      break
    case 2:
      atu ^= (255 & ato.charCodeAt(att + 1)) << 8
      break
    case 1:
      atu ^= 255 & ato.charCodeAt(att)
  }
  return (
    (atp =
      (2246822507 *
        (65535 &
          (atp =
            (atp =
              atp ^
              (atu =
                ((65535 &
                    (atu =
                      ((atu =
                          ((65535 & atu) * 3432918353 +
                            ((((atu >>> 16) * 3432918353) & 65535) << 16)) &
                          4294967295) <<
                        15) |
                      (atu >>> 17))) *
                  461845907 +
                  ((((atu >>> 16) * 461845907) & 65535) << 16)) &
                4294967295) ^
              ato.length) ^
            (atp >>> 16))) +
        (((2246822507 * (atp >>> 16)) & 65535) << 16)) &
      4294967295),
    (atp =
      (3266489909 * (65535 & (atp ^= atp >>> 13)) +
        (((3266489909 * (atp >>> 16)) & 65535) << 16)) &
      4294967295),
    (atp ^= atp >>> 16) >>> 0
  )
}),
(am.prototype = Object.create(PIXI.Container.prototype)),
((am.prototype.constructor = am).DATA_DEFAULT_SIZE = arw),
(am.DATA_ANIM_SPEED = atv),
(am.DATA_ANIM_CAT_SPEED = atw),
(am.DATA_ACTION_ANIM = atx),
(fv.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(fv.prototype.constructor = fv),
(ip.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(ip.prototype.constructor = ip),
(agq.quotes = [
  'Подозрительный храп доносится из палатки предводителя. Интересно, что за зверь там живет?',
  'Желтый снег есть нельзя.',
  'Не стоит жевать все подряд.',
  'Кваканье лягушек \u2014 лучшая музыка.',
  'Иногда из воды можно выловить опасную рыбу. Будьте осторожны.',
  'Птицы могут улететь, ну надо же!',
  'Не забывайте следить за энергией во время охоты!',
  'В холодном камне живут души предков.',
  'Таинственный Скульптор оставил несколько статуй во дворе своего дома.',
  'В дубах можно услышать цоканье белок.',
  'Журчанье реки всегда успокаивает.',
  'Не забывай смотреть в небо, когда заходишь в горы, путник!',
  'Двуногие часто выкидывают мусор вдоль гремящих троп.',
  'Не верь лисицам!',
  'Держи нос по ветру и хвост трубой!',
  'Перед началом игры не забудь заглянуть в Заметки племени.',
  'Охота на крупную дичь требует больше сил.',
  'Всегда иди по запаху, чтобы не заблудиться в незнакомом месте.',
  'Барсуки хоть и сильные, но медлительные.',
  'Иногда можно выкопать вкусные вещи.',
  'На территории домашних полно интересных и незнакомых вещей.',
  'Кто подкинул испорченные тапки мне в лежанку?!',
  'Некоторые рыбы в реке очень больно кусаются.',
  'Будьте аккуратны, гуляя по городу \u2013 там водятся чудища, крысы и бродячие собаки.',
  'Иногда в голову прилетают интересные вещи. Например, жёлудь.',
  'Ходит слух, что если съесть странное блестящее яблоко, мир заиграет новыми красками.',
  'Твори добро при жизни, чтобы не очутиться в Беззвездном лесу.',
  'Эта длинная и странная рыба пытается съесть меня!',
  'Да где растёт эта кошачья мята?!',
  'Клан \u2013 не единственные котики, что проживают в горах.',
  'Убедительно просим вас не лизать сосульки при сильном морозе.',
]),
(agq.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(agq.prototype.constructor = agq),
(ahu.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(ahu.prototype.constructor = ahu),
(ais.THEME_DEFAULT = 0),
(ais.THEME_WINTER = 1),
(ais.THEME_HOLIDAY = 2),
(ais.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(ais.prototype.constructor = ais),
(akz.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(akz.prototype.constructor = akz),
(alg.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(alg.prototype.constructor = alg),
(amj.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(amj.prototype.constructor = amj),
(ane.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(ane.prototype.constructor = ane),
(aox.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(aox.prototype.constructor = aox),
(apm.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(apm.prototype.constructor = apm),
(aqp.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(aqp.prototype.constructor = aqp),
(aqv.prototype = Object.create(PIXI.scenes.Scene.prototype)),
(aqv.prototype.constructor = aqv),
(window.Game = {
  version: 'v5.1.2',
  versionPatch: '.00',
  versionCode: 'v336',
  versionName: "Summer Update '24",
  isWebGLSupported: false,
  imageCacheInitialized: false,
  isCordova: false,
  holidayTheme: 'default',
  safeCloseClicks: 0,
  resources: {},
  unloadLoader: function(aty) {
    for (var atz in aty.resources)
      Game.resources[atz] = aty.resources[atz]
    aty.reset()
  },
  serverStaticContent: '',
  levelPath: '',
  nextSceneName: null,
  months: [
    'янв',
    'фев',
    'мар',
    'апр',
    'мая',
    'июн',
    'июл',
    'авг',
    'сен',
    'окт',
    'нояб',
    'дек',
  ],
  serverHost: 'https://catlifeonline.com/',
  serverUrl: 'https://awakeriver.catlifeonline.com/',
  requiredHats: [0, 1, 2, 3, 4, 5, 6, 40],
  incompatibleHats: [
    [1, 87, 88, 89],
    [87, 88, 89, 59],
    [87, 88, 89, 60],
    [87, 88, 89, 61],
    [87, 88, 89, 62],
    [87, 88, 89, 63],
    [87, 88, 89, 64],
    [87, 88, 89, 82],
    [87, 88, 89, 84],
    [87, 88, 89, 85],
    [87, 88, 89, 76],
    [87, 88, 89, 74],
  ],
  supportEntityMask: aua,
  closedLocs: [
    '04f9a40461347e83dd44cac10d62cf67a4806f3f',
    '7faccd2d5388646f1a8dc8d3276675d64a49419e',
    '9cb45e69a3a8712f1ed4452c2f7cba6a09380258',
    '9f1346ff806c63bf9cf3f1c6422391feb42170ff',
    '9ee110da529ee76cccc45daa5784938890bb0f06',
    '12cac8a4ec51b66ef941117643b27b7baea5707a',
    '61a4e5ad6030b6c71fd9e94224a61ea116543034',
    '94dd3dec19e434b402c68d19a69ac6c3e9435927',
    '96a357efcfdb7917825165ca3ea4df7ee8b8dfb9',
    '345f61d57aec710e05e58e7341dee656a48880cc',
    '515f3ab015a942b9bf2bd231bb02a66903989b4c',
    '0561c6cdbcffbde61bc46c72a456ec54bfae8f62',
    '850ad2b49cbb0295aceb5e83b74d276eb9e5ce99',
    '2233eaeed675d75b109cd04a6a882558582e2e3e',
    '77846e0701f7ceb110c0497e98520abd25bc916e',
    '3443236b81fa457215bde04fcbbfc814175f290c',
    'b0cba44e9053facfd94f5582a9011dd759020b53',
    'df0a930c639dc9b3bdee54a789aabd7db125dd6b',
    'eb23135ed6a73ccbf9a67e3368fecb86e6217af8',
    'ef9ddae0978f111495d7c09a88f2d36bb8f55679',
    'ff532d3a8a03459d26a2f32cbec57948ae797d98',
    '52843bba0a53767306258123100b7daf656f18d1',
    'de8724c64eb03116e602eb16b51a506779b335b2',
    '37869232b08dea4ee81612863d4a2bd0cf0a818c',
    'dc17110d6d8b0b00fabf0aea95f4fe4a0c003eb7',
    'b0f0db223f58d5f112eade6a4d1dd31ba2f7fcab',
    '29c1913c-0cd7-48c5-ae99-e50403230500',
    '6f5e9996-1689-4775-b796-dfe44fc1518a',
    '2da060c7-ca9b-4413-b9f3-b05da0c2e823',
    '77b1236c-c7df-488f-a4fb-985bc955b954',
    '5d4203f0-3820-4f8e-9a26-4a436c6e4512',
    '0e1f18c5-b6dd-4394-bbaf-2a82e5bc4b25',
    '7988e002-83cc-4ce9-bfe9-b2799d1b540f',
    '5b11cbf3-d9c1-4522-9eab-fd9c30c66e8f',
    '56d496d5-69ec-4dd2-aaca-ca6c171d5e7c',
    '321c24a1-dd97-4875-93ee-31835bdc8d37',
    '72834578-509a-4873-8dd1-1b5277dc5ebd',
    '1e4e3d21-f655-4b47-afd2-61b06e43b33f',
    '35735d77-4e19-4652-8b16-78a0dc2f60c8',
    '5403fd92-a80b-4beb-8d23-3e7e4943e9db',
    '0b34641f-55cf-4fab-955c-d2c5af731f98',
    '0ea85f62-2e78-4961-b916-f492c91cc976',
    '4b45994d-7d59-41bf-9be5-3554959078c0',
    '7af6d6d0-c1ab-471d-8f65-c78cea720ab3',
    '7509e044-17de-4f47-8004-feb93e33febb',
    'af35cd69-c578-40db-b8b5-0968f65b6a81',
    'beb11ed4-c158-418c-8d40-343213fabc92',
    'c9ed52c4-3cd9-4cad-8405-dc06741c05b8',
    'cd985c23-71c0-470f-ae18-6703a2441405',
    'd103c047-26b7-409c-beb6-278d775b97f5',
    'd6279e87-28ce-45e6-a877-5eb5b87aee64',
    'ec39da1e-d33f-47b3-83a4-f17a29a83f5f',
    '187cf4af-5b5f-4720-bd8f-24fa9b8b60d0',
    'b5caca75-190e-4568-9c01-cd48e19986d2',
    'f8ee3a18-6a86-4f4b-867e-a3af42d5a12c',
    'ed6ec0fe-57e1-4786-b484-1e68a67d2e92',
    '2327b598-52af-4d8b-a4d7-b21f4b1e6cfe',
    '1d5bf90b-4b77-4729-ba39-3b17358f413e',
    '43869bea-a9ff-466d-9cee-ca0df6e345c4',
    '9851462a-64f3-4b6f-97a8-e4b004a082ed',
  ],
  lightedLocs: aub,
  emotes: [
    'catCheck',
    'catHmm',
    'catPls',
    'catWhy',
    'catConfuse',
    'catCrazy',
    'catCry',
    'catHeart',
    'catLol',
    'catLove',
    'catOh',
    'catSun',
    'catThink',
  ],
  app: null,
  platform: 'browser',
  chat: null,
  chatInput: null,
  chatBtnSend: null,
  pages: [],
  closeReason: null,
  stage: null,
  server: null,
  token: null,
  availableColors: [
    16447474, 16250871, 14661772, 8160138, 8288645, 12605486, 7158309,
    13533524, 12211501, 15655131, 13680053, 7891042, 3551280, 5787985,
    10514255, 5653812, 15459042, 13876412, 10584963, 10917503, 14143941,
    1710630, 4406859, 6972531, 7303011, 9931393, 3022868, 14271394, 12093807,
    9530465, 7357240, 13225173, 9738923, 4409428, 7103328, 14077128, 11906217,
    14738411, 6975602, 3686209,
  ],
  eyeColors: [
    13236987, 9687037, 3121656, 4284404, 10990053, 6036765, 8410701, 16710650,
    16767077, 15972619, 15831815, 16150787, 16773787, 13030225, 10213134,
    3853377, 1808930, 9607852,
  ],
  sceneConfig: {},
  packets: [],
  threads: [],
  hideUi: false,
  firebaseInitialized: false,
  googlePlayAuthorized: false,
  cachedChatSprites: {},
  lastScroll: 0,
  lastPlaySound: 0,
  playerid: null,
  colors: null,
  username: null,
  playername: null,
  player_groups: [],
  currentMusic: null,
  nextMusicString: null,
  currentMusicType: null,
  isMusicLoad: false,
  observer: null,
  selectedChatChannel: 0,
  setMaxVolumeSounds: 0.5,
  setMaxVolumeMusic: 0.4,
  setMusic: 1,
  setLimitFps: 0,
  setMaxResolution: 1,
  setBoolAnimWind: 1,
  setMultLoad: 0,
  setShadows: 0,
  setFog: 0,
  setMaxLight: 0,
  setAudioBar: 1,
  setMaxVolumeSpeak: 0.2,
  setMuteNoFriend: 1,
  setChatNotice: 1,
  setChatEntity: 1,
  setSub: 0,
  setShaders: 0,
  setPixelInterpolation: 1,
  setNoData: 1,
  setUsePortal: 1,
  achievements: [],
  lastSeenLevel: [],
  btnFontSize: 16,
  currentPlaylist: {},
  mp3List: auc,
  myStorage: {
    remove: function(aud) {
      try {
        localStorage.removeItem('catlifegame_' + aud)
      } catch (aue) {
        return false
      }
      return true
    },
    set: function(auf, aug) {
      try {
        localStorage.setItem('catlifegame_' + auf, aug)
      } catch (auh) {
        return false
      }
      return true
    },
    get: function(aui, auj) {
      var auk
      try {
        auk = localStorage.getItem('catlifegame_' + aui)
      } catch (aul) {
        auk = null
      }
      if (
        (('null' != auk && '' != auk) || (auk = null),
          null != auj && auj)
      ) {
        try {
          auk = JSON.parse(auk)
        } catch (aum) {
          auk = null
        }
      }
      return auk
    },
  },
  auth: function() {
    Game.openWeb(
      'https://myaccount.catlifeonline.com/signin?url=https://myaccount.catlifeonline.com/play'
    )
  },
  telegramAuth: function() {
    Game.openWeb(
      'https://myaccount.catlifeonline.com/signin?url=https://myaccount.catlifeonline.com/telegram&catlife_token=' +
      Game.token
    )
  },
  openWeb: function(aun) {
    Game.isCordova ?
      ((Game.inAppBrowserRef = window.open(
          aun,
          '_blank',
          'hidenavigationbuttons=yes,hideurlbar=no,navigationbuttoncolor=#ffffff,toolbarcolor=#000000,closebuttoncolor=#ffffff,zoom=no,beforeload=yes'
        )),
        Game.inAppBrowserRef.addEventListener('message', Game.eventGetToken),
        Game.inAppBrowserRef.addEventListener(
          'beforeload',
          function(auo, aup) {
            Game.restrictAccess(auo.url) && aup(auo.url)
          }
        ),
        Game.inAppBrowserRef.addEventListener('loaderror', function() {
          Game.inAppBrowserRef.close()
        }),
        Game.inAppBrowserRef.addEventListener('exit', function() {
          Game.inAppBrowserRef = null
        })) :
      window.open(aun, '', 'width=800,height=450')
  },
  restrictAccess: function(auq) {
    return (
      (-1 === auq.indexOf('catlifeonline.com') &&
        -1 === auq.indexOf('worldcats.ru')) ||
      -1 !== auq.indexOf('/logout') ||
      -1 !== auq.indexOf('/legal.html') ||
      -1 !== auq.indexOf('/auth.php') ||
      -1 !== auq.indexOf('/privacypolicy.html') ||
      -1 !== auq.indexOf('myaccount.catlifeonline.com')
    )
  },
  goToScene: function(aur) {
    Game.scenes.activeName == aur && Game.scenes.stop()
    Game.scenes.start(aur)
  },
  playSound: function(aus, aut) {
    var auu = new Date().getTime();
    (null != aut &&
      0 < aut &&
      auu - Game.lastPlaySound < aut) ||
    (((aut = PIXI.sound.find('sounds/' + aus)).volume =
        Game.setMaxVolumeSounds),
      aut.play(),
      (Game.lastPlaySound = auu))
  },
  animList: function(auv, auw, aux) {
    var auy,
      auz = [],
      avb = []
    if (
      (null != aux && (auw += '/id' + aux),
        null != Game.resources['entity/' + auv])
    ) {
      for (
        var avc = Game.resources['entity/' + auv].textures,
          avd = auz.length - 1; avd < 10; avd++
      ) {
        null !=
          avc[
            (auy = auv + '/' + auw + '/' + avd) +
            '.png'
          ] &&
          (auz.push(avc[auy + '.png']),
            null != avc[auy + '_n.png']) &&
          avb.push(avc[auy + '_n.png'])
      }
    }
    var ave = {}
    return (
      (ave.texture = auz),
      (ave.normalTexture = avb),
      ave
    )
  },
  packet: avf,
  loadDom: function() {
    document.body.innerHTML +=
      '<div id="clGame">    <div id="clInteractPage" hidden="true"></div></div>'
    avg = Game.myStorage.get('version')
    Game.myStorage.set('version', Game.versionCode)
    null != window.requestFileSystem && null != window.ImgCache ?
      ((ImgCache.options.debug = true),
        (ImgCache.options.chromeQuota = 262144000),
        (ImgCache.options.localCacheFolder = 'catlife'),
        (ImgCache.options.usePersistentCache = true),
        Game.isCordova &&
        (ImgCache.options.cordovaFilesystemRoot =
          cordova.file.dataDirectory),
        ImgCache.init(
          function() {
            null != avg && avg != Game.versionCode ?
              ImgCache.clearCache(
                function() {
                  Game.imageCacheInitialized = true
                  Game.start()
                },
                function() {
                  Game.start()
                }
              ) :
              ((Game.imageCacheInitialized = true), Game.start())
          },
          function() {
            Game.start()
          }
        )) :
      Game.start()
    var avg,
      avh = ''
    avh += '<div id="clGame">';
    (document.body.innerHTML +=
      '<div id="clGame">    <div id="clInteractPage" hidden="true"></div></div>'),
    (avg = Game.myStorage.get('version')),
    Game.myStorage.set('version', Game.versionCode),
      null != window.requestFileSystem && null != window.ImgCache ?
      ((ImgCache.options.debug = true),
        (ImgCache.options.chromeQuota = 262144000),
        (ImgCache.options.localCacheFolder = 'catlife'),
        (ImgCache.options.usePersistentCache = true),
        Game.isCordova &&
        (ImgCache.options.cordovaFilesystemRoot =
          cordova.file.dataDirectory),
        ImgCache.init(
          function() {
            null != avg && avg != Game.versionCode ?
              ImgCache.clearCache(
                function() {
                  Game.imageCacheInitialized = true
                  Game.start()
                },
                function() {
                  Game.start()
                }
              ) :
              ((Game.imageCacheInitialized = true), Game.start())
          },
          function() {
            Game.start()
          }
        )) :
      Game.start()
  },
  start: function() {
    avi.add('preload', new akz())
    avi.add('login', new ahu())
    avi.add('load', new agq())
    avi.add('menu', new ais())
    avi.add('level', new ip())
    avi.add('cat', new fv())
    avi.add('hidden', new alg())
    avi.add('tribe', new aox())
    avi.add('swim', new amj())
    avi.add('swimtwo', new ane())
    avi.add('apple', new apm())
    avi.add('nodata', new aqp())
    avi.add('review', new aqv())
    Game.updateHolidayTheme()
    Game.goToScene('preload')
    window.addEventListener(
      'beforeunload',
      function() {
        !Game.isCordova && Game.pages.length < 1 && Game.app.destroy(true)
      },
      false
    )
    Game.scrollListener = null
    window.addEventListener('wheel', Game.onScrollWindow, false)
    window.addEventListener(
      'resize',
      function() {
        Game.resizeToWindow()
      },
      false
    )
    Game.resizeToWindow()
    Game.clInteractPageContent = document.getElementById('clInteractPage')
    Game.isCordova &&
      document.addEventListener(
        'backbutton',
        function(avj) {
          avj.preventDefault()
          'cat' == Game.scenes.activeName ||
            'hidden' == Game.scenes.activeName ?
            Game.goToScene('menu') :
            'level' == Game.scenes.activeName ?
            Game.safeServerClose() :
            ('menu' != Game.scenes.activeName &&
              'login' != Game.scenes.activeName) ||
            navigator.app.exitApp()
        },
        false
      )
    navigator.getUserMedia =
      navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia ||
      navigator.msGetUserMedia
    null != navigator.userAgent && -1 != navigator.userAgent.indexOf('Chrome') ?
      console.log(
        '%cCATLIFE%c ' +
        Game.version +
        Game.versionPatch +
        ' | https://play.worldcats.ru',
        'font-weight:bold;font-size:20px;color:#ffffff;background:#993300',
        'font-size:12px;color:#ffffff'
      ) :
      console.log(
        'CATLIFE ' +
        Game.version +
        Game.versionPatch +
        ' | https://play.worldcats.ru'
      )
    window.addEventListener('error', function(avk) {
      Game.isCordova &&
        0 === Game.setNoData &&
        'string' == typeof avk.error.message &&
        cordova.plugins.firebase.analytics.logEvent('error_message', {
          message: avk.error.message.substring(0, 100),
        })
    })
    Game.playername = Game.myStorage.get('playername')
    Game.username = Game.myStorage.get('username')
    var avi = Game.myStorage.get('sub_id'),
      avi =
      (null != avi && (Game.setSub = parseInt(avi)),
        Game.myStorage.get('selectedServer')),
      avi =
      (null != avi && (Game.selectedServer = avi),
        Game.myStorage.get('inputSetChatEntity')),
      avi =
      (null != avi && (Game.setChatEntity = parseInt(avi)),
        Game.myStorage.get('inputSetPixelInterpolation')),
      avi =
      (null != avi &&
        (Game.setPixelInterpolation = parseInt(avi)),
        Game.myStorage.get('inputSetNoData')),
      avi =
      (null != avi && (Game.setNoData = parseInt(avi)),
        Game.myStorage.get('inputSetChatNotice')),
      avi =
      (null != avi && (Game.setChatNotice = parseInt(avi)),
        Game.myStorage.get('colors'))
    null != avi && (Game.colors = JSON.parse(avi))
    try {
      null != (avl = localStorage.getItem('game_setMaxResolution')) &&
        (Game.setMaxResolution = parseFloat(avl))
    } catch (avm) {}
    try {
      null != (avn = localStorage.getItem('game_setMusic')) &&
        (Game.setMusic = parseInt(avn))
    } catch (avo) {}
    try {
      null != (avp = localStorage.getItem('game_setBoolAnimWind')) &&
        (Game.setBoolAnimWind = parseInt(avp))
    } catch (avq) {}
    try {
      null != (avr = localStorage.getItem('game_setMultLoad')) &&
        (Game.setMultLoad = parseInt(avr))
    } catch (avs) {}
    var avt,
      avu,
      avv,
      avi = Game.myStorage.get('setMaxVolumeMusic'),
      avl =
      (null != avi &&
        (Game.setMaxVolumeMusic = parseFloat(avi)),
        Game.myStorage.get('setMaxVolumeSounds')),
      avn =
      (null != avl &&
        (Game.setMaxVolumeSounds = parseFloat(avl)),
        Game.myStorage.get('setShadows')),
      avp =
      (null != avn && (Game.setShadows = parseInt(avn)),
        Game.myStorage.get('setFog')),
      avr =
      (null != avp && (Game.setFog = parseInt(avp)),
        Game.myStorage.get('setUsePortal')),
      avi =
      (null != avr && (Game.setUsePortal = parseInt(avr)),
        Game.myStorage.get('setMaxLight')),
      avl =
      (null != avi && (Game.setMaxLight = parseInt(avi)),
        Game.myStorage.get('setLimitFps'))
    null != avl && (Game.setLimitFps = parseInt(avl))
    try {
      null != (avt = localStorage.getItem('game_setAudioBar')) &&
        (Game.setAudioBar = parseInt(avt))
    } catch (avw) {}
    try {
      null != (avu = localStorage.getItem('game_setMaxVolumeSpeak')) &&
        (Game.setMaxVolumeSpeak = parseFloat(avu))
    } catch (avx) {}
    try {
      null != (avv = localStorage.getItem('game_setMuteNoFriend')) &&
        (Game.setMuteNoFriend = parseInt(avv))
    } catch (avy) {}
    var avz,
      avn = Game.myStorage.get('achievements')
    null != avn && (Game.achievements = JSON.parse(avn))
    Game.isCordova && ((Game.setAudioBar = 0), (Game.setMaxVolumeSpeak = 0))
    PIXI.Loader.shared.concurrency = 1 == Game.setMultLoad ? 2 : 1
    Game.clGame = document.getElementById('clGame')
    Game.app = new PIXI.Application({
      resolution: Game.setMaxResolution
    })
    1 == Game.setLimitFps && (Game.app.ticker.maxFPS = 30)
    Game.isWebGLSupported = PIXI.utils.isWebGLSupported()
    Game.isWebGLSupported ?
      ((avp = Game.app.renderer.context.extensions),
        null != (avr = Game.myStorage.get('inputSetShaders')) ?
        (Game.setShaders = avr) :
        ((Game.setShaders =
            2 == Game.app.renderer.context.webGLVersion ? 0 : 1),
          (Game.setShaders =
            null != avp.anisotropicFiltering ? 0 : Game.setShaders),
          (Game.setShaders =
            null != avp.floatTextureLinear ? 0 : Game.setShaders),
          (Game.setShaders =
            null != avp.s3tc_sRGB ? 0 : Game.setShaders),
          (Game.setShaders = null != avp.astc ? 0 : Game.setShaders),
          (Game.setShaders =
            null != avp.uint32ElementIndex ? 0 : Game.setShaders),
          (Game.setShaders = null != avp.etc ? 0 : Game.setShaders)),
        1 != Game.setShaders &&
        null != PIXI.display &&
        null != PIXI.display.Stage ?
        (Game.app.stage = new PIXI.display.Stage()) :
        (Game.isWebGLSupported = false)) :
      (Game.setShaders = 1)
    Game.stage = Game.app.stage
    Game.clGame.appendChild(Game.app.view)
    Game.app.renderer.plugins.interaction.cursorStyles.default =
      "url('cursor.png'),auto"
    Game.app.renderer.plugins.interaction.cursorStyles.pointer =
      "url('cursor.png'),auto"
    window.addEventListener('message', Game.eventGetToken)
    try {
      null != (avz = localStorage.getItem('gameToken1')) ?
        (Game.token = avz) :
        null != (avz = Game.getCookie('catlife_token')) &&
        ((Game.token = avz),
          Game.eventGetToken({
            data: {
              token: avz
            }
          }))
    } catch (awa) {}
    avi = Game.scenes = new PIXI.scenes.SceneManager(Game.app)
    avi.add('preload', new akz()),
      avi.add('login', new ahu()),
      avi.add('load', new agq()),
      avi.add('menu', new ais()),
      avi.add('level', new ip()),
      avi.add('cat', new fv()),
      avi.add('hidden', new alg()),
      avi.add('tribe', new aox()),
      avi.add('swim', new amj()),
      avi.add('swimtwo', new ane()),
      avi.add('apple', new apm()),
      avi.add('nodata', new aqp()),
      avi.add('review', new aqv()),
      Game.updateHolidayTheme(),
      Game.goToScene('preload'),
      window.addEventListener(
        'beforeunload',
        function() {
          !Game.isCordova && Game.pages.length < 1 && Game.app.destroy(true)
        },
        false
      ),
      (Game.scrollListener = null),
      window.addEventListener('wheel', Game.onScrollWindow, false),
      window.addEventListener(
        'resize',
        function() {
          Game.resizeToWindow()
        },
        false
      ),
      Game.resizeToWindow(),
      (Game.clInteractPageContent =
        document.getElementById('clInteractPage')),
      Game.isCordova &&
      document.addEventListener(
        'backbutton',
        function(avj) {
          avj.preventDefault()
          'cat' == Game.scenes.activeName ||
            'hidden' == Game.scenes.activeName ?
            Game.goToScene('menu') :
            'level' == Game.scenes.activeName ?
            Game.safeServerClose() :
            ('menu' != Game.scenes.activeName &&
              'login' != Game.scenes.activeName) ||
            navigator.app.exitApp()
        },
        false
      ),
      (navigator.getUserMedia =
        navigator.getUserMedia ||
        navigator.webkitGetUserMedia ||
        navigator.mozGetUserMedia ||
        navigator.msGetUserMedia),
      null != navigator.userAgent &&
      -1 != navigator.userAgent.indexOf('Chrome') ?
      console.log(
        '%cCATLIFE%c ' +
        Game.version +
        Game.versionPatch +
        ' | https://play.worldcats.ru',
        'font-weight:bold;font-size:20px;color:#ffffff;background:#993300',
        'font-size:12px;color:#ffffff'
      ) :
      console.log(
        'CATLIFE ' +
        Game.version +
        Game.versionPatch +
        ' | https://play.worldcats.ru'
      )
  },
  updateHolidayTheme: function() {
    var awb = new Date(),
      awc = awb.getDate(),
      awb = awb.getMonth()
    Game.holidayTheme = 1 == awc && 3 == awb ? 'april' : 'default'
  },
  updateSubscribe: function(awd) {
    Game.myStorage.set('subscription', awd)
    Game.send({
      query: Game.packet.SUBSCRIBE_TOPIC,
      token: awd,
    })
  },
  browserSubscribe: function() {
    var awe
    Game.isCordova ?
      ((awe = cordova.plugins.firebase.messaging).onTokenRefresh(
          function() {
            awe.getToken().then(function(awf) {
              Game.updateSubscribe(awf)
            })
          }
        ),
        awe.getToken().then(function(awg) {
          Game.updateSubscribe(awg)
        }),
        (Game.firebaseInitialized = true)) :
      null != window.firebase &&
      null != window.Notification &&
      (Game.firebaseInitialized ||
        (firebase.initializeApp({
            apiKey: 'AIzaSyCYEmbXv9qkETgDjbRr4eqiU8UGv64TBmQ',
            authDomain: 'worldcat-df2a9.firebaseapp.com',
            projectId: 'worldcat-df2a9',
            storageBucket: 'worldcat-df2a9.appspot.com',
            messagingSenderId: '214042291268',
            appId: '1:214042291268:web:5bdbb60b76168dfa266011',
          }),
          (Game.firebaseInitialized = true)),
        (awe = firebase.messaging()).onTokenRefresh(function() {
          awe.getToken().then(function(awh) {
            Game.updateSubscribe(awh)
          })
        }),
        'denied' != Notification.permission) &&
      awe.requestPermission().then(function() {
        awe.getToken().then(function(awi) {
          Game.updateSubscribe(awi)
        })
      })
  },
  audio: {
    muted: true,
    time: 1000,
    stream: null,
    currentAudio: null,
    mediaRecorder: null,
    timeoutRecord: null,
    audioSrc: null,
    startRecord: function() {
      1 == Game.setAudioBar && navigator.getUserMedia ?
        navigator.getUserMedia(
          awj,
          function(awk) {
            awk.addEventListener(awl.nhFGp, function() {
              this.audioChunks = []
              Game.audio.timeoutRecord = awl.sjOET(
                setTimeout,
                function() {
                  null != Game.audio.mediaRecorder &&
                    Game.audio.mediaRecorder.stop()
                },
                Game.audio.time
              )
            })
            awk.addEventListener(
              'dataavailable',
              function(awm) {
                null != this.audioChunks &&
                  this.audioChunks.push(awm.data)
              }
            )
            awk.addEventListener(awl.gcRmd, function() {
              var awn = new Blob(this.audioChunks),
                awo = ((this.audioChunks = []), new FileReader())
              awo.readAsDataURL(awn)
              awo.onloadend = function() {
                  null != Game.server &&
                    Game.server.emit('voice', this.result)
                }!Game.audio.muted &&
                'level' == Game.scenes.activeName &&
                Game.scenes.active.btnAudio.children[1].visible &&
                this.start()
            })
            awk.start()
            Game.audio.stream = awk
            awk = Game.audio.mediaRecorder = new MediaRecorder(
              awk
            )
            awk.addEventListener(awl.nhFGp, function() {
                this.audioChunks = []
                Game.audio.timeoutRecord = awl.sjOET(
                  setTimeout,
                  function() {
                    null != Game.audio.mediaRecorder &&
                      Game.audio.mediaRecorder.stop()
                  },
                  Game.audio.time
                )
              }),
              awk.addEventListener(
                'dataavailable',
                function(awm) {
                  null != this.audioChunks &&
                    this.audioChunks.push(awm.data)
                }
              ),
              awk.addEventListener(awl.gcRmd, function() {
                var awn = new Blob(this.audioChunks),
                  awo = ((this.audioChunks = []), new FileReader())
                awo.readAsDataURL(awn)
                awo.onloadend = function() {
                    null != Game.server &&
                      Game.server.emit('voice', this.result)
                  }!Game.audio.muted &&
                  'level' == Game.scenes.activeName &&
                  Game.scenes.active.btnAudio.children[1].visible &&
                  this.start()
              }),
              awk.start()
          },
          Game.audio.handleError
        ) :
        awl.UjSVI == Game.scenes.activeName &&
        (Game.scenes.active.btnAudio.children[1].text = 'Ошибка')
    },
    stopRecord: function() {
      clearTimeout(Game.audio.timeoutRecord)
      Game.audio.muted = true
      null != Game.audio.mediaRecorder &&
        (Game.audio.mediaRecorder.stop(), (Game.audio.mediaRecorder = null))
      null != Game.audio.stream &&
        (Game.audio.stream.getTracks().forEach(function(awp) {
            awp.stop()
          }),
          (Game.audio.stream = null))
    },
    handleError: function(awq) {
      'level' == Game.scenes.activeName &&
        (Game.scenes.active.btnAudio.children[1].text = 'Ошибка')
      console.log(awq)
    },
  },
  onScrollWindow: function(awr) {
    null != Game.scrollListener &&
      Game.scrollListener.onScrollWheel(awr, Game.scrollListener)
  },
  scrollToLastPoint: function() {
    var aws = document.getElementById('clScrollPage')
    null != aws &&
      ((aws.style.scrollBehavior = 'auto'),
        (aws.scrollTop = Game.lastScroll))
  },
  chatMessage: '',
  chatOffset: 0,
  chatPause: false,
  sendMessage: function() {
    Game.threads.push({
      query: Game.packet.CHAT_SEND,
      text: Game.chatMessage,
      channel: Game.selectedChatChannel,
    })
    Game.chatMessage = ''
    document.getElementById('textChatMessage').value = ''
  },
  clearChat: function() {
    var awt = document.getElementById('contentChat')
    awt && (awt.textContent = '')
    Game.chatPause = false
    Game.chatOffset = 0
  },
  updateChat: function() {
    Game.clearChat()
    Game.loadChat()
    Game.updateChatPrivacy()
  },
  openChat: function(awu) {
    null == awu && (awu = Game.selectedChatChannel)
    var awv =
      '<div class="cl-new-chat"' +
      (Game.selectedChatChannel === awu ?
        ' style="animation: cl-chat 150ms ease-out;"' :
        '') +
      '>\n    <ul class="cl-top-chat">\n        <li' +
      (awu == Game.packet.CHAT_LOCAL ?
        ' class="disabled"' :
        ' onclick="Game.openChat(' + Game.packet.CHAT_LOCAL + ');"') +
      '>Локальный</li>\n        <li' +
      (awu == Game.packet.CHAT_LOCAL_RP ?
        ' class="disabled"' :
        ' onclick="Game.openChat(' + Game.packet.CHAT_LOCAL_RP + ');"') +
      '>Ролевой</li>\n        <li' +
      (awu == Game.packet.CHAT_GLOBAL ?
        ' class="disabled"' :
        ' onclick="Game.openChat(' + Game.packet.CHAT_GLOBAL + ');"') +
      '>Общий</li>\n        <li' +
      (awu == Game.packet.CHAT_TRIBE ?
        ' class="disabled"' :
        ' onclick="Game.openChat(' + Game.packet.CHAT_TRIBE + ');"') +
      '>Племенной</li>\n        <li' +
      (awu == Game.packet.CHAT_PRIVATE ?
        ' class="disabled"' :
        ' onclick="Game.openChat(' + Game.packet.CHAT_PRIVATE + ');"') +
      '>Приватный</li>\n    </ul>\n    <div class="cl-btn-chat" onclick="Game.fullInteractPage(true); this.hidden = true;" style="background: center 10px / 23px no-repeat url(\'' +
      Game.versionCode +
      '/ui/expand.png\'); background-color: #992600; right: 40px;"></div>\n    <div class="cl-btn-chat" onclick="Game.scenes.active.levelUi.showMainUi();" style="background: center 10px / 23px no-repeat url(\'' +
      Game.versionCode +
      '/ui/close.png\'); background-color: #992600;"></div>\n    <div class="cl-text-chat">\n        <textarea placeholder="Введите сообщение" id="textChatMessage"></textarea>\n        <div onclick="Game.sendMessage();" class="cl-btn-chat" style="background: bottom center / 20px no-repeat url(\'' +
      Game.versionCode +
      '/ui/send.png\');"></div>\n        <span id="spanChatPrivacy"></span>\n    </div>\n    <div class="cl-load-bar" id="chatLoadBar">\n        <img src="' +
      Game.versionCode +
      '/ui/load.png">\n    </div>\n    <div class="cl-content-chat" id="contentChat"></div>\n</div>',
      awv =
      (Game.showInteractPage(awv),
        document.getElementById('textChatMessage'))
    awv.value = Game.chatMessage
    awv.addEventListener(
      'keyup',
      function(aww) {
        Game.chatMessage = aww.target.value
      },
      false
    )
    awv.addEventListener(
      'keydown',
      function(awx) {
        'Enter' != awx.key ||
          awx.shiftKey ||
          (awx.preventDefault(), Game.sendMessage())
      },
      false
    )
    Game.selectedChatChannel !== awu ||
      Game.chatMessage ||
      awv.focus()
    Game.selectedChatChannel = awu
    document
      .getElementById('contentChat')
      .addEventListener('scroll', function() {
        this.scrollTop + this.clientHeight > this.scrollHeight - 100 &&
          Game.loadChat()
      })
    Game.updateChat()
  },
  updateChatPrivacy: function() {
    var awy = Game.scenes.active.getOnlinePlayers(),
      awz = 'Ваше сообщение увидят: ',
      axa = document.getElementById('spanChatPrivacy')
    axa &&
      (Game.selectedChatChannel == Game.packet.CHAT_GLOBAL ?
        (awz += '<b>все игроки</b>') :
        Game.selectedChatChannel == Game.packet.CHAT_PRIVATE ?
        (awz += 'взаимные друзья в игре') :
        Game.selectedChatChannel == Game.packet.CHAT_TRIBE ?
        (awz += '<b>все соплеменники</b>') :
        0 < awy.length ?
        (awz += awy.join(', ')) :
        (awz = 'Ваше сообщение никто не увидит'),
        (axa.innerHTML = awz))
  },
  loadChat: function() {
    var axb,
      axc = document.getElementById('contentChat'),
      axd = document.getElementById('chatLoadBar') !Game.chatPause &&
      axc &&
      ((Game.chatPause = true),
        (axd.hidden = false),
        (axc.className = 'cl-content-chat load'),
        Game.selectedChatChannel == Game.packet.CHAT_GLOBAL ||
        Game.selectedChatChannel == Game.packet.CHAT_TRIBE ||
        Game.selectedChatChannel == Game.packet.CHAT_NOTE ?
        Game.sendApi(
          'get_chat?offset=' +
          Game.chatOffset +
          '&channel_id=' +
          Game.selectedChatChannel,
          function(axe) {
            axd.hidden = true
            axc.className = 'cl-content-chat'
            axe &&
              0 < axe.rows.length &&
              ((Game.chatPause = false),
                Game.addMessage(axe.rows, true))
          }
        ) :
        ((axb = Game.getChat()),
          (axc.className = 'cl-content-chat'),
          (axd.hidden = true),
          Game.addMessage(axb, true)))
  },
  getChat: function() {
    var axf = Game.myStorage.get('chat') || '[]'
    try {
      axf = JSON.parse(axf)
    } catch (axg) {
      axf = []
    }
    return axf
  },
  saveMessage: function(axh) {
    for (
      var axi,
        axj = 0,
        axk = {},
        axl = Game.getChat(),
        axm = 0; axm < axh.length; axm++
    ) {
      axl.unshift(axh[axm])
    }
    for (; axj < axl.length;) {
      axk[(axi = axl[axj]).channel_id] =
        axk[axi.channel_id] || 0
      axk[axi.channel_id]++
      50 < axk[axi.channel_id] ?
        axl.splice(axj, 1) :
        axj++
    }
    Game.myStorage.set('chat', JSON.stringify(axl))
  },
  addMessage: function(axn, axo) {
    for (
      var axp,
        axq,
        axr,
        axs,
        axt = '',
        axu = document.getElementById('contentChat'),
        axv = 0; axv < axn.length; axv++
    ) {
      if (
        ((axs = (axq = axn[axv]).channel_id),
          axo ||
          (axs != Game.packet.CHAT_LOCAL &&
            axs != Game.packet.CHAT_LOCAL_RP &&
            axs != Game.packet.CHAT_PRIVATE) ||
          Game.saveMessage(axn),
          axu && Game.selectedChatChannel == axs)
      ) {
        for (
          var axw = Game.utils.EscapeHtml(axq.text),
            axx = 0; axx < Game.emotes.length; axx++
        ) {
          axw = Game.utils.ReplaceAll(
            axw,
            Game.emotes[axx],
            '<img class="cl-emote" src="' +
            Game.versionCode +
            '/ui/emotes/' +
            Game.emotes[axx] +
            '.png">'
          )
        }
        0 < axq.player_id ?
          ((axs = Game.utils.GetUiCat(axq.months_lived)),
            Game.cachedChatSprites[axq.first_color + '_' + axs] ?
            (axp =
              Game.cachedChatSprites[
                axq.first_color + '_' + axs
              ]) :
            (((axr = PIXI.Sprite.from(
                Game.resources.ui.textures[axs]
              )).tint = axq.first_color),
              (axp =
                Game.app.renderer.plugins.extract.base64(axr)),
              axr.destroy(),
              (Game.cachedChatSprites[
                axq.first_color + '_' + axs
              ] = axp)),
            (axr = PIXI.utils.hex2string(
              Game.strings.tribe_colors[axq.tribe_id]
            ))) :
          (axp = Game.versionCode + '/ui/uiFlagIcon.png')
        axs =
          '<div class="cl-msg">\n    <div class="cl-chat-ava" style="background: ' +
          (axq.second_color ?
            PIXI.utils.hex2string(axq.second_color) :
            '#6F1B00') +
          ';">\n        <img src="' +
          axp +
          '">\n    </div>\n    <p>' +
          (0 < axq.player_id ?
            '<font onclick="Game.openPlayerInfo(' +
            axq.player_id +
            ');" style="color: ' +
            axr +
            '; font-weight: 500;">' +
            axq.name +
            ' [' +
            axq.player_id +
            ']</font>: ' :
            '') +
          axw +
          '</p>\n    <span>' +
          Game.fromNow(
            axq.created_at ? new Date(axq.created_at) : new Date()
          ) +
          '</span>\n</div>'
        axo
          ?
          (axt += axs) :
          (axt = axs + axt)
        Game.chatOffset++
      }
    }
    axt &&
      (axo ?
        (axu.innerHTML += axt) :
        (axu.innerHTML = axt + axu.innerHTML))
  },
  fullInteractPage: function(axy) {
    Game.clInteractPageContent.className = axy ? 'full' : ''
  },
  showInteractPage: function(axz) {
    var aya = document.getElementById('clScrollPage')
    null != aya && (Game.lastScroll = aya.scrollTop)
    Game.clInteractPageContent.innerHTML = axz
    Game.clInteractPageContent.hidden = false
  },
  hideInteractPage: function() {
    Game.clInteractPageContent.innerHTML = ''
    Game.clInteractPageContent.hidden = true
    Game.fullInteractPage(false)
  },
  showAdG: function() {},
  hideAdG: function() {},
  audioServer: function(ayb) {
    var ayc
    try {
      Game.audio.currentAudio = ayc = new Audio(ayb)
      ayc.volume = parseFloat(Game.setMaxVolumeSpeak)
    } catch (ayd) {
      return
    }
    ayc.play()
  },
  eventGetToken: function(aye) {
    aye = aye.data
    if ('string' == typeof aye) {
      try {
        aye = JSON.parse(aye)
      } catch (ayf) {}
    }
    if (
      (null != aye.cl_up_loaded1 &&
        'cl_up_loaded1' == aye.cl_up_loaded1 &&
        'login' == Game.scenes.activeName &&
        (Game.isCordova ?
          (Game.goToScene('tribe'),
            null != Game.inAppBrowserRef && Game.inAppBrowserRef.close()) :
          '' != Game.clInteractPageContent.innerHTML &&
          Game.scenes.active.onLoadNews()),
        null != aye.token)
    ) {
      try {
        localStorage.setItem('gameToken1', aye.token)
      } catch (ayg) {}
      Game.token = aye.token
      Game.goToScene('nodata')
      null != Game.inAppBrowserRef && Game.inAppBrowserRef.close()
    }
  },
  calcBackground: function(ayh, ayi, ayj) {
    var ayk,
      ayl,
      aym = 0,
      ayn = 0,
      ayo = Game.app.screen.width,
      ayp = Game.app.screen.height,
      ayq = ayo,
      ayr = ayp
    if (
      ((ayj = ayj || 1), ayh.constructor == PIXI.Container)
    ) {
      for (
        var ays = 0; ays < ayh.children.length; ays++
      ) {
        ;
        (ayk = ayh.children[ays]).constructor !=
          PIXI.Container &&
          Game.calcBackground(ayk, ayi, ayj)
      }
    } else {
      ;
      (ayl = ayh.width / ayh.height) <
      ayo / ayp ?
        (ayr = ayo / ayl) :
        (ayq = ayp * ayl)
      ayr *= ayj
      ayh.width = ayq *= ayj
      ayh.height = ayr 'undefined' != typeof ayh.x &&
        ('undefined' != typeof ayh.anchor &&
          (null != ayi ?
            (ayh.anchor.set(ayi),
              (aym = ayo * ayi),
              (ayn = ayp * ayi)) :
            ayh.anchor.set(0)),
          ayh.position.set(
            aym + (ayo - ayq) / 2,
            ayn + (ayp - ayr) / 2
          ))
    }
  },
  calcMaxScale: function(ayt, ayu) {
    var ayv = Game.app.screen.width / ayt.texture.width,
      ayt = Game.app.screen.height / ayt.texture.height
    return (
      (ayu = ayu || 0.5),
      Math.min(
        ayv < ayu ? ayv : ayu,
        ayt < ayu ? ayt : ayu
      )
    )
  },
  resizeToWindow: function() {
    var ayw = window.innerWidth,
      ayx = window.innerHeight
    Game.app.renderer.resize(ayw, ayx)
    Game.scenes.active.resize(ayw, ayx)
  },
  createPair: function(ayy, ayz, aza) {
    var azb,
      ayy = PIXI.Sprite.from(ayy)
    return (
      (ayy.parentGroup = PIXI.lights.diffuseGroup),
      Game.isWebGLSupported &&
      (((azb = PIXI.Sprite.from('ui/none_n.png')).width =
          ayy.width),
        (azb.height = ayy.height),
        (azb.parentGroup = PIXI.lights.normalGroup)),
      null != aza && aza ?
      Game.isWebGLSupported ? [ayy, azb] : [ayy] :
      ((aza = new PIXI.Container()).addChild(ayy),
        Game.isWebGLSupported && aza.addChild(azb),
        aza)
    )
  },
  createButton: function(azc, azd, aze, azf) {
    var azg = new PIXI.Container()
    return (
      null != azc &&
      null != azd &&
      ((azc = new PIXI.Sprite(azc[azd])).anchor.set(0.5),
        null != (azf = 'button.png' == azd ? 0.69 : azf) ?
        azc.scale.set(azf) :
        azc.scale.set(0.5),
        azg.addChild(azc),
        (null != aze && !aze) ||
        (azg.on(
            'pointerout',
            function() {
              this.tint = 16777215
            },
            azc
          ),
          azg.on(
            'pointerover',
            function() {
              this.tint = 12632256
            },
            azc
          ))),
      (azg.interactive = true),
      (azg.buttonMode = true),
      azg.on('pointerup', function() {
        var azh = PIXI.sound.find('sounds/click.mp3')
        azh.volume = Game.setMaxVolumeSounds
        azh.play()
      }),
      azg
    )
  },
  createTextButton: function(azi, azj) {
    var azk,
      azl,
      azm = Game.createButton(),
      azn = new PIXI.Sprite(PIXI.Texture.WHITE),
      azi = new PIXI.Text(azi, azj)
    return (
      azi.anchor.set(0.5),
      (azk = azi.width),
      (azl = Math.max(azi.height, 48)),
      (azm.hitArea = new PIXI.Rectangle(
        0.5 * -azk,
        0.5 * -azl,
        azk,
        azl
      )),
      null != azj &&
      null != azj.fill &&
      (azn.tint = azj.fill),
      (azn.height = 1),
      (azn.width = azi.width),
      azn.anchor.set(0.5, 0),
      azn.position.set(0, 0.5 * azi.height),
      azm.addChild(azn),
      azm.addChild(azi),
      azm
    )
  },
  nextMusic: function(azo) {
    null != Game.currentMusic && Game.currentMusic.isPlaying ?
      0 < Game.currentMusic.volume - 0.002 * azo ?
      (Game.currentMusic.volume -= 0.002 * azo) :
      Game.currentMusic.stop() :
      (null != Game.nextMusicString &&
        (null != Game.currentMusic &&
          (Game.currentMusic.destroy(), (Game.currentMusic = null)),
          Game.isMusicLoad ||
          ((Game.isMusicLoad = true),
            PIXI.sound.Sound.from({
              url: Game.versionCode + '/music/' + Game.nextMusicString,
              preload: true,
              loaded: function(azp, azq) {
                azp ||
                  ((Game.isMusicLoad = false),
                    ((Game.currentMusic = azq).volume =
                      Game.setMaxVolumeMusic),
                    azq.play())
              },
            }),
            (Game.nextMusicString = null))),
        Game.app.ticker.remove(Game.nextMusic, Game))
  },
  playMusic: function(azr, azs) {
    var azt,
      azu = []
    if (0 == Object.keys(Game.currentPlaylist).length) {
      for (var azv in Game.mp3List) {
        var azw = Game.mp3List[azv]
        null != azw.type &&
          (Game.currentPlaylist[azv] = azw.type)
      }
    }
    for (azv in Game.currentPlaylist)
      Game.currentPlaylist[azv] == azr &&
      azu.push(azv)
    0 == azu.length ?
      ((Game.currentPlaylist = {}), Game.playMusic(azr, azs)) :
      ((azt =
          azu[Game.utils.RandomInt(0, azu.length - 1)]),
        delete Game.currentPlaylist[azt],
        null == Game.currentMusic ||
        null == azs ||
        azs ||
        (Game.currentMusic.volume = 0),
        null == Game.nextMusicString &&
        Game.app.ticker.add(Game.nextMusic, Game),
        (Game.nextMusicString = azt),
        (Game.currentMusicType = azr))
  },
  stopMusic: function() {
    Game.nextMusicString = null
    Game.app.ticker.add(Game.nextMusic, Game)
  },
  resetLevel: function(azx) {
    for (
      var azy, azz = {}, baa = [], bab = 0; bab < azx.textures.length; bab++
    ) {
      if (
        ((azy = 'levels/' + (txt = azx.textures[bab].id)),
          baa.push(
            azy + '.png',
            Game.levelPath + azy + '.png'
          ),
          baa.push(
            azy + '_m.png',
            Game.levelPath + azy + '_m.png'
          ),
          null != Game.supportEntityMask[txt])
      ) {
        for (
          var bac = 0; bac < Game.supportEntityMask[txt].length; bac++
        ) {
          baa.push(
            azy + '_' + bac + '.png',
            Game.levelPath + azy + '_' + bac + '.png'
          )
        }
      }
    }
    for (bab = 0; bab < baa.length; bab += 2) {
      azz[baa[bab]] = baa[bab + 1]
    }
    azx.resources = azz
    Game.sceneConfig = {}
    Game.sceneConfig.nextScene = 'level'
    Game.sceneConfig.list = baa
    Game.sceneConfig.levelData = azx 'level' == Game.scenes.activeName &&
      ((Game.sceneConfig.color = Game.scenes.active.ambientLight.color),
        (Game.sceneConfig.brightness =
          Game.scenes.active.ambientLight.brightness))
    Game.goToScene('load')
    Game.safeCloseClicks = 0
  },
  getCustomString: function() {
    var bad = {
      catlife: 'catlife'
    }
    var bae = bad
    return (
      Game.isCordova && (bae.device = device.uuid),
      (bae =
        'undefined' != typeof window.CryptoJS ?
        CryptoJS.AES.encrypt(
          JSON.stringify(bae),
          'bc442406ffef0308cdd444da547c0e17'
        ).toString() :
        '')
    )
  },
  connectToServer: function(baf, bah) {
    var bai = Game.scenes.active,
      baj = Game.myStorage.get('tribeId'),
      bak = {
        version: Game.version,
        token: Game.token,
        localSettings_setMuteNoFriend: Game.setMuteNoFriend,
        localSettings_setMaxVolumeSpeak: Game.setMaxVolumeSpeak,
      }
    if (
      ((bak.customString = Game.getCustomString()),
        'menu' == Game.scenes.activeName)
    ) {
      bai.textVersion.text = 'Подключение к серверу...'
      bai.ui.visible = false
    } else {
      if ('level' != Game.scenes.activeName) {
        return (
          Game.goToScene('menu'),
          void Game.connectToServer(baf, bah)
        )
      }
    }
    null != baf && (bak.playername = baf)
    null != bah && (bak.colors = bah)
    null != baj && (bak.tribeId = baj);
    (bai = Game.server =
      io(Game.serverUrl, {
        reconnection: false,
        query: bak,
      })).on('packet', function(bal) {
      try {
        bal = JSON.parse(bal)
      } catch (bam) {
        return
      }
      switch (bal.query) {
        case Game.packet.HELLO_ID:
          if (null != bal.player_id) {
            Game.playerid = bal.player_id
            Game.myStorage.set('playerid', Game.playerid)
            try {
              Game.browserSubscribe()
            } catch (ban) {}
          }
          break
        case Game.packet.UPDATE_LEVEL:
          Game.resetLevel(bal)
          break
        case Game.packet.CLOSE_REASON:
          Game.closeReason = bal.reasonId
          break
        default:
          Game.packets.push(bal)
      }
    })
    bai.on('audio', function(bao) {
      Game.audioServer(bao)
    })
    bai.on('error', function() {
      Game.closeServer()
    })
    bai.on('disconnect', function() {
      Game.closeServer()
    })
    bai.on('connect_error', function() {
      Game.closeServer()
    })
  },
  changeServer: function() {
    'https://catlifeonline.com:2087/' == Game.serverUrl ?
      (Game.serverUrl = 'https://worldcats.ru:2087/') :
      'https://worldcats.ru:2087/' == Game.serverUrl &&
      (Game.serverUrl = 'https://catlifeonline.com:2087/')
  },
  safeServerClose: function() {
    null == Game.nextSceneName &&
      (Game.nextSceneName = Game.isCordova ? 'review' : 'menu')
    2 < Game.safeCloseClicks ?
      ((Game.safeCloseClicks = 0), Game.closeServer()) :
      (Game.safeCloseClicks++, Game.send({
        query: 'close'
      }))
  },
  closeServer: function() {
    var bap = Game.scenes.active
    if (
      ((Game.server = null),
        (Game.packets = []),
        (Game.threads = []),
        'menu' == Game.scenes.activeName)
    ) {
      if (null != Game.closeReason) {
        switch (Game.closeReason) {
          case Game.packet.REASON_AUTH:
            return (
              (bap.textVersion.text = 'Ошибка авторизации.'),
              void setTimeout(function() {
                Game.logout()
                Game.goToScene('login')
              }, 5000)
            )
          case Game.packet.REASON_VERSION:
            Game.isCordova ?
              ((bap.textVersion.text =
                  'Устаревшая версия. Обновите приложение, установив новую версию.'),
                cordova.plugins.InAppUpdate.updateImmediate(
                  function() {},
                  function() {}
                )) :
              ((bap.textVersion.text =
                  'Устаревшая версия. Попробуйте обновить страницу или подключиться позже.'),
                setTimeout(function() {
                  Game.updateGame()
                }, 5000))
            break
          case Game.packet.REASON_EMAIL:
            ;
            (bap.textVersion.text =
              'Подтвердите e-mail, чтобы активировать ваш аккаунт.'),
            setTimeout(function() {
              Game.openWeb(
                'https://myaccount.catlifeonline.com/signin?catlife_token=' +
                Game.token
              )
            }, 5000)
            break
          case Game.packet.REASON_BAN:
            bap.textVersion.text =
              'Вы были заблокированы за нарушение правил сообщества.'
            break
          default:
            bap.textVersion.text =
              'Не удалось подключиться к серверу. Проверьте настройки аккаунта.'
        }
      } else {
        bap.textVersion.text =
          'Ошибка соединения. Попробуйте подключиться позже.'
        Game.isCordova &&
          setTimeout(function() {
            Game.openWeb(Game.serverHost)
          }, 5000)
      }
      Game.closeReason = null
      setTimeout(function() {
        Game.scenes.active.start()
      }, 5000)
    } else {
      'level' == Game.scenes.activeName &&
        (null != Game.nextSceneName ?
          (Game.goToScene(Game.nextSceneName), (Game.nextSceneName = null)) :
          (Game.scenes.active.levelUi.addNotice(
              'Повторное подключение к серверу...'
            ),
            setTimeout(function() {
              Game.connectToServer()
            }, 5000)))
    }
  },
  logout: function() {
    try {
      localStorage.removeItem('gameToken1')
    } catch (baq) {}
    Game.myStorage.remove('chat0')
    Game.myStorage.remove('chat1')
    Game.myStorage.remove('chat2')
    Game.myStorage.remove('chat3')
    Game.myStorage.remove('chat4')
    Game.myStorage.remove('chat5')
    Game.myStorage.remove('achievements')
    Game.myStorage.remove('playerid')
    Game.myStorage.remove('playername')
    Game.myStorage.remove('colors')
    Game.myStorage.remove('tribeId')
    Game.token = null
    Game.username = null
    Game.firebaseInitialized &&
      (Game.isCordova ?
        cordova.plugins.firebase.messaging :
        firebase.messaging()
      ).deleteToken()
    Game.achievements = []
    Game.openWeb('https://forums.worldcats.ru/logout')
  },
  knockPlayer: function(bas, bat, bau) {
    null != bau ?
      1 < bau.length && bau.length < 256 ?
      Game.send({
        query: 'textSuggestion',
        playerId: bat,
        text: bau,
      }) &&
      alert(
        'Сообщение будет рассмотрено в ближайшее время. Спасибо за ожидание.',
        null,
        'Отправлено',
        'Ок'
      ) :
      alert(
        'Недостаточно информации. Сообщение не отправлено.',
        null,
        'Требуется основание',
        'Ок'
      ) :
      Game.isCordova ?
      prompt(
        'Опишите проблему',
        function(bav) {
          1 == bav.buttonIndex &&
            Game.knockPlayer(bas, bat, bav.input1)
        },
        bas,
        ['Ок', 'Отмена']
      ) :
      null != (bau = prompt(bas, '')) &&
      Game.knockPlayer(bas, bat, bau)
  },
  createScrollContainer: function(baw, bax) {
    var bay = Game.resources.ui.textures,
      baz = PIXI.Sprite.from(bay['sliderGame.png']),
      bay = new PIXI.Container(),
      bba = new PIXI.Container(),
      bbb = new PIXI.Sprite(PIXI.Texture.WHITE)
    return (
      (bbb.width = baw),
      (bbb.height = bax),
      (bay.mask = bbb),
      (bay.interactive = true),
      (bay.onDragStart = function(bbc) {
        this._startDragY = bbc.data.global.y - bba.y
        this.on('pointermove', this.onDragMove, this)
      }),
      (bay.onDragEnd = function() {
        this.off('pointermove', this.onDragMove, this)
      }),
      (bay.onDragMove = function(bbd) {
        var bbe = bbb.height - bba.height
        bba.position.set(
          0,
          Math.min(
            0,
            Math.max(bbd.data.global.y - this._startDragY, bbe)
          )
        )
        baz.position.set(
          bbb.width,
          (bbb.height * bba.y) / bbe
        )
      }),
      (bay.onScrollWheel = function(bbf) {
        var bbg = bbb.height - bba.height,
          bbf = bba.y - 0.2 * bbf.deltaY
        bba.position.set(0, Math.min(0, Math.max(bbf, bbg)))
        baz.position.set(
          bbb.width,
          (bbb.height * bba.y) / bbg
        )
      }),
      bay.on('pointerdown', bay.onDragStart),
      bay.on('pointerup', bay.onDragEnd),
      bay.on('pointerupoutside', bay.onDragEnd),
      bay.on('pointerover', function() {
        Game.scrollListener = this
      }),
      bay.on('pointerout', function() {
        Game.scrollListener = null
      }),
      bay.addChild(bba),
      bay.addChild(bbb),
      bay.addChild(baz),
      baz.anchor.set(0.5),
      baz.position.set(baw, 0),
      (baz.tint = 8388608),
      (baz.width = 7),
      (baz.height = 49),
      bay
    )
  },
  createScrollText: function(bbh, bbi, bbj, bbk) {
    var bbl = Game.createScrollContainer(bbj, bbk)
    return (
      (bbh = bbh || ''),
      (bbj = bbj || 100),
      (bbk = bbk || 100),
      ((bbi = bbi || {}).wordWrap = true),
      (bbi.wordWrapWidth = bbj),
      (bbk = new PIXI.Text(bbh, bbi)),
      bbl.removeChildAt(0),
      bbl.addChildAt(bbk, 0),
      bbl
    )
  },
  sendApi: function(bbm, bbn) {
    var bbo = new XMLHttpRequest()
    bbo.open('GET', Game.serverUrl + 'api/' + bbm, true)
    Game.token &&
      bbo.setRequestHeader('Authorization', 'Bearer ' + Game.token)
    bbo.onload = bbo.onerror = function() {
      var bbp
      if (200 == this.status) {
        try {
          bbp = JSON.parse(this.responseText)
        } catch (bbq) {
          bbp = null
        }
      }
      bbn(null != bbp ? bbp : null)
    }
    try {
      bbo.send()
    } catch (bbr) {}
    return bbo
  },
  send: function(bbs) {
    if (null == Game.server || !Game.server.connected) {
      return false
    }
    try {
      Game.server.emit('packet', JSON.stringify(bbs))
    } catch (bbt) {
      return false
    }
    return true
  },
  openPlayerInfo: function(bbu) {
    var bbv,
      bbw,
      bbx = 0,
      bby = ''
    Game.openClPage(
      'Информация об игроке',
      Game.serverUrl + 'api/get_player_info?id=' + bbu,
      function(bbz, bca) {
        try {
          bca = JSON.parse(bca)
        } catch (bcb) {
          return 'Произошла ошибка при загрузке контента.'
        }
        if (0 < bca.content.length) {
          for (var bcc in ((bbv = bca.content[0]),
              (bby =
                (bby =
                  (bby =
                    bby +
                    '<h3>Информация</h3>' +
                    '<div class="cl-bl cl-text">') +
                  ('<b>Имя:</b> ' +
                    bbv.name +
                    ' [' +
                    bbv.player_id +
                    ']')) +
                ('<br><b>Должность:</b> ' +
                  Game.strings.ru.status[bbv.status])),
              (bbw = PIXI.utils.hex2string(bbv.tribeColor)),
              (bby +=
                '<br><b>Запах:</b> <span style="background:' +
                bbw +
                ';color:' +
                bbw +
                ';">_____</span>'),
              'level' == Game.scenes.activeName &&
              (bby +=
                '<br><b>Возраст:</b> ' +
                Game.utils.LunCalc(
                  bbv.birthday,
                  Game.scenes.active.time
                ) +
                ' лун(ы)'),
              (bby =
                (bby =
                  (bby +=
                    '<br><b>Выбранный класс:</b> ' +
                    Game.strings.ru.selectedClass[bbv.selectedClass]) +
                  ('<br><b>Аккаунт на форуме:</b> ' +
                    bbv.username +
                    ' (<a target="_blank" href="https://forums.worldcats.ru/u/' +
                    bbv.username +
                    '/private">Переписки</a>)') +
                  '</div>') +
                '<h3>Навыки</h3>' +
                '<div class="cl-bl cl-text">'),
              bbv.skills))
            0 < bbx && (bby += '<br>'),
            (bby +=
              '<b>' +
              Game.strings.ru.skills[bcc] +
              ':</b> ' +
              bbv.skills[bcc]),
            bbx++
          bby += '</div>'
          bbz.innerHTML = bby
        } else {
          bbz.textContent = 'Информация об игроке не найдена.'
        }
      }
    )
  },
  openNote: function() {
    var bcd,
      bce = ''
    Game.openClPage('Заметки племени', '', function(bcf) {
      bcf.textContent = 'Загрузка...'
      Game.sendApi(
        'get_chat?offset=0&channel_id=' + Game.packet.CHAT_NOTE,
        function(bcg) {
          if (bcg && 0 < bcg.rows.length) {
            for (
              var bch = bcg.rows.length - 1; 0 <= bch; bch--
            ) {
              ;
              (bcd = bcg.rows[bch]).pinned ||
                ((bce += '<h3'),
                  0 < bcd.player_id &&
                  (bce +=
                    ' onclick="Game.openPlayerInfo(' +
                    bcd.player_id +
                    ');"'),
                  (bce +=
                    '>' +
                    Game.fromNow(bcd.created_at) +
                    ' ' +
                    bcd.name +
                    '</h3>'))
              bce += '<div tabindex="0" class="cl-bl'
              bce =
                (bce = bcd.is_pinned ?
                  (bce +=
                    ' spoiler" onclick="this.className=\'cl-bl spoiler active\';">') +
                  bcd.text :
                  (bce += '">') +
                  '<div class="cl-text">' +
                  Game.utils.EscapeHtml(bcd.text) +
                  '</div>') +
                '<div class="cl-text"><span style="font-size:12px;color:#bdbdbd;">ID: ' +
                bcd.id +
                '</span></div></div>'
            }
          } else {
            bce += 'Пусто.'
          }
          bcf.innerHTML = bce
        }
      )
    })
  },
  openFull: function() {
    Game.clGame.requestFullScreen ?
      Game.clGame.requestFullScreen() :
      Game.clGame.mozRequestFullScreen ?
      Game.clGame.mozRequestFullScreen() :
      Game.clGame.webkitRequestFullScreen &&
      Game.clGame.webkitRequestFullScreen()
    Game.resizeToWindow()
    setTimeout(function() {
      Game.resizeToWindow()
    }, 500)
  },
  updateGame: function() {
    var bci = Game.myStorage.get('reloadpage')
    null != bci && 'update' == bci ?
      (Game.myStorage.set('reloadpage', ''),
        alert(
          'Не удалось установить обновление. Попробуйте очистить кэш в настройках браузера.'
        )) :
      !Game.isCordova &&
      confirm(
        'Установить новое обновление? Потребуется обновить страницу.'
      ) &&
      (Game.myStorage.set('reloadpage', 'update'), location.reload())
  },
  getCountOnlinePlayers: function(bcj) {
    Game.sendApi('get_stat_server', function(bck) {
      var bcl 'login' == Game.scenes.activeName &&
        (((bcl = Game.scenes.active).textInfo.visible = true),
          null != bck ?
          null != bcj &&
          bcj &&
          (null != bck.versionGame &&
            Game.version != bck.versionGame &&
            Game.updateGame(),
            null != bck.version) &&
          Game.version + Game.versionPatch != bck.version ?
          (bcl.textInfo.text = 'Доступно новое обновление') :
          null != bck.content &&
          null != bck.content.countOnlinePlayers &&
          ((bcl.textInfo.text =
              'Игроков онлайн: ' + bck.content.countOnlinePlayers),
            (bcl.textInfo.visible =
              0 < bck.content.countOnlinePlayers)) :
          (bcl.textInfo.text = 'Ошибка подключения'))
    })
  },
  openClPage: function(bcm, bcn, bco, bcp) {
    var bcq, bcr, bcs, bct
    Game.closeClPage()
    bcp =
      null != bcp ?
      'none' != bcp && '' != bcp ?
      ' ' + bcp :
      '' :
      ' dark';
    (bcr = document.createElement('div')).id =
      'page' + Game.pages.length
    bcr.className = 'cl-chat'
    Game.clGame.appendChild(bcr)
    Game.pages.push(bcr.id);
    (bct = document.createElement('div')).className = 'cl-chat-header'
    bct.textContent = bcm
    bcr.appendChild(bct);
    (bcm = document.createElement('img')).src =
      Game.versionCode + '/ui/arrowLeft.png'
    bcm.className = 'cl-chat-hide'
    bcm.addEventListener(
      'click',
      function() {
        var bcu = PIXI.sound.find('sounds/click.mp3')
        bcu.volume = Game.setMaxVolumeSounds
        bcu.play()
        'menu' == Game.scenes.activeName ?
          ((Game.scenes.active.ui.visible = true), Game.showAdG()) :
          'level' == Game.scenes.activeName &&
          Game.scenes.active.levelUi.showMainUi()
        Game.closeClPage()
      },
      false
    )
    bcr.appendChild(bcm);
    (bcs = document.createElement('div')).className =
      'cl-info-content' + bcp
    bcr.appendChild(bcs)
    'menu' == Game.scenes.activeName ?
      ((Game.scenes.active.ui.visible = false), Game.hideAdG()) :
      'level' == Game.scenes.activeName &&
      Game.scenes.active.levelUi.hideMainUi()
    null != bcn && '' != bcn ?
      (((bct = document.createElement('span')).textContent =
          'Пожалуйста, подождите...'),
        bcs.appendChild(bct),
        (bcq = new XMLHttpRequest()).open('GET', bcn, true),
        bcq.addEventListener(
          'load',
          function() {
            200 == bcq.status ?
              null != bco ?
              ((bcs.textContent = ''),
                bco(bcs, bcq.responseText)) :
              (bcs.innerHTML = bcq.responseText) :
              (bcs.textContent =
                'Произошла ошибка при загрузке контента.')
          },
          false
        ),
        bcq.addEventListener(
          'error',
          function() {
            bcs.textContent =
              'This content is not available in your country.'
          },
          false
        ),
        bcq.send()) :
      null != bco && bco(bcs, '')
  },
  closeClPage: function() {
    for (
      var bcv, bcw = Game.pages.length - 1; 0 <= bcw; bcw--
    ) {
      null != (bcv = document.getElementById(Game.pages[bcw])) &&
        bcv.parentNode.removeChild(bcv)
      Game.pages.splice(bcw, 1)
    }
  },
  updateProfile: function(bcx) {
    null != bcx.user_name &&
      ((Game.username = bcx.user_name),
        Game.myStorage.set('username', Game.username))
    null != bcx.name &&
      ((Game.playername = bcx.name),
        Game.myStorage.set('playername', Game.playername))
    null != bcx.colors &&
      ((Game.colors = bcx.colors),
        Game.myStorage.set('colors', JSON.stringify(Game.colors)))
    null != bcx.tribe &&
      Game.myStorage.set('tribeId', bcx.tribe.id)
    Game.setSub =
      null != bcx.player_groups &&
      -1 < bcx.player_groups.indexOf(Game.packet.GROUP_SUBSCRIBER) ?
      1 :
      0
    Game.myStorage.set('sub_id', Game.setSub)
  },
  loginGooglePlay: function(bcy) {
    GooglePlayGames.login().then(
      function() {
        Game.googlePlayAuthorized = true
      },
      function() {
        Game.googlePlayAuthorized = false
        bcy ||
          alert(
            'Не удалось подключиться к Google Play Играм.',
            null,
            'Произошла ошибка',
            'Ок'
          )
      }
    )
  },
  updateRep: function(bcz) {
    var bda = {
      score: bcz,
      id: 'CgkI3Yzqn8gbEAIQAQ',
    }
    Game.googlePlayAuthorized && GooglePlayGames.updatePlayerScore(bda)
  },
  updateAchiev: function(bdb) {
    var bdc, bdd, bde
    if (0 < Game.achievements.length) {
      for (var bdf = 0; bdf < bdb.length; bdf++) {
        if (
          ((bdc = bdb[bdf]),
            Game.achievements.indexOf(bdc) < 0)
        ) {
          bde = bdc
          break
        }
      }
    }
    if (Game.achievements.length != bdb.length) {
      if (Game.googlePlayAuthorized) {
        for (bdf = 0; bdf < bdb.length; bdf++) {
          switch ((bdc = bdb[bdf])) {
            case Game.packet.ACHIEVEMENT_SKILL_HIT_10:
              bdd = 'CgkI3Yzqn8gbEAIQBg'
              break
            case Game.packet.ACHIEVEMENT_SKILL_HIT_50:
              bdd = 'CgkI3Yzqn8gbEAIQBw'
              break
            case Game.packet.ACHIEVEMENT_SKILL_HIT_200:
              bdd = 'CgkI3Yzqn8gbEAIQCA'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_10:
              bdd = 'CgkI3Yzqn8gbEAIQEg'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_50:
              bdd = 'CgkI3Yzqn8gbEAIQEw'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_200:
              bdd = 'CgkI3Yzqn8gbEAIQFA'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_10:
              bdd = 'CgkI3Yzqn8gbEAIQDw'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_50:
              bdd = 'CgkI3Yzqn8gbEAIQEA'
              break
            case Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_200:
              bdd = 'CgkI3Yzqn8gbEAIQEQ'
              break
            case Game.packet.ACHIEVEMENT_SKILL_REP_25:
              bdd = 'CgkI3Yzqn8gbEAIQDA'
              break
            case Game.packet.ACHIEVEMENT_SKILL_REP_50:
              bdd = 'CgkI3Yzqn8gbEAIQDQ'
              break
            case Game.packet.ACHIEVEMENT_SKILL_REP_200:
              bdd = 'CgkI3Yzqn8gbEAIQDg'
              break
            case Game.packet.ACHIEVEMENT_SKILL_SWIM_10:
              bdd = 'CgkI3Yzqn8gbEAIQCQ'
              break
            case Game.packet.ACHIEVEMENT_SKILL_SWIM_50:
              bdd = 'CgkI3Yzqn8gbEAIQCg'
              break
            case Game.packet.ACHIEVEMENT_SKILL_SWIM_200:
              bdd = 'CgkI3Yzqn8gbEAIQCw'
              break
            case Game.packet.ACHIEVEMENT_SKILL_DIG_10:
              bdd = 'CgkI3Yzqn8gbEAIQAg'
              break
            case Game.packet.ACHIEVEMENT_SKILL_DIG_50:
              bdd = 'CgkI3Yzqn8gbEAIQBA'
              break
            case Game.packet.ACHIEVEMENT_SKILL_DIG_200:
              bdd = 'CgkI3Yzqn8gbEAIQBQ'
              break
            default:
              bdd = null
          }
          null != bdd &&
            GooglePlayGames.unlockAchievement({
              id: bdd
            })
        }
      }
      Game.myStorage.set('achievements', JSON.stringify(bdb))
    }
    return (Game.achievements = bdb), bde
  },
  openLeader: function() {
    var bdg = {
      id: 'CgkI3Yzqn8gbEAIQAQ'
    }
    Game.googlePlayAuthorized ?
      GooglePlayGames.showLeaderboard(bdg) :
      Game.isCordova && Game.loginGooglePlay()
  },
  openAchiev: function() {
    var bdh,
      bdi = ''
    if (Game.isCordova) {
      Game.googlePlayAuthorized ?
        GooglePlayGames.showAchievements() :
        Game.loginGooglePlay()
    } else {
      if (0 < Game.achievements.length) {
        bdi += '<table class="cl-table-achiev">'
        for (
          var bdj = 0; bdj < Game.achievements.length; bdj++
        ) {
          bdh = Game.achievements[bdj]
          bdi +=
            '<tr class="cl-bl"><td style="width: 90px;"><img src="' +
            Game.versionCode +
            '/ui/achievements/id' +
            bdh +
            '.png" style="height: 80px;"></td><td>' +
            Game.strings.ru.achievements[bdh] +
            '</td></tr>'
        }
        bdi += '</table>'
      } else {
        bdi += 'Здесь пока что пусто.'
      }
      Game.openClPage('Мои достижения', '', function(bdk) {
        bdk.innerHTML = bdi
      })
    }
  },
  fromNow: function(bdl) {
    var bdm, bdn
    return (
      (bdl = new Date(bdl)),
      (bdm = (bdn = new Date()).getTime() - bdl.getTime()),
      bdl.getDate() == bdn.getDate() &&
      bdl.getMonth() == bdn.getMonth() &&
      bdl.getFullYear() == bdn.getFullYear() ?
      (1 == bdl.getHours().toString().length ? '0' : '') +
      bdl.getHours() +
      ':' +
      (1 == bdl.getMinutes().toString().length ? '0' : '') +
      bdl.getMinutes() :
      bdl.getFullYear() == bdn.getFullYear() ?
      bdl.getDate() +
      ' ' +
      Game.months[bdl.getMonth()] +
      ' ' +
      (1 == bdl.getHours().toString().length ? '0' : '') +
      bdl.getHours() +
      ':' +
      (1 == bdl.getMinutes().toString().length ? '0' : '') +
      bdl.getMinutes() :
      Math.round(bdm / 31104000000) < 6 ?
      bdl.getDate() +
      ' ' +
      Game.months[bdl.getMonth()] +
      ' ' +
      bdl.getFullYear() +
      ' ' +
      (1 == bdl.getHours().toString().length ? '0' : '') +
      bdl.getHours() +
      ':' +
      (1 == bdl.getMinutes().toString().length ? '0' : '') +
      bdl.getMinutes() :
      'давно'
    )
  },
  getCookie: function(bdo) {
    return (
      (bdo = document.cookie.match(
        new RegExp(
          '(?:^|; )' +
          bdo.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') +
          '=([^;]*)'
        )
      )),
      bdo ? decodeURIComponent(bdo[1]) : undefined
    )
  },
  getSceneConfig: function() {
    return JSON.parse(JSON.stringify(Game.sceneConfig))
  },
  utils: {
    GetUiCat: function(bdp) {
      return 79 < bdp ?
        'uiCat3.png' :
        9 < bdp ?
        'uiCat2.png' :
        5 < bdp ?
        'uiCat1.png' :
        'uiCat0.png'
    },
    RandomId: function() {
      return (
        Math.random().toString(36).substring(2) +
        Math.random().toString(36).substring(2)
      )
    },
    CutStr: function(bdq, bdr) {
      return (
        (bdr = bdq.slice(0, bdr)),
        (bdr.length < bdq.length && (bdr += '...'),
          bdr)
      )
    },
    Distance: function(bds, bdt, bdu, bdv) {
      return Math.sqrt(
        Math.pow(bds - bdu, 2) +
        Math.pow(bdt - bdv, 2)
      )
    },
    LunCalc: function(bdw, bdx) {
      var bdy =
        Game.utils.GetFullYear(bdx) - Game.utils.GetFullYear(bdw)
      return 0 <
        (bdy =
          (bdy = (bdy *= 12) - Game.utils.GetMonth(bdw)) +
          Game.utils.GetMonth(bdx)) ?
        bdy :
        0
    },
    IsNight: function(bdz) {
      return (
        (bdz = Game.utils.GetHours(bdz)),
        19 < bdz || bdz < 4
      )
    },
    IsWinter: function(bea) {
      return (
        (bea = Game.utils.GetMonth(bea)),
        10 < bea || bea < 2
      )
    },
    GetFullYear(beb) {
      return new Date(beb).getUTCFullYear()
    },
    GetSeason: function(bec) {
      return (
        (bec = Game.utils.GetMonth(bec)),
        2 <= bec && bec <= 4 ?
        1 :
        5 <= bec && bec <= 7 ?
        2 :
        8 <= bec && bec <= 10 ?
        3 :
        0
      )
    },
    GetMonth: function(bed) {
      return new Date(bed).getUTCMonth()
    },
    GetDate: function(bef) {
      return new Date(bef).getUTCDate()
    },
    GetHours: function(beg) {
      return new Date(beg).getUTCHours()
    },
    GetMinutes: function(beh) {
      return new Date(beh).getUTCMinutes()
    },
    GetSeconds: function(bei) {
      return new Date(bei).getUTCSeconds()
    },
    RandomInt: function(bej, bek) {
      return (
        (bej = Math.ceil(bej)),
        (bek = Math.floor(bek)),
        Math.floor(Math.random() * (bek - bej + 1)) + bej
      )
    },
    ReplaceAll: function(bel, bem, ben) {
      return bel
        .toString()
        .replace(
          new RegExp(bem.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'),
          ben
        )
    },
    GetTimerString: function(beo) {
      var beo = Math.round(0.001 * beo),
        bep = Math.floor(beo / 60),
        beq = ''
      return (
        0 < bep && (beq += bep + ' м '),
        (beq += (beo -= 60 * bep) + ' с')
      )
    },
    Dec2Rgb: function(ber) {
      return [
        Math.floor(ber / 65536),
        Math.floor(ber / 256) % 256,
        ber % 256,
      ]
    },
    Rgb2Dec: function(bes, bet, beu) {
      return 65536 * bes + 256 * bet + beu
    },
    Hsl2Rgb: function(bev, bew, bex) {
      var bey, bez, bfa
      return (
        0 == bew ?
        (bey = bez = bfa = bex) :
        ((bew =
            2 * bex -
            (bex =
              bex < 0.5 ?
              bex * (1 + bew) :
              bex + bew - bex * bew)),
          (bey = Game.utils.Hue2Rgb(
            bew,
            bex,
            bev + 0.3333333333333333
          )),
          (bez = Game.utils.Hue2Rgb(bew, bex, bev)),
          (bfa = Game.utils.Hue2Rgb(
            bew,
            bex,
            bev - 0.3333333333333333
          ))),
        [
          Math.round(255 * bey),
          Math.round(255 * bez),
          Math.round(255 * bfa),
        ]
      )
    },
    Hue2Rgb: function(bfb, bfc, bfd) {
      return (
        bfd < 0 && (bfd += 1),
        1 < bfd && --bfd,
        bfd < 0.16666666666666666 ?
        bfb + 6 * (bfc - bfb) * bfd :
        bfd < 0.5 ?
        bfc :
        bfd < 0.6666666666666666 ?
        bfb +
        (bfc - bfb) * (0.6666666666666666 - bfd) * 6 :
        bfb
      )
    },
    Rgb2Hsl: function(bfe, bff, bfg) {
      var bfh, bfi, bfj, bfk, bfl, bfm
      if (
        ((bfe /= 255),
          (bff /= 255),
          (bfg /= 255),
          (bfj =
            bfk =
            bfi =
            ((bfl = Math.max(bfe, bff, bfg)) +
              (bfm = Math.min(bfe, bff, bfg))) /
            2),
          bfl == bfm)
      ) {
        bfi = bfj = 0
      } else {
        switch (
          ((bfh = bfl - bfm),
            (bfj =
              0.5 < bfk ?
              bfh / (2 - bfl - bfm) :
              bfh / (bfl + bfm)),
            bfl)
        ) {
          case bfe:
            bfi =
              (bff - bfg) / bfh +
              (bff < bfg ? 6 : 0)
            break
          case bff:
            bfi = (bfg - bfe) / bfh + 2
            break
          case bfg:
            bfi = (bfe - bff) / bfh + 4
        }
        bfi /= 6
      }
      return [bfi, bfj, bfk]
    },
    PickRgbRange: function(bfn, bfo) {
      return (
        (bfn = Game.utils.PickClosest(bfn, bfo)),
        Game.utils.PickRgb(bfn[0], bfn[1], bfn[2])
      )
    },
    PickRgb: function(bfp, bfq, bfr) {
      var bfs = 1 - bfr
      return [
        Math.round(bfp[0] * bfs + bfq[0] * bfr),
        Math.round(bfp[1] * bfs + bfq[1] * bfr),
        Math.round(bfp[2] * bfs + bfq[2] * bfr),
      ]
    },
    PickClosest: function(bft, bfu) {
      for (
        var bfv,
          bfw,
          bfx,
          bfy = 0,
          bfz = bft[0],
          bga = 0; bga < bft.length; bga++
      ) {
        bfu >= bft[bga][1] &&
          bfu > bfz[1] &&
          ((bfz = bft[bga]), (bfy = bga))
      }
      return bfz ==
        (bfx =
          bft.length - 1 == bfy ?
          bft[bfy] :
          bft[bfy + 1]) ? [bfx[0], bfx[0], 0] :
        ((bfv =
            (bfw = bfu - bfz[1]) +
            bfx[1] -
            bfu),
          [bfz[0], bfx[0], bfw / bfv])
    },
    EscapeHtml: function(bgb) {
      return bgb
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;')
    },
  },
}),
(Game.strings = bgc),
(Game.strings.ru.interactNames = {}),
(Game.strings.ru.interactNames[Game.packet.INTERACT_USE] = 'Использовать'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_BITE] = 'Куснуть'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_HIT] = 'Атаковать'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_LICK] = 'Вылизать'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_CATCH_UP] = 'Подобрать'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_OFFER] = 'Дружба'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_MIX] = 'Смешать'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_DIG] = 'Закопать'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_TALK] = 'Поговорить'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_GRAB] = 'Схватить'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_SHOW] = 'Посмотреть'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_PORTAL] =
  'Переместиться'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_PLANT_BREAK] = 'Сорвать'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_CHOOSE] = 'Выбрать'),
(Game.strings.ru.interactNames[Game.packet.INTERACT_SORT] = 'Перебрать'),
(Game.strings.ru.skills = {}),
(Game.strings.ru.skills[Game.packet.SKILL_HIT] = 'Боевые умения'),
(Game.strings.ru.skills[Game.packet.SKILL_NOSE_ITEM] = 'Поиск предметов'),
(Game.strings.ru.skills[Game.packet.SKILL_NOSE_ENEMY] = 'Поиск врагов'),
(Game.strings.ru.skills[Game.packet.SKILL_DIG] = 'Умение копать'),
(Game.strings.ru.skills[Game.packet.SKILL_SWIM] = 'Умение плавать'),
(Game.strings.ru.skills[Game.packet.SKILL_REP] = 'Верность племени'),
(Game.strings.ru.skills[Game.packet.SKILL_TALK] = 'Ролевая активность'),
(Game.strings.ru.skills[Game.packet.SKILL_SPEED] = 'Ловкость'),
(Game.strings.ru.skills[Game.packet.SKILL_SLEEP] = 'Выносливость'),
(Game.strings.ru.selectedClass = {}),
(Game.strings.ru.selectedClass[''] = '-'),
(Game.strings.ru.selectedClass[Game.packet.CLASS_FAST] = 'Ловкий'),
(Game.strings.ru.selectedClass[Game.packet.CLASS_SLIM] = 'Обычный'),
(Game.strings.ru.selectedClass[Game.packet.CLASS_STRONG] = 'Крепкий'),
(Game.strings.ru.achievements = {}),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_HIT_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_HIT]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_HIT_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_HIT]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_HIT_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_HIT]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_HIT_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_HIT]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ITEM]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ITEM]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ITEM]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ITEM_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ITEM]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ENEMY]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ENEMY]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ENEMY]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_NOSE_ENEMY_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_NOSE_ENEMY]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_DIG_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_DIG]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_DIG_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_DIG]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_DIG_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_DIG]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_DIG_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_DIG]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_REP_25] =
  'Прокачка на 25: ' + Game.strings.ru.skills[Game.packet.SKILL_REP]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_REP_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_REP]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_REP_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_REP]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_REP_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_REP]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SWIM_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_SWIM]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SWIM_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_SWIM]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SWIM_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_SWIM]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SWIM_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_SWIM]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_TALK_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_TALK]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_TALK_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_TALK]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_TALK_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_TALK]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_TALK_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_TALK]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SPEED_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_SPEED]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SPEED_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_SPEED]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SPEED_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_SPEED]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SPEED_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_SPEED]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SLEEP_10] =
  'Прокачка на 10: ' + Game.strings.ru.skills[Game.packet.SKILL_SLEEP]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SLEEP_50] =
  'Прокачка на 50: ' + Game.strings.ru.skills[Game.packet.SKILL_SLEEP]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SLEEP_200] =
  'Прокачка на 200: ' + Game.strings.ru.skills[Game.packet.SKILL_SLEEP]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_SKILL_SLEEP_999] =
  'Прокачка на 999: ' + Game.strings.ru.skills[Game.packet.SKILL_SLEEP]),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_ACERLIGHT] =
  'Сюжетное задание: Кленосветик'),
(Game.strings.ru.achievements[Game.packet.ACHIEVEMENT_BAG_UP] =
  'Племенное задание: Сбор добычи'),
(Game.strings.ru.colorCatDesigner = {}),
(Game.strings.ru.colorCatDesigner['Хвост'] = [
  59, 60, 61, 62, 63, 64, 82, 84, 85,
]),
(Game.strings.ru.colorCatDesigner['Туловище'] = [
  30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 68, 69, 70, 43, 44, 45, 46, 47, 48,
  49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 65, 66, 83, 86,
]),
(Game.strings.ru.colorCatDesigner['Голова'] = [
  7, 67, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
]),
(Game.strings.ru.colorCatDesigner['Уши'] = [15, 16]),
(Game.strings.ru.colorCatDesigner['Разное'] = [
  8, 9, 10, 11, 12, 13, 14, 41, 42, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
  81, 90, 91,
]),
(window.getCookie = function(bgd) {
  return (
    (bgd = document.cookie.match(
      new RegExp(
        '(?:^|; )' +
        bgd.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') +
        '=([^;]*)'
      )
    )),
    bgd ? decodeURIComponent(bgd[1]) : undefined
  )
}),
window.addEventListener(
  'load',
  function() {
    try {
      var bge = window.getCookie('catlife_token') !localStorage.getItem('gameToken1') &&
        bge &&
        localStorage.setItem('gameToken1', bge)
    } catch {}
    Game.serverHost = 'https://' + location.host
    Game.serverStaticContent =
      'https://static-content.catlifeonline.com/updates/'
    Game.loadDom()
  },
  false
)